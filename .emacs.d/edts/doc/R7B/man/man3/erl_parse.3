.TH erl_parse 3 "stdlib  1.9.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
erl_parse \- The Erlang Parser
.SH DESCRIPTION
.LP
This module is the basic Erlang parser which converts tokens into the abstract form of either forms (i\&.e\&., top-level constructs), expressions, or terms\&. Note that a token list must end with the \fIdot\fR token in order to be acceptable to the parse functions (see erl_scan)\&. 

.SH EXPORTS
.LP
.B
parse_form(Tokens) -> {ok, AbsForm} | {error, ErrorInfo}
.br
.RS
.TP
Types
Tokens = [Token]
.br
Token = {Tag, Line} | {Tag, Line, term()}
.br
Tag = atom()
.br
AbsForm = term()
.br
ErrorInfo = see section Error Information below\&.
.br
.RE
.RS
.LP
This function parses \fITokens\fR as if it were a form\&. It returns: 
.RS 2
.TP 4
.B
\fI{ok, AbsForm}\fR:
The parsing was successful\&. See section Abstract Form below for a description of \fIAbsForm\fR\&. 
.TP 4
.B
\fI{error, ErrorInfo}\fR:
An error occurred\&.
.RE
.RE
.LP
.B
parse_exprs(Tokens) -> {ok, Expr_list} | {error, ErrorInfo}
.br
.RS
.TP
Types
Tokens = [Token]
.br
Token = {Tag, Line} | {Tag, Line, term()}
.br
Tag = atom()
.br
Expr_list = [AbsExpr]
.br
AbsExpr = term()
.br
ErrorInfo = see section Error Information below\&.
.br
.RE
.RS
.LP
This function parses \fITokens\fR as if it were a list of expressions\&. It returns: 
.RS 2
.TP 4
.B
\fI{ok, Expr_list}\fR:
The parsing was successful\&. \fIExpr_list\fR is a list of the form \fIAbsExpr\fR, which is described in the section Abstract Form below\&. 
.TP 4
.B
\fI{error, ErrorInfo}\fR:
An error occurred\&.
.RE
.RE
.LP
.B
parse_term(Tokens) -> {ok, Term} | {error, ErrorInfo}
.br
.RS
.TP
Types
Tokens = [Token]
.br
Token = {Tag, Line} | {Tag, Line, term()}
.br
Tag = atom()
.br
Term = term()
.br
ErrorInfo = see section Error Information below\&.
.br
.RE
.RS
.LP
This function parses \fITokens\fR as if it were a term\&. It returns: 
.RS 2
.TP 4
.B
\fI{ok, Term}\fR:
The parsing was successful\&. \fITerm\fR is the Erlang term corresponding to the token list\&. 
.TP 4
.B
\fI{error, ErrorInfo}\fR:
An error occurred\&.
.RE
.RE
.LP
.B
format_error(ErrorDescriptor) -> string()
.br
.RS
.TP
Types
ErrorDescriptor = errordesc()
.br
.RE
.RS
.LP
Uses an \fIErrorDescriptor\fR and returns a string which describes the error\&. This function is usually called implicitly when an \fIErrorInfo\fR structure is processed (see below)\&. 
.RE
.LP
.B
tokens(AbsTerm) -> Tokens
.br
.B
tokens(AbsTerm, MoreTokens) -> Tokens
.br
.RS
.TP
Types
Tokens = MoreTokens = [Token]
.br
Token = {Tag, Line} | {Tag, Line, term()}
.br
Tag = atom()
.br
AbsTerm = term()
.br
ErrorInfo = see section Error Information below\&.
.br
.RE
.RS
.LP
This function generates a list of tokens representing the abstract form \fIAbsTerm\fR of an expression\&. Optionally, it appends \fIMoretokens\fR\&. 
.RE
.LP
.B
normalise(AbsTerm) -> Data
.br
.RS
.TP
Types
AbsTerm = Data = term()
.br
.RE
.RS
.LP
Converts the abstract form \fIAbsTerm\fR of a term into a conventional Erlang data structure (i\&.e\&., the term itself)\&. This is the inverse of \fIabstract/1\fR\&. 
.RE
.LP
.B
abstract(Data) -> AbsTerm
.br
.RS
.TP
Types
Data = AbsTerm = term()
.br
.RE
.RS
.LP
Converts the Erlang data structure \fIData\fR into an abstract form of type \fIAbsTerm\fR\&. This is the inverse of \fInormalise/1\fR\&. 
.RE
.SH Abstract Form
.LP
To be supplied
.SH Error Information
.LP
The \fIErrorInfo\fR mentioned above is the standard \fIErrorInfo\fR structure which is returned from all IO modules\&. It has the format: 

.nf
    {ErrorLine, Module, ErrorDescriptor}
.fi
.LP
A string which describes the error is obtained with the following call: 

.nf
apply(Module, format_error, ErrorDescriptor)
.fi
.SH See Also
.LP
io, erl_scan 
.SH AUTHOR
.nf
Robert Virding - support@erlang.ericsson.se
.fi
