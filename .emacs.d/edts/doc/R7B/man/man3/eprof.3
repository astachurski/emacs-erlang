.TH eprof 3 "tools  1.6.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
eprof \- Time Profiling Tool
.SH DESCRIPTION
.LP
This module is used to profile a program to find out how the execution time is used\&.
.LP
In R7 the \fIeprof\fR module uses the new local call trace feature, meaning that you no longer need to specially compile any of the modules\&. Eprof will automatically turn on local trace for all loaded modules (any for any that are loaded when during a profile session)\&. When profiling is stopped, Eprof will disable local call trace for all functions in all loaded modules\&.
.LP
The R7 version is faster than previous versions\&. But you can still expect significant slowdowns, in most cases at least 100 percent\&.

.SH EXPORTS
.LP
.B
start() -> {ok, Pid} | {error, {already_started, Pid}}
.br
.LP
.B
stop() -> stopped
.br
.LP
.B
profile(Rootset, Mod, Fun, Args)
.br
.RS
.LP
This function evaluates the expression \fIspawn(Mod, Fun, Args)\fR and profiles the process which evaluates it\&. The profiling is done for one function with a set of arguments in a certain root set of processes\&. All processes which are created by that function are profiled, together with its root set and all processes which are created by processes in that root set\&.
.LP
The profiling is terminated when the given function returns a value\&. The application must ensure that the function is truly synchronized and that no work continues after the function has returned a value\&.
.LP
The root set is a list of Pids or atoms\&. If atoms, they are assumed to be registered processes\&. 
.RE
.LP
.B
profile(Rootset) -> profiling | error 
.br
.RS
.LP
Sometimes, it is not possible to start profiling with the help of a single function\&. 
.LP
For example, if some external stimuli enters the Erlang runtime system through a port, and the handling of this stimuli is to be profiled until a response goes out through a port, it may be appropriate to change the source code and insert an explicit call to this function\&. The \fIprofile(Rootset)\fR function starts the profiling for processes included in \fIRootset\fR\&. 
.RE
.LP
.B
stop_profiling() -> profiling_stopped | profiling_already_stopped
.br
.RS
.LP
This function stops the collection of statistics performed by the \fIeprof\fR process\&. The \fIeprof\fR process then holds data which can be analysed at a later stage\&. 
.RE
.LP
.B
analyse() -> ok
.br
.RS
.LP
When the profiling has ended - profiling using \fIprofile/4\fR, or \fIprofile/1\fR together with \fIstop_profiling/0\fR - the \fIeprof\fR process can print the data collected during the run\&. The printed profiling statistics show the activity for each process\&. 
.RE
.LP
.B
total_analyse() -> ok
.br
.RS
.LP
With this function, the total results of profiling is printed irrespective which process each function has used\&. 
.RE
.LP
.B
log(File) -> ok 
.br
.RS
.LP
This function ensures that a copy of all printouts are sent to both \fIFile\fR and the screen\&.
.RE
.SH Notes
.LP
The actual supervision of execution times is in itself a CPU intensive activity\&. A message is sent to the \fIeprof\fR process for every function call that is made by the profiled code\&.
.SH SEE ALSO
.LP
compile(3)
.SH AUTHOR
.nf
Claes Wikstrom - support@erlang.ericsson.se
.fi
