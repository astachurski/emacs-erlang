.TH etk 3 "etk  0.9.3" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
etk \-  Tk toolkit interface 
.SH DESCRIPTION
.LP
Erlang/Tk (ETK) is an adoption of the Tcl/Tk (4\&.2) to the Erlang environment\&. Erlang only uses the Tk part of the Tcl/Tk\&. This means that the tcl part of the widgets are re-implemented (ported) to Erlang\&.

.SH  Introduction
.LP
Erlang/Tk is an adoption of the Tcl/Tk (4\&.2) to the Erlang environment\&. Erlang only uses the Tk part of the Tcl/Tk\&. This means that the tcl part of the widgets are re-implemented (ported) to Erlang\&.
.LP
Furthermore, in order to be able to effectively use this library, understanding the GUI programming concepts of tcl/tk is absolutely essential\&. Therefore we recommend a good book on tcl/tk such as "Effective Tcl/Tk Programming" by "Mark Harrisson and Michael McLennan, Addison Wesley 1998" as an introductory text to the "etk" library\&. 
.LP
Since Tcl is string based language, the syntax had to be changed somewhat\&. Instead of writing 

.nf
<Command> <Path> -option value \&.\&.
.fi
.LP
In erlang we write : 

.nf
 
Command Path [{option,value},\&.\&.\&.])\&.
.fi
.LP
This syntax will be more familiar to the erlang programmer\&. In the same time the binding is straight forward, if you used tcl/tk before it will be a matter of pattern matching to convert an existing Tcl/Tk program into a Erlang/Tk program\&.
.LP
In this first release of etk, the documentation is somewhat poor\&. The best way to get going with this initial release of etk is to use the widget tour that can be found in the examples directory\&. The widget tour must be run in the "wtour" directory itself\&. 

.nf
% cd etk/examples/wtour
% erl
Eshell V47\&.4\&.1  (abort with ^G)
1>  make:all()

\&.\&.\&.\&.\&.\&.
2> wtour:start()\&.
.fi
.LP
To create a widget we use the syntax \fIetk:<widget>(Father, Options)\fR Options) where options is a list of \fI{Option, Value}\fR or Value\&. This will hopefully become clear as we introduce some examples\&. 
.LP
A script in erlang is a fun\&. Depending on how and where the fun is bound it must match the correct arity, this is where some understanding of tk is needed\&. For example, to create a button and bind a function to it that will be executed when the button is pressed we write:

.nf
Butt = etk:button(Top, [{text,"My Button"},
                        {command, fun() -> io:format("Action\\n") end}])\&.
.fi
.LP
One common thing to do is to let the function send a message to some controlling process such as in: 

.nf
Self = self(),
Butt = etk:button(Top, [{text,"My Button"},
                        {command, fun() -> Self ! my_button end}])\&.
.fi
.LP
The function is evaluated in a different process than then process that defines the binding, thus the \fIself()\fR expression must be evaluated before the binding is created\&.
.LP
If we want to bind a function to the button that is evaluated whenever the mouse enters the button, we have:

.nf
tk:bind(Butt, "<Enter>", [\&'%W\&'],
         fun(W) -> io:format("Enter\\n") end)
.fi
.LP
Events are evaluated in the widget context\&. When an event, mouse click etc enters the system, a widget is looked up\&. Event functions bound to that widget are searched for and executed in the order given by bindtags\&. The default binding order is "all class instance"\&. By returning the atom \fIbreak\fR from an event function the evaluation chain is stopped\&. 
.LP
Most (if not all) of the \fIetk\fR api functions have a corresponding detailed description in the original tk 4\&.2 documentation\&. Whenever appropriate, we provide a a link to the original documentation\&. 
.LP
The module \fIetk\fR exports an API which is mainly widget creation where a new widget path is automatically created, the main API is found in the \fItk\fR module\&. 
.SH  The difference between the etk module and the tk module 
.LP
The \fIetk\fR module it self can be handy when creating widgets since it automatically creates a new path which is the catenation of the parent widget with the type of the new widget\&. For example when we create a new button or frame it is convenient to not have to explicitly specify the new path to the new widget\&. Thus, etk exports a number of function that both generate a new path as well as create the new widget in a manner similar to: 

.nf

W = tk:mkpath(Parent,WidgetType),
tk:Widget(W, Opts),
W\&.
.fi
.LP
In particular we have \fIetk\fR functions to create the following widgets with a generated widget path\&. 
.RS 2
.TP 2
*
\fItoplevel\fR
.TP 2
*
\fIbutton\fR
.TP 2
*
\fIcanvas\fR
.TP 2
*
\fIcheckbutton\fR
.TP 2
*
\fIentry\fR
.TP 2
*
\fIframe\fR
.TP 2
*
\fIlabel\fR
.TP 2
*
\fIlistbox\fR
.TP 2
*
\fImenu\fR
.TP 2
*
\fImenubutton\fR
.TP 2
*
\fImessage\fR
.TP 2
*
\fIradiobutton\fR
.TP 2
*
\fIscale\fR
.TP 2
*
\fIscrollbar\fR
.TP 2
*
\fItext\fR
.RE
.LP
One of the few case where it is necessary to explicitly create the new path to a widget, by hand is when we setup the scrollbar to an other widget\&. Example: 

.nf
Top = etk:toplevel([]),
tk:wm([title,Top,"Widget tour"]),
Self = self(),
Text = Top ++ "\&.txt",
ScrollY = Top ++ "\&.sy",
tk:text(Text,
      [{yscrollcommand,
        fun(From,To) -> tk:cmd(ScrollY, ["set",From,To]) end}])\&.
.fi
.SH AUTHOR
.nf
Tony Rogvall - support@erlang.ericsson.se
.fi
