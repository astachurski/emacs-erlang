.TH eva_snmp_adaptation 3 "eva  2.0.2.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
eva_snmp_adaptation  \- An SNMP Adaptation to EVA
.SH DESCRIPTION
.LP
This module implements an SNMP adaptation to basic EVA\&. The MIB implemented by this adaptation is OTP-EVA-MIB\&. The MIB is located in the directory \fImibs\fR in the distribution\&. 
.LP
The resources generate events and alarms using the API provided by EVA\&. They are not aware that the events and alarms are sent as SNMP traps to SNMP managers\&. 
.LP
However, each trap to be sent must be defined in an SNMP MIB, and there must be instrumentation functions that translate the EVA events and alarms into SNMP traps\&. Normally, each event and alarm in the system is mapped onto one separate SNMP trap\&. This mapping is done by registration of the events\&. The following functions are available for the registration\&. They could be called when the corresponding MIB is loaded\&. 

.SH EXPORTS
.LP
.B
create_tables(Nodes) -> void()
.br
.RS
.TP
Types
Nodes = [node()]
.br
.RE
.RS
.LP
This function creates the Mnesia tables required for the \fIeva_snmp_adaptation\fR\&. \fINodes\fR is a list of nodes where the tables should be replicated\&. This list of nodes should specify the same nodes where the application EVA can be run distributed, so that EVA always can have local access to the tables\&. 
.LP
This function should be called once when installing the EVA application in the system\&. 
.RE
.LP
.B
name2index(Name) -> {ok, Index} | undefined
.br
.RS
.TP
Types
Name = atom()
.br
Index = integer()
.br
.RE
.RS
.LP
Maps an event to the corresponding \fIeventIndex\fR value for the event, as defined in the \fIeventTable\fR in \fIOTP-EVA-MIB\fR\&. 
.RE
.LP
.B
register_alarms(Alarms) -> void()
.br
.RS
.TP
Types
Alarms = [{Name, Trap, Treatment, Community, Func}]
.br
Name = Trap = atom()
.br
Func = fun(#alarm) -> {ok, ObjOID, CauseOID, SnmpVarbinds}
.br
Treatment = none | snmpTrap
.br
Community = string()
.br
ObjOid = CauseOid = [integer()]
.br
.RE
.RS
.LP
This function must be used to register an EVA alarm as an SNMP alarm\&. It is used to associate each event with the corresponding SNMP trap and an Erlang instrumentation function which translates the \fI#alarm\fR into a trap\&. The corresponding \fITrap\fR must be defined in an SNMP MIB\&. \fITreatment\fR defines how this alarm is treated when it is generated\&. If it is \fIsnmpTrap\fR, it is sent to the \fICommunity\fR\&. 
.LP
When the EVA alarm \fIName\fR is generated by an application, the adaptation calls \fIFunc(#alarm)\fR\&. The purpose of the \fIFunc\fR is to translate the Erlang record \fI#alarm\fR into SNMP values\&. \fIObjOID\fR is an OBJECT IDENTIFIER representation of the \fI#alarm\&.sender\fR, \fICauseOID\fR is an OBJECT IDENTIFIER representation of the \fI#alarm\&.cause\fR, and \fISnmpVarbinds\fR is a list of extra variable bindings for the trap\&. This list is as defined for \fIsnmp:send_trap\fR\&. 
.LP
The \fIalarm\fR record is defined in \fIeva\&.hrl\fR, available in the \fIinclude\fR directory in the distribution\&. 
.RE
.LP
.B
register_events(Events) -> void()
.br
.RS
.TP
Types
Events = [{Name, Trap, Treatment, Community, Func}]
.br
Name = Trap = atom()
.br
Func = fun(#event) -> {ok, SnmpVarbinds}
.br
Treatment = none | snmpTrap
.br
Community = string()
.br
.RE
.RS
.LP
This function must be used to register an EVA event as an SNMP event\&. It is used to associate each event with the corresponding SNMP trap and an Erlang instrumentation function which translates the \fI#event\fR into a trap\&. The corresponding \fITrap\fR must be defined in an SNMP MIB\&. \fITreatment\fR defines how this event is treated when it is generated\&. If it is \fIsnmpTrap\fR it is sent to the \fICommunity\fR\&. 
.LP
When the EVA event \fIName\fR is generated by an application, the adaptation calls \fIFunc(#event)\fR\&. The purpose of the \fIFunc\fR is to translate the Erlang record \fI#event\fR into SNMP values\&. The \fISnmpVarbinds\fR is a list of extra variable bindings for the trap\&. This list is as defined for \fIsnmp:send_trap\fR\&. 
.LP
The \fIevent\fR record is defined in \fIeva\&.hrl\fR, available in the \fIinclude\fR directory in the distribution\&. 
.RE
.LP
.B
start_link() -> {ok, Pid} | {error, Reason}
.br
.RS
.LP
Starts the EVA SNMP adaptation\&. This function can be used to include the service in a supervisor\&. Normally, functions in the supervisor \fIeva_sup\fR can be used instead\&. 
.LP
The function \fIcreate_tables/1\fR must be called before the service is started\&. 
.LP
An EVA adaptation is always implemented as a \fIgen_event\fR handler\&. So is \fIeva_snmp_adaptation\fR\&. But in order to supervise this service from an ordinary supervisor, this function creates a process that supervises the \fIgen_event\fR handler\&. 
.RE
.SH Instrumentation Functions for the OTP-EVA-MIB
.LP
In some cases, other adaptations may need access to the SNMP specific data in EVA\&. To do this, the instrumentation functions for the SNMP objects can be used\&. These instrumentation functions takes the arguments and return the values defined in the application \fIsnmp\fR\&. 
.SH EXPORTS
.LP
.B
alarmTable(Op, RowIndex, Cols) -> InstrumRet
.br
.RS
.LP
Instrumentation function for \fIalarmTable\fR\&. This function assumes that access checks are made according to the MIB, so it may crash if, for example, \fIalarmClass\fR is set\&. 
.RE
.LP
.B
curAlarmTable(Op, RowIndex, Cols) -> InstrumRet
.br
.RS
.LP
Instrumentation function for \fIcurrentAlarmTable\fR\&. This function assumes that access checks are made according to the MIB, so it may crash if, for example, \fIcurrentAlarmSeverity\fR is set\&. 
.RE
.LP
.B
curAlarmLastTimeChanged(get) -> InstrumRet
.br
.RS
.LP
Instrumentation function for \fIcurrentAlarmLastTimeSent\fR\&. 
.RE
.LP
.B
eventTable(Op, RowIndex, Cols) -> InstrumRet
.br
.RS
.LP
Instrumentation function for \fIeventTable\fR\&. This function assumes that access checks are made according to the MIB, so it may crash if, for example, \fIeventTrapName\fR is set\&. 
.RE
.SH SEE ALSO
.LP
eva(3), eva_sup(3), gen_event(3), snmp(3) 
.SH AUTHOR
.nf
Martin Bjorklund - support@erlang.ericsson.se
.fi
