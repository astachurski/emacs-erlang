.TH ftp 3 "inets  2.5.3" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
ftp  \- A File Transfer Protocol client
.SH DESCRIPTION
.LP
The \fIftp\fR module implements a client for file transfer according to a subset of the File Transfer Protocol (see  RFC 959)\&. 
.LP
The following is a simple example of an ftp session, where the user \fIguest\fR with password \fIpassword\fR logs on to the remote host \fIerlang\&.org\fR, and where the file \fIappl\&.erl\fR is transferred from the remote to the local host\&. When the session is opened, the current directory at the remote host is \fI/home/guest\fR, and \fI/home/fred\fR at the local host\&. Before transferring the file, the current local directory is changed to \fI/home/eproj/examples\fR, and the remote directory is set to \fI/home/guest/appl/examples\fR\&. 

.nf
1>{ok, Pid} = ftp:open("erlang\&.org")\&.
{ok,<0\&.22\&.0>}
2>ftp:user(Pid, "guest", "password")\&.
ok
3>ftp:pwd(Pid)\&.
{ok, "/home/guest"}
4>ftp:cd(Pid, "appl/examples")\&.
ok
5>ftp:lpwd(Pid)\&.
{ok, "/home/fred"}\&.
6>ftp:lcd(Pid, "/home/eproj/examples")\&.
ok
7>ftp:recv(Pid, "appl\&.erl")\&.
ok
8>ftp:close(Pid)\&.
ok
.fi
.LP
In addition to the ordinary functions for receiving and sending files (see \fIrecv/2\fR, \fIrecv/3\fR, \fIsend/2\fR and \fIsend/3\fR) there are functions for receiving remote files as binaries (see \fIrecv_bin/2\fR) and for sending binaries to to be stored as remote files (see \fIsend_bin/3\fR)\&. 
.LP
There is also a set of functions for sending contiguous parts of a file to be stored in a remote file (see \fIsend_chunk_start/2\fR, \fIsend_chunk/2\fR and \fIsend_chunk_end/1\fR)\&. 
.LP
The particular return values of the functions below depend very much on the implementation of the FTP server at the remote host\&. In particular the results from \fIls\fR and \fInlist\fR varies\&. Often real errors are not reported as errors by \fIls\fR, even if for instance a file or directory does not exist\&. \fInlist\fR is usually more strict, but some implementations have the peculiar behaviour of responding with an error, if the request is a listing of the contents of directory which exists but is empty\&. 

.SH EXPORTS
.LP
.B
cd(Pid, Dir) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Dir = string()
.br
Reason = epath | elogin | econn 
.br
.RE
.RS
.LP
Changes the working directory at the remote server to \fIDir\fR\&. 
.RE
.LP
.B
close(Pid) -> ok
.br
.RS
.TP
Types
Pid = pid()
.br
.RE
.RS
.LP
Ends the ftp session\&. 
.RE
.LP
.B
delete(Pid, File) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
File = string()
.br
Reason = epath | elogin | econn
.br
.RE
.RS
.LP
Deletes the file \fIFile\fR at the remote server\&. 
.RE
.LP
.B
formaterror(Tag) -> string()
.br
.RS
.TP
Types
Tag = {error, atom()} | atom()
.br
.RE
.RS
.LP
Given an error return value \fI{error, Reason}\fR, this function returns a readable string describing the error\&. 
.RE
.LP
.B
lcd(Pid, Dir) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Dir = string()
.br
Reason = epath
.br
.RE
.RS
.LP
Changes the working directory to \fIDir\fR for the local client\&. 
.RE
.LP
.B
lpwd(Pid) -> {ok, Dir}
.br
.RS
.TP
Types
Pid = pid()
.br
.RE
.RS
.LP
Returns the current working directory at the local client\&. 
.RE
.LP
.B
ls(Pid [, Dir]) -> {ok, Listing} | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Dir = string()
.br
Listing = string()
.br
Reason = epath | elogin | econn
.br
.RE
.RS
.LP
Returns a listing of the contents of the remote current directory (\fIls/1\fR) or the specified directory (\fIls/2\fR)\&. The format of \fIListing\fR is operating system dependent (on UNIX it is typically produced from the output of the \fIls -l\fR shell command)\&. 
.RE
.LP
.B
mkdir(Pid, Dir) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Dir = string()
.br
Reason = epath | elogin | econn
.br
.RE
.RS
.LP
Creates the directory \fIDir\fR at the remote server\&. 
.RE
.LP
.B
nlist(Pid [, Dir]) -> {ok, Listing} | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Dir = string()
.br
Listing = string()
.br
Reason = epath | elogin | econn
.br
.RE
.RS
.LP
Returns a listing of the contents of the remote current directory (\fInlist/1\fR) or the specified directory (\fInlist/2\fR)\&. The format of \fIListing\fR is a stream of file names, where each name is separated by <CRLF> or <NL>\&. Contrary to the \fIls\fR function, the purpose of \fInlist\fR is to make it possible for a program to automatically process file name information\&. 
.RE
.LP
.B
open(Host [, Flags]) -> {ok, Pid} | {error, Reason}
.br
.RS
.TP
Types
Host = string() | ip_address()
.br
ip_address() = {byte(), byte(), byte(), byte()}
.br
byte() = 0 | 1 | \&.\&.\&. | 255
.br
Flags = [Flag]
.br
Flag = verbose
.br
Pid = pid()
.br
Reason = ehost
.br
.RE
.RS
.LP
Opens a session with the ftp server at \fIHost\fR\&. The argument \fIHost\fR is either the name of the host, its IP address in dotted decimal notation (e\&.g\&. \fI"150\&.236\&.14\&.136"\fR), or a tuple of arity 4 (e\&.g\&. \fI{150, 236, 14, 136}\fR)\&. 
.LP
If \fIFlags\fR is set, response messages from the remote server will be written to standard output\&. 
.LP
The file transfer type is set to \fIbinary\fR when the session is opened\&. 
.LP
The current local working directory (cf\&. \fIlpwd/1\fR) is set to the value reported by \fIfile:get_cwd/1\fR\&. the wanted local directory\&. 
.LP
The return value \fIPid\fR is used as a reference to the newly created ftp client in all other functions\&. The ftp client process is linked to the caller\&. 
.RE
.LP
.B
pwd(Pid) -> {ok, Dir} | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Reason = elogin | econn
.br
.RE
.RS
.LP
Returns the current working directory at the remote server\&. 
.RE
.LP
.B
recv(Pid, RemoteFile [, LocalFile]) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
RemoteFile = LocalFile = string()
.br
Reason = epath | elogin | econn
.br
.RE
.RS
.LP
Transfer the file \fIRemoteFile\fR from the remote server to the the file system of the local client\&. If \fILocalFile\fR is specified, the local file will be \fILocalFile\fR; otherwise it will be \fIRemoteFile\fR\&. 
.RE
.LP
.B
recv_bin(Pid, RemoteFile) -> {ok, Bin} | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Bin = binary()
.br
RemoteFile = string()
.br
Reason = epath | elogin | econn
.br
.RE
.RS
.LP
Transfers the file \fIRemoteFile\fR from the remote server and receives it as a binary\&. 
.RE
.LP
.B
rename(Pid, Old, New) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
CurrFile = NewFile = string()
.br
Reason = epath | elogin | econn
.br
.RE
.RS
.LP
Renames \fIOld\fR to \fINew\fR at the remote server\&. 
.RE
.LP
.B
rmdir(Pid, Dir) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Dir = string()
.br
Reason = epath | elogin | econn
.br
.RE
.RS
.LP
Removes directory \fIDir\fR at the remote server\&. 
.RE
.LP
.B
send(Pid, LocalFile [, RemoteFile]) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
LocalFile = RemoteFile = string()
.br
Reason = epath | elogin | econn | etnospc | epnospc | efnamena
.br
.RE
.RS
.LP
Transfers the file \fILocalFile\fR to the remote server\&. If \fIRemoteFile\fR is specified, the name of the remote file is set to \fIRemoteFile\fR; otherwise the name is set to \fILocalFile\fR\&. 
.RE
.LP
.B
send_bin(Pid, Bin, RemoteFile) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Bin = binary()()
.br
RemoteFile = string()
.br
Reason = epath | elogin | enotbinary | econn | etnospc | epnospc | efnamena
.br
.RE
.RS
.LP
Transfers the binary \fIBin\fR into the file \fIRemoteFile\fR at the remote server\&. 
.RE
.LP
.B
send_chunk(Pid, Bin) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Bin = binary()
.br
Reason = elogin | echunk | enotbinary | econn
.br
.RE
.RS
.LP
Transfer the chunk \fIBin\fR to the remote server, which writes it into the file specified in the call to \fIsend_chunk_start/2\fR\&. 
.LP
Note that for some errors, e\&.g\&. file system full, it is neccessery to to call \fIsend_chunk_end\fR to get the proper reason\&. 
.RE
.LP
.B
send_chunk_start(Pid, File) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
File = string()
.br
Reason = epath | elogin | econn
.br
.RE
.RS
.LP
Start transfer of chunks into the file \fIFile\fR at the remote server\&. 
.RE
.LP
.B
send_chunk_end(Pid) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Reason = elogin | echunk | econn | etnospc | epnospc | efnamena
.br
.RE
.RS
.LP
Stops transfer of chunks to the remote server\&. The file at the remote server, specified in the call to \fIsend_chunk_start/2\fR is closed by the server\&. 
.RE
.LP
.B
type(Pid, Type) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
Type = ascii | binary
.br
Reason = etype | elogin | econn
.br
.RE
.RS
.LP
Sets the file transfer type to \fIascii\fR or \fIbinary\fR\&. When an ftp session is opened, the transfer type is set to \fIbinary\fR\&. 
.RE
.LP
.B
user(Pid, User, Password) -> ok | {error, Reason}
.br
.RS
.TP
Types
Pid = pid()
.br
User = Password = string()
.br
Reason = euser | econn
.br
.RE
.RS
.LP
Performs login of \fIUser\fR with \fIPassword\fR\&. 
.RE
.SH ERRORS
.LP
The possible error reasons and the corresponding diagnostic strings returned by \fIformaterror/1\fR are as follows:
.RS 2
.TP 4
.B
\fIechunk\fR:
Synchronisation error during chunk sending\&. 
.RS 4
.LP
A call has been made to \fIsend_chunk/2\fR or \fIsend_chunk_end/1\fR, before a call to \fIsend_chunk_start/2\fR; or a call has been made to another transfer function during chunk sending, i\&.e\&. before a call to \fIsend_chunk_end/1\fR\&. 
.RE
.TP 4
.B
\fIeclosed\fR:
The session has been closed\&. 
.TP 4
.B
\fIeconn\fR:
Connection to remote server prematurely closed\&. 
.TP 4
.B
\fIehost\fR:
Host not found, FTP server not found, or connection rejected by FTP server\&. 
.TP 4
.B
\fIelogin\fR:
User not logged in\&. 
.TP 4
.B
\fIenotbinary\fR:
Term is not a binary\&. 
.TP 4
.B
\fIepath\fR:
No such file or directory, or directory already exists, or permission denied\&. 
.TP 4
.B
\fIetype\fR:
No such type\&. 
.TP 4
.B
\fIeuser\fR:
User name or password not valid\&. 
.TP 4
.B
\fIetnospc\fR:
Insufficient storage space in system [452]\&. 
.TP 4
.B
\fIepnospc\fR:
Exceeded storage allocation (for current directory or dataset) [552]\&. 
.TP 4
.B
\fIefnamena\fR:
File name not allowed [553]\&. 
.RE
.SH SEE ALSO
.LP
file, filename, J\&. Postel and J\&. Reynolds: File Transfer Protocol (RFC 959)\&.
.SH AUTHOR
.nf
Peter Hogfeldt - support@erlang.ericsson.se
.fi
