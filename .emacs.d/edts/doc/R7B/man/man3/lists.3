.TH lists 3 "stdlib  1.9.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
lists \- List Processing Functions
.SH DESCRIPTION
.LP
This module contains functions for list processing\&. The functions are organized in two groups: those in the first group perform a particular operation on one ore several lists, whereas those in the second group perform use a user-defined function (given as the first argument) to perform an operation on one list\&. 

.SH EXPORTS
.LP
.B
append(ListOfLists) -> List1
.br
.RS
.TP
Types
ListOfLists = [List]
.br
List = List1 = [term()]
.br
.RE
.RS
.LP
Returns a list in which all the sub-lists of \fIListOfLists\fR have been appended\&. For example:

.nf
> lists:append([[1, 2, 3], [a, b], [4, 5, 6]])\&.
[1, 2, 3, a, b, 4, 5, 6]
.fi
.RE
.LP
.B
append(List1, List2) -> List3
.br
.RS
.TP
Types
List1 = List2 = List3 = [term()]
.br
.RE
.RS
.LP
Returns a new list \fIList3\fR which is made from the elements of \fIList1\fR followed by the elements of \fIList2\fR\&. For example:

.nf
> lists:append("abc", "def")\&.
"abcdef"\&.
.fi
.LP
\fIlists:append(A, B)\fR is equivalent to \fIA ++ B\fR\&. 
.RE
.LP
.B
concat(Things) -> string()
.br
.RS
.TP
Types
Things = [Thing]
.br
Thing = atom() | integer() | float() | string()
.br
.RE
.RS
.LP
Concatenates the ASCII list representation of the elements of \fIThings\fR\&. The elements of \fIThings\fR can be atoms, integers, floats or strings\&. 

.nf
> lists:concat([doc, \&'/\&', file, \&'\&.\&', 3])\&.
"doc/file\&.3"
.fi
.RE
.LP
.B
delete(Element, List1) -> List2
.br
.RS
.TP
Types
List1 = list2 = [Element]
.br
Element = term()
.br
.RE
.RS
.LP
Returns a copy of \fIList1\fR, but the first occurrence of \fIElement\fR, if present, is deleted\&. 
.RE
.LP
.B
duplicate(N, Element) -> List
.br
.RS
.TP
Types
N = int()
.br
List = [Element]
.br
Element = term()
.br
.RE
.RS
.LP
Returns a list which contains N copies of the term \fIElement\fR\&. 
.SS Note:
.LP
\fIN\fR must be an integer >= 0\&. For example:


.nf
> lists:duplicate(5, xx)\&.
[xx, xx, xx, xx, xx]
.fi
.RE
.LP
.B
flatlength(DeepList) -> int()
.br
.RS
.LP
Equivalent to \fIlength(flatten(DeepList))\fR, but more efficient\&. 
.RE
.LP
.B
flatten(DeepList) -> List
.br
.RS
.TP
Types
DeepList = [term() | DeepList]
.br
.RE
.RS
.LP
Returns a flattened version of \fIDeepList\fR\&. 
.RE
.LP
.B
flatten(DeepList, Tail) -> List
.br
.RS
.TP
Types
DeepList = [term() | DeepList]
.br
Tail = [term()]
.br
.RE
.RS
.LP
Returns a flattened version of \fIDeepList\fR with the tail \fITail\fR appended\&. 
.RE
.LP
.B
keydelete(Key, N, TupleList1) -> TupleList2
.br
.RS
.TP
Types
TupleList1 = TupleList2 = [tuple()]
.br
N = int()
.br
Key = term()
.br
.RE
.RS
.LP
Returns a copy of \fITupleList1\fR where the first occurrence of a tuple whose \fIN\fRth element is \fIKey\fR is deleted, if present\&. 
.RE
.LP
.B
keymember(Key, N, TupleList) -> bool()
.br
.RS
.TP
Types
TupleList = [tuple()]
.br
N = int()
.br
Key = term()
.br
.RE
.RS
.LP
Searches the list of tuples \fITupleList\fR for a tuple whose \fIN\fRth element is \fIKey\fR\&. 
.RE
.LP
.B
keymerge(N, List1, List2)
.br
.RS
.TP
Types
N = int()
.br
List1 = List2 = [tuple()]
.br
.RE
.RS
.LP
Returns the sorted list formed by merging the \fIList1\fR and \fIList2\fR\&. The merge is performed on the \fIN\fRth element of each tuple\&. Both \fIList1\fR and \fIList2\fR must be key-sorted prior to evaluating this function; otherwise the order of the elements in the result will be undefined\&. When elements in the input lists compare equal, elements from \fIList1\fR are picked before elements from \fIList2\fR\&. 
.RE
.LP
.B
keyreplace(Key, N, TupleList1, NewTuple) -> TupleList2
.br
.RS
.TP
Types
Key = term()
.br
N = int()
.br
TupleList1 = TupleList2 = [tuple()]
.br
NewTuple = tuple()
.br
.RE
.RS
.LP
Returns a list of tuples\&. In this list, a tuple is replaced by the tuple \fINewTuple\fR\&. This tuple is the first tuple in the list where the element number \fIN\fR is equal to \fIKey\fR\&. 
.RE
.LP
.B
keysearch(Key, N, TupleList) -> Result
.br
.RS
.TP
Types
TupleList = [tuple()]
.br
N = int()
.br
Key = term()
.br
Result = {value, tuple()} | false
.br
.RE
.RS
.LP
Searches the list of the tuples \fITupleList\fR for \fITuple\fR whose \fIN\fRth element is \fIKey\fR\&. Returns \fI{value, Tuple}\fR if such a tuple is found, or \fIfalse\fR if no such tuple is found\&. 
.RE
.LP
.B
keysort(N, List1) -> List2
.br
.RS
.TP
Types
N = int()
.br
List1 = List2 = [tuple()]
.br
.RE
.RS
.LP
Returns a list containing the sorted elements of \fIList1\fR\&. \fITupleList1\fR must be a list of tuples, and the sort is performed on the \fIN\fRth element of the tuple\&. The sort is stable\&. 
.RE
.LP
.B
last(List) -> Element
.br
.RS
.TP
Types
List = [Element]
.br
Element = term()
.br
.RE
.RS
.LP
Returns the last element in \fIList\fR\&. 
.RE
.LP
.B
max(List) -> Max
.br
.RS
.TP
Types
List = [Element]
.br
Element = Max = term()
.br
.RE
.RS
.LP
Returns the maximum element of \fIList\fR\&. 
.RE
.LP
.B
member(Element, List) -> bool()
.br
.RS
.TP
Types
List = [Element]
.br
Element = term()
.br
.RE
.RS
.LP
Returns \fItrue\fR if \fIElement\fR is contained in the list \fIList\fR, otherwise \fIfalse\fR\&. 
.RE
.LP
.B
merge(List1, List2) -> List3
.br
.RS
.TP
Types
List1 = List2 = List3 = [term()]
.br
.RE
.RS
.LP
Returns the sorted list formed by merging \fIList1\fR and \fIList2\fR\&. Both \fIList1\fR and \fIList2\fR must be sorted prior to evaluating this function\&. 
.RE
.LP
.B
merge(Fun, List1, List2) -> List
.br
.RS
.TP
Types
List = List1 = List2 = [Element]
.br
Fun = fun(Element, Element) -> bool()
.br
Element = term()
.br
.RE
.RS
.LP
Returns the sorted list formed by merging \fIList1\fR and \fIList2\fR\&. Both \fIList1\fR and \fIList2\fR must be sorted prior to evaluating this function, according to the ordering function \fIFun\fR\&. \fIFun(A, B)\fR should return \fItrue\fR if \fIA\fR comes before \fIB\fR in the ordering, \fIfalse\fR otherwise\&. 
.RE
.LP
.B
min(List) -> Min
.br
.RS
.TP
Types
List = [Element]
.br
Element = Max = term()
.br
.RE
.RS
.LP
Returns the minimum element of \fIList\fR\&. 
.RE
.LP
.B
nth(N, List) -> Element
.br
.RS
.TP
Types
N = int()
.br
List = [Element]
.br
Element = term()
.br
.RE
.RS
.LP
Returns the \fIN\fRth element of the \fIList\fR\&. For example:

.nf
> lists:nth(3, [a, b, c, d, e])\&.
c
.fi
.RE
.LP
.B
nthtail(N, List1) -> List2
.br
.RS
.TP
Types
N = int()
.br
List1 = List2 = [Alpha]
.br
.RE
.RS
.LP
Returns the \fIN\fRth tail of \fIList\fR\&. For example:

.nf
> lists:nthtail(3, [a, b, c, d, e])\&.
[d, e]
.fi
.RE
.LP
.B
prefix(List1, List2) -> bool()
.br
.RS
.TP
Types
List1 = List2 = [term()]
.br
.RE
.RS
.LP
Returns \fItrue\fR if \fIList1\fR is a prefix of \fIList2\fR, otherwise \fIfalse\fR\&. 
.RE
.LP
.B
reverse(List1) -> List2
.br
.RS
.TP
Types
List1 = List2 = [term()]
.br
.RE
.RS
.LP
Returns a list with the top level elements in \fIList1\fR in reverse order\&. 
.RE
.LP
.B
reverse(List1, List2) -> List3
.br
.RS
.TP
Types
List1 = List2 = List3 = [term()]
.br
.RE
.RS
.LP
Returns a list where \fIList1\fR has been reversed and appended to the beginning of \fIList2\fR\&. Equivalent to \fIreverse(List1) ++ List2\fR\&. For example:

.nf
> lists:reverse([1, 2, 3, 4], [a, b, c])\&.
[4, 3, 2, 1, a, b, c]
.fi
.RE
.LP
.B
seq(From, To) -> [int()]
.br
.B
seq(From, To, Incr) -> [int()]
.br
.RS
.TP
Types
From = To = Incr = int()
.br
.RE
.RS
.LP
Returns a sequence of integers which starts with \fIFrom\fR and contains the successive results of adding \fIIncr\fR to the previous element, until \fITo\fR has been reached or passed (in the latter case, \fITo\fR is not an element of the sequence)\&. If \fITo-From\fR has a different sign from \fIIncr\fR, or if \fIIncr\fR = 0 and \fIFrom\fR is different from \fITo\fR, an error is signalled (this implies that the result is never an empty list - the first element is always \fIFrom\fR)\&. 
.LP
\fIseq(From, To)\fR is equivalent to \fIseq(From, To, 1)\fR\&.
.LP
Examples:

.nf
> lists:seq(1, 10)\&.
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

> lists:seq(1, 20, 3)\&.
[1, 4, 7, 10, 13, 16, 19]

> lists:seq(1, 1, 0)\&.
[1]
.fi
.RE
.LP
.B
sort(List1) -> List2
.br
.RS
.TP
Types
List1 = List2 = [term()]
.br
.RE
.RS
.LP
Returns a list which contains the sorted elements of \fIList1\fR\&. 
.RE
.LP
.B
sort(Fun, List1) -> List2
.br
.RS
.TP
Types
List1 = List2 = [Element]
.br
Fun = fun(Element, Element) -> bool()
.br
Element = term()
.br
.RE
.RS
.LP
Returns a list which contains the sorted elements of \fIList1\fR, according to the ordering function \fIFun\fR\&. \fIFun(A, B)\fR should return \fItrue\fR if \fIA\fR comes before \fIB\fR in the ordering, \fIfalse\fR otherwise\&. 
.RE
.LP
.B
sublist(List, N) -> List1
.br
.RS
.TP
Types
List1 = List2 = [term()]
.br
N = int()
.br
.RE
.RS
.LP
Returns the first \fIN\fR elements of \fIList\fR\&. It is not an error for \fIN\fR to exceed the length of the list when \fIList\fR is a proper list - in that case the whole list is returned\&. 
.RE
.LP
.B
sublist(List1, Start, Length) -> List2
.br
.RS
.TP
Types
List1 = List2 = [term()]
.br
Start = End = int()
.br
.RE
.RS
.LP
Returns the sub-list of \fIList\fR starting at \fIStart\fR of length \fILength\fR\&. Terminates with a runtime failure if \fIStart\fR is not in \fIList\fR, but a sub-list of a length less than \fILength\fR is accepted\&. \fIStart\fR is considered to be in \fIList\fR if \fIStart\fR >= 1 and \fIStart\fR <= \fIlength(List)+1\fR\&. 
.RE
.LP
.B
subtract(List1, List2) -> List3
.br
.RS
.TP
Types
List1 = List2 = List3 = [term()]
.br
.RE
.RS
.LP
Returns a new list \fIList3\fR which is a copy of \fIList1\fR, subjected to the following procedure: for each element in \fIList2\fR, its first occurrence in \fIList1\fR is removed\&. For example:

.nf
> lists:subtract("123212", "212")\&.
"312"\&.
.fi
.LP
\fIlists:subtract(A, B)\fR is equivalent to \fIA -- B\fR\&. 
.RE
.LP
.B
suffix(List1, List2) -> bool()
.br
.RS
.LP
Returns \fItrue\fR if \fIList1\fR is a suffix of \fIList2\fR, otherwise \fIfalse\fR\&. 
.RE
.LP
.B
sum(List) -> number()
.br
.RS
.TP
Types
List = [number()]
.br
.RE
.RS
.LP
Returns the sum of the elements in \fIList\fR\&. 
.RE
.LP
.B
all(Pred, List) -> bool()
.br
.RS
.TP
Types
Pred = fun(A) -> bool()
.br
List = [A]
.br
.RE
.RS
.LP
Returns \fItrue\fR if all elements X in \fIList\fR satisfy \fIPred(X)\fR\&. 
.RE
.LP
.B
any(Pred, List) -> bool()
.br
.RS
.TP
Types
Pred = fun(Element) -> bool()
.br
List = [Element]
.br
Element = term()
.br
.RE
.RS
.LP
Returns \fItrue\fR if any of the elements in \fIList\fR satisfies \fIPred\fR\&. 
.RE
.LP
.B
dropwhile(Pred, List1) -> List2
.br
.RS
.TP
Types
Pred = fun(A) -> bool()
.br
List1 = List2 = [A]
.br
.RE
.RS
.LP
Drops elements \fIX\fR from \fIList1\fR while \fIPred(X)\fR is \fItrue\fR and returns the remaining list\&. 
.RE
.LP
.B
filter(Pred, List1) -> List2
.br
.RS
.TP
Types
Pred = fun(A) -> bool()
.br
List1 = List2 = [A]
.br
.RE
.RS
.LP
\fIList2\fR is a list of all elements \fIX\fR in \fIList1\fR for which \fIPred(X)\fR is \fItrue\fR\&. 
.RE
.LP
.B
flatmap(Function, List1) -> Element
.br
.RS
.TP
Types
Function = fun(A) -> B
.br
List1 = [A]
.br
Element = [B]
.br
.RE
.RS
.LP
\fIflatmap\fR behaves as if it had been defined as follows:

.nf
flatmap(Func, List) ->
    append(map(Func, List))
.fi
.RE
.LP
.B
foldl(Function, Acc0, List) -> Acc1
.br
.RS
.TP
Types
Function = fun(A, AccIn) -> AccOut
.br
List = [A]
.br
Acc0 = Acc1 = AccIn = AccOut = term()
.br
.RE
.RS
.LP
\fIAcc0\fR is returned if the list is empty\&. For example:

.nf
> lists:foldl(fun(X, Sum) -> X + Sum end, 0, [1,2,3,4,5])\&.
15
> lists:foldl(fun(X, Prod) -> X * Prod end, 1, [1,2,3,4,5])\&.     
120
.fi
.RE
.LP
.B
foldr(Function, Acc0, List) -> Acc1
.br
.RS
.TP
Types
Function = fun(A, AccIn) -> AccOut
.br
List = [A]
.br
Acc0 = Acc1 = AccIn = AccOut = term()
.br
.RE
.RS
.LP
Calls \fIFunction\fR on successive elements of \fIList\fR together with an extra argument \fIAcc\fR (short for accumulator)\&. \fIFunction\fR must return a new accumulator which is passed to the next call\&. \fIAcc0\fR is returned if the list is empty\&. \fIfoldr\fR differs from \fIfoldl\fR in that the list is traversed "bottom up" instead of "top down"\&. \fIfoldl\fR is tail recursive and would usually be preferred to \fIfoldr\fR\&. 
.RE
.LP
.B
foreach(Function, List) -> void()
.br
.RS
.TP
Types
Function = fun(A) -> void()
.br
List = [A]
.br
.RE
.RS
.LP
Applies the function \fIFunction\fR to each of the elements in \fIList\fR\&. This function is used for its side effects and the evaluation order is defined to be the same as the order of the elements in the list\&. 
.RE
.LP
.B
map(Func, List1) -> List2
.br
.RS
.TP
Types
Func = fun(A) -> B
.br
List1 = [A]
.br
List2 = [B]
.br
.RE
.RS
.LP
\fImap\fR takes a function from \fIA\fRs to \fIB\fRs, and a list of \fIA\fRs and produces a list of \fIB\fRs by applying the function to every element in the list\&. This function is used to obtain the return values\&. The evaluation order is implementation dependent\&. 
.RE
.LP
.B
mapfoldl(Function, Acc0, List1) -> {List2, Acc}
.br
.RS
.TP
Types
Function = fun(A, AccIn) -> {B, AccOut}
.br
Acc0 = Acc1 = AccIn = AccOut = term()
.br
List1 = [A]
.br
List2 = [B]
.br
.RE
.RS
.LP
\fImapfold\fR combines the operations of \fImap\fR and \fIfoldl\fR into one pass\&. For example, we could sum the elements in a list and double them \fIat the same time\fR:

.nf
 
> lists:mapfoldl(fun(X, Sum) -> {2*X, X+Sum} end, 
                 0, [1,2,3,4,5])\&. 
{[2,4,6,8,10],15}
.fi
.RE
.LP
.B
mapfoldr(Function, Acc0, List1) -> {List2, Acc}
.br
.RS
.TP
Types
Function = fun(A, AccIn) -> {B, AccOut}
.br
Acc0 = Acc1 = AccIn = AccOut = term()
.br
List1 = [A]
.br
List2 = [B]
.br
.RE
.RS
.LP
\fImapfold\fR combines the operations of \fImap\fR and \fIfoldr\fR into one pass\&. 
.RE
.LP
.B
splitwith(Pred, List) -> {List1, List2}
.br
.RS
.TP
Types
Pred = fun(A) -> bool()
.br
List = List1 = List2 = [A]
.br
.RE
.RS
.LP
Partitions \fILists\fR into \fIList1\fR and \fIList2\fR according to \fIPred\fR\&. 
.LP
\fIsplitwith\fR behaves as if it had been defined as follows:

.nf
splitwidth(Pred, List) -> 
          {takewhile(Pred, List), dropwhile(Pred, List)}\&.
.fi
.LP
Note also that \fIList == List1 ++ List2\fR\&. 
.RE
.LP
.B
takewhile(Pred, List1) -> List2
.br
.RS
.TP
Types
Pred = fun(A) -> bool()
.br
List1 = List2 = [A]
.br
.RE
.RS
.LP
Returns the longest prefix of \fIList1\fR for which all elements \fIX\fR in \fIList1\fR satisfy \fIPred(X)\fR\&. 
.RE
.SH Relics
.LP
Some of the exported functions in \fIlists\&.erl\fR are not documented\&. In particular, this applies to a number of \fImaps\fR and \fIfolds\fR which have an extra argument for environment passing\&. These functions are no longer needed because Erlang 4\&.4 and later releases have \fIFuns\fR\&. 
.SS Note:
.LP
Any undocumented functions in lists should not be used\&. 

.SH AUTHORS
.nf
Joe Armstrong - support@erlang.ericsson.se
Robert Virding - support@erlang.ericsson.se
.fi
