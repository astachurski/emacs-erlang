.TH auth 3 "kernel  2.6.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
auth \-  The Erlang Network Authentication Server 
.SH DESCRIPTION
.LP
Authentication determines which nodes are allowed to communicate with each other\&. In a network of different Erlang nodes, it is built into the system at the lowest possible level\&. Each node has its \fIMagic Cookie\fR, which is an Erlang atom\&.
.LP
Whenever a message is transferred from one node to another, it is accompanied by the \fIMagic Cookie\fR of the receiving node\&. For example, a message transferred from node \fIA\fR to node \fIB\fR is accompanied by what node \fIA\fR believes to be the\fIMagic Cookie\fR of node \fIB\fR\&.
.LP
When the message arrives at node \fIB\fR, the runtime system immediately checks that the accompanying cookie is the right one\&. If it is, the message is passed on in the normal way\&. If it is not, the message is transformed into a \fIbadcookie\fR message, which is sent to the system process \fInet_kernel\fR\&. By default, the \fInet_kernel\fR process passes the message to the registered process \fIauth\fR, which is then responsible for taking the appropriate action for the unauthorized message\&. In the standard system, the default action is to shut down connection to that node\&.
.LP
At start-up, the first action of the standard \fIauth\fR server is to read a file named \fI$HOME/erlang\&.cookie\fR\&. An atom is created from the contents of this file and the cookie of the node is set to this atom with the use of \fIerlang:set_cookie(node(), CookieAtom)\fR\&.
.LP
If the file does not exist, it is created\&. The UNIX permissions mode of the file is set to octal 400 (read-only by owner) and filled with a random string\&. For this reason, the same user, or group of users with identical cookie files, can have Erlang nodes which can communicate freely and without interference from the \fIMagic Cookie\fR system\&. Users who want to run nodes on separate file systems must be certain that their cookie files are identical on the different file systems\&.
.LP
Initially, each node has a random atom assigned as its magic cookie\&. Once the procedure described above has been concluded, the cookie is set to the contents of the \fI$HOME/erlang\&.cookie\fR file\&.
.LP
To communicate with another node, the magic cookie of that node must be known\&. The BIF \fIerlang:set_cookie(Node, Cookie)\fR sets the cookie for \fINode\fR to \fICookie\fR\&. From then on, all messages will be accompanied by the cookie \fICookie\fR\&. If the cookie is not correct when messages arrive at \fINode\fR, they are sent to the \fIauth server\fR at \fINode\fR\&. The call \fIerlang:set_cookie(node(), CookieAtom)\fR will set the current cookie to \fICookieAtom\fR\&. It will, however, also set the cookie of all other unknown nodes to \fICookieAtom\fR\&. In the case of the default \fIauth\fR server, this is the first thing done when the system starts\&. The default then, is to assume that \fIall\fR nodes which communicate have the same cookie\&. In the case of a single user on a single file system, this is indeed true and no further action is required\&. The original cookie can also be fetched by the BIF \fIerlang:get_cookie()\fR\&.
.LP
If nodes which communicate do not have the same cookie, they can be set explicitly on each node with the aid of \fIerlang:set_cookie(Node, Cookie)\fR\&. All messages sent to the node \fINode\fR will then be accompanied by the cookie \fICookie\fR\&. Distributed systems with multiple User IDs can be handled in this way\&.
.LP
Initially, the system cookie is set to a random atom, and the (assumed) cookie of all other nodes is initially set to the atom \fInocookie\fR\&. Thus, an Erlang node is completely unprotected when \fIerlang:set_cookie(node(), nocookie)\fR is run\&. Sometimes, this may be appropriate for systems which are not normally networked, and it can also be appropriate for maintenance purposes\&.
.LP
In the standard system, the default when two nodes are connected is to immediately connect all other involved nodes as well\&. This way, there is always a fully connected network\&. If there are nodes with different cookies, this method might be inappropriate and the host OS command line option \fI-connect_all false\fR must be issued to the Erlang runtime system\&. See \fIglobal(3)\fR\&.
.LP
This module uses the two BIFs \fIerlang:get_cookie()\fR which returns the magic cookie of the local node, and \fIerlang:set_cookie(Node, Cookie)\fR which sets the magic cookie of \fINode\fR to \fICookie\fR\&. If \fINode\fR is the user\&'s node, the cookie of all other unknown nodes are also set to \fICookie\fR by this BIF\&.

.SH EXPORTS
.LP
.B
start()
.br
.RS
.LP
Starts the \fIauth\fR server\&.
.RE
.LP
.B
stop()
.br
.RS
.LP
Stops the \fIauth\fR server\&.
.RE
.LP
.B
open(Name)
.br
.RS
.LP
This function opens up the server with the name \fIName\fR\&. If, for example, node \fIN\fR is run with the cookie \fIC\fR, it is impossible for other nodes with other cookies to communicate with node \fIN\fR\&. The call \fIopen/1\fR opens the server with the registered name \fIName\fR so it can be accessed by any other node, irrespective of cookie\&. The call must be executed on both nodes to have any effect\&. All messages to the server must have the form \fIName ! Msg\fR and all replies from the server \fI{Name, Reply}\fR, or \fI{Name, Node, Reply}\fR\&. With this feature, it is possible to perform specific tasks on publicly announced Erlang network servers\&.
.RE
.LP
.B
is_auth(Node)
.br
.RS
.LP
Returns the value \fIyes\fR if communication with \fINode\fR is authorized, \fIno\fR if \fINode\fR does not exist or communication is not authorized\&.
.RE
.LP
.B
exists(Node)
.br
.RS
.LP
Returns \fIyes\fR if \fINode\fR exists, otherwise \fIno\fR\&.
.RE
.LP
.B
cookie()
.br
.RS
.LP
Reads \fIcookie\fR from \fI$HOME/\&.erlang\&.cookie\fR and sets it\&. This function is used by the \fIauth\fR server at start-up\&.
.RE
.LP
.B
node_cookie(Node, Cookie)
.br
.RS
.LP
If the cookie of \fINode\fR is known to the user as \fICookie\fR but the user\&'s cookie is not known at \fINode\fR, this function informs \fINode\fR of the identity of the user\&'s cookie\&.
.RE
.LP
.B
node_cookie([Node, Cookie])
.br
.RS
.LP
Another version of the previous function with the arguments in a list which can be given on the host OS command line\&.
.RE
.LP
.B
cookie([Cookie])
.br
.RS
.LP
Equivalent to \fIerlang:set_cookie(node(), Cookie)\fR, but with the argument in a list so it can be given on the host OS command line\&.
.RE
.SH AUTHOR
.nf
 Claes Wikstrom - support@erlang.ericsson.se
.fi
