.TH CORBA_Environment_alloc 3 "ic  4.0.5" "Ericsson Utvecklings AB" "C LIBRARY FUNCTIONS"
.SH NAME
CORBA_Environment_alloc \- Allocation function for the CORBA_Environement struct
.SH DESCRIPTION
.LP
The \fICORBA_Environment_alloc()\fR function is the function used to allocate and initiate the \fICORBA_Environment\fR structure\&.

.SH EXPORTS
.LP
.B
CORBA_Environment *CORBA_Environment_alloc(inbufsz, outbufsz)
.br
.RS
.TP
Types
int inbufsz;
.br
int outbufsz;
.br
.RE
.RS
.LP
This funtion is used to create and initiate the \fICORBA_Environment\fR structure\&. In particular, it is used to dynamically allocate a CORBA_Environment structure and set the default values for the structure\&'s fields\&. 
.LP
\fIinbufsize\fR is the wished size of input buffer\&.
.LP
\fIoutbufsize\fR is the wished size of output buffer\&.
.LP
\fICORBA_Environment\fR is the CORBA 2\&.0 state structure used by the generated stub\&.
.LP
This function will set all needed default values and allocate buffers equal to the values passed, but will not allocate space for the _to_pid and _from_pid fields\&.
.LP
To free the space allocated by CORBA_Environment_alloc/2 :
.RS 2
.TP 2
*
First call CORBA_free for the input and output buffers\&. 
.TP 2
*
After freeing the buffer space, call CORBA_free for the CORBA_Environment space\&. 
.RE
.RE
.SH The CORBA_Environment structure
.LP
Here is the complete definition of the CORBA_Environment structure, defined in file \fIic\&.h\fR : 

.nf
/* Environment definition */
typedef struct {

  /*----- CORBA compatibility part ------------------------*/
  /* Exception tag, initially set to CORBA_NO_EXCEPTION ---*/
  CORBA_exception_type   _major;          

  /*----- External Implementation part - initiated by the user ---*/
  /* File descriptor                                              */
  int                    _fd;             
  /* Size of input buffer                                         */
  int                    _inbufsz;        
  /* Pointer to always dynamically allocated buffer for input     */
  char                  *_inbuf;         
  /* Size of output buffer                                        */
  int                    _outbufsz;       
  /* Pointer to always dynamically allocated buffer for output    */ 
  char                  *_outbuf;        
 /* Size of memory chunks in bytes, used for increasing the outpuy
    buffer, set to >= 32, should be around >= 1024 for performance
    reasons                                                       */ 
 int                    _memchunk;       
 /* Pointer for registered name                                   */
  char                   _regname[256];   
 /* Process identity for caller                                   */
  erlang_pid            *_to_pid;         
  /* Process identity for callee                                  */ 
  erlang_pid            *_from_pid;      

  /*- Internal Implementation part - used by the server/client ---*/
  /* Index for input buffer                                       */
  int                    _iin;            
  /* Index for output buffer                                      */
  int                    _iout;          
  /* Pointer for operation name                                   */
  char                   _operation[256];
   /* Used to count parameters                                    */
  int                    _received;      
  /* Used to identify the caller                                  */
  erlang_pid             _caller;        
 /* Used to identify the call                                     */
  erlang_ref             _unique;         
  /* Exception id field                                           */
  CORBA_char            *_exc_id;        
  /* Exception value field                                        */
   void                  *_exc_value;           

  
} CORBA_Environment;
.fi
.SS Note:
.LP
Remember to set the field values \fI _fd \fR, \fI _regname \fR, \fI *_to_pid \fR and/or \fI *_from_pid \fR to the appropriate application values\&. These are not automatically set by the stubs\&. 

.SS Warning:
.LP
Never assign static buffers to the buffer pointers, never set the \fI_memchunk\fR field to a value less than \fI32\fR\&. 

.SH SEE ALSO
.LP
ic(3) 
.SH AUTHOR
.nf
Babbis Xagorarakis - support@erlang.ericsson.se
.fi
