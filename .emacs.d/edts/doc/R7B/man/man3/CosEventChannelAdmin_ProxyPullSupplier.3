.TH CosEventChannelAdmin_ProxyPullSupplier 3 "cosEvent  1.0.1.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
CosEventChannelAdmin_ProxyPullSupplier \-  This module implements a ProxyPullSupplier interface which acts as a middleman between pull consumer and the event channel\&. 
.SH DESCRIPTION
.LP
The ProxyPullSupplier interface defines the second step for connecting pull consumers to the event channel\&. A proxy supplier is similar to a normal supplier, but includes an additional method for connecting a consumer to the proxy supplier\&. 
.LP
There are a number of exceptions that can be returned from functions in this interface\&. 
.RS 2
.TP 2
*
AlreadyConnected is defined as \fI-record(\&'AlreadyConnected\&', {})\&.\fR
.TP 2
*
Disconnected is defined as \fI-record(\&'Disconnected\&', {})\&.\fR
.RE
.LP
These exceptions are defined in the file \fIevent_service\&.hrl\fR\&. 
.LP
Any object that possesses an object reference that supports the ProxyPullSupplier interface can perform the following operations: 

.SH EXPORTS
.LP
.B
connect_pull_consumer(Object, PullConsumer) -> Return
.br
.RS
.TP
Types
Object = #objref
.br
PullConsumer = #objref of PullConsumer type
.br
Return = void
.br
.RE
.RS
.LP
This operation connects PullConsumer object to the ProxyPullSupplier object\&. A nil object reference can be passed to this operation\&. If so a channel cannot invoke the disconnect_pull_consumer operation on the consumer; the consumer may be disconnected from the channel without being informed\&. If the ProxyPullSupplier is already connected to a PullConsumer, then the \fIAlreadyConnected exception\fR is raised\&. 
.RE
.LP
.B
disconnect_pull_supplier(Object) -> Return
.br
.RS
.TP
Types
Object = #objref
.br
Return = void
.br
.RE
.RS
.LP
This operation disconnects proxy pull supplier from the event channel\&. It sends a notification about the loss of the connection to the pull consumer attached to it, unless nil object reference was passed at the connection time\&. 
.RE
.LP
.B
pull(Object) -> Return
.br
.RS
.TP
Types
Object = #objref
.br
Return = any
.br
.RE
.RS
.LP
This operation blocks until the event data is available or the \fIDisconnected\fR exception is raised\&. It returns the event data to the consumer\&. 
.RE
.LP
.B
try_pull(Object) -> Return
.br
.RS
.TP
Types
Object = #objref
.br
Return = {any, bool()}
.br
.RE
.RS
.LP
This operation does not block: if the event data is available, it returns the event data and sets the data availability flag to true; otherwise it returns a long with a value of 0 and sets the data availability to false\&. If the event communication has already been disconnected, the \fIDisconnected\fR exception is raised\&. 
.RE
.SH AUTHOR
.nf
Helen Airiyan - support@erlang.ericsson.se
.fi
