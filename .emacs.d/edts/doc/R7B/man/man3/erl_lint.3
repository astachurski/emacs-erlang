.TH erl_lint 3 "stdlib  1.9.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
erl_lint \- The Erlang Code Linter
.SH DESCRIPTION
.LP
This module is used to check Erlang code for illegal syntax and other bugs\&. It also warns against coding practices which are not recommended\&. 
.LP
The errors detected include:
.RS 2
.TP 2
*
redefined and undefined functions
.TP 2
*
unbound and unsafe variables
.TP 2
*
illegal record usage\&.
.RE
.LP
Warnings include:
.RS 2
.TP 2
*
unused functions and imports
.TP 2
*
variables imported into matches
.TP 2
*
variables exported from \fIif\fR/\fIcase\fR/\fIreceive\fR
.TP 2
*
variables shadowed in lambdas and list comprehensions\&.
.RE
.LP
Some of the warnings are optional, and can be turned on by giving the appropriate option, described below\&.
.LP
The functions in this module are invoked automatically by the Erlang compiler and there is no reason to invoke these functions separately unless you have written your own Erlang compiler\&.

.SH EXPORTS
.LP
.B
module(AbsForms) -> {ok,Warnings} | {error,Errors,Warnings}
.br
.B
module(AbsForms, FileName) -> {ok,Warnings} | {error,Errors,Warnings}
.br
.B
module(AbsForms, FileName, CompileOptions) -> {ok,Warnings} | {error,Errors,Warnings}
.br
.RS
.TP
Types
AbsForms = [term()]
.br
FileName = FileName2 = atom() | string()
.br
Warnings = Errors = [{Filename2, [ErrorInfo]}]
.br
ErrorInfo = see separate description below\&.
.br
CompileOptions = [term()]
.br
.RE
.RS
.LP
This function checks all the forms in a module for errors\&. It returns: 
.RS 2
.TP 4
.B
\fI{ok, Warnings}\fR:
There were no errors in the module\&.
.TP 4
.B
\fI{error, Errors, Warnings}\fR:
There were errors in the module\&.
.RE
.LP
The elements of \fIOptions\fR selecting optional warnings are as follows: 
.RS 2
.TP 4
.B
\fI{format, Verbosity}\fR:
Causes warnings to be emitted for malformed format strings as arguments to \fIio:format\fR and similar functions\&. \fIVerbosity\fR selects the amount of warnings: 0 = no warnings; 1 = warnings for invalid format strings; 2 = warnings also when the validity could not be checked (for example, when the format string argument is a variable)\&. 
.TP 4
.B
\fIunused_vars\fR:
Causes warnings to be emitted for variables which are not used, with the exception of variables beginning with an underscore ("Prolog style warnings")\&. 
.RE
.LP
The \fIAbsForms\fR of a module which comes from a file that is read through \fIepp\fR, the Erlang pre-processor, can come from many files\&. This means that any references to errors must include the file name (see epp, or parser erl_parse The warnings and errors returned have the following format: 

.nf
    [{FileName2,[ErrorInfo]}]
.fi
.LP
The errors and warnings are listed in the order in which they are encountered in the forms\&. This means that the errors from one file may be split into different entries in the list of errors\&. 
.RE
.LP
.B
is_guard_test(Expr) -> bool()
.br
.RS
.TP
Types
Expr = term()
.br
.RE
.RS
.LP
This function tests if \fIExpr\fR is a legal guard test\&. \fIExpr\fR is an Erlang term representing the abstract form for the expression\&. \fIerl_parse:parse_exprs(Tokens)\fR can be used to generate a list of \fIExpr\fR\&. 
.RE
.LP
.B
format_error(ErrorDescriptor) -> string()
.br
.RS
.TP
Types
ErrorDescriptor = errordesc()
.br
.RE
.RS
.LP
Takes an \fIErrorDescriptor\fR and returns a string which describes the error or warning\&. This function is usually called implicitly when processing an \fIErrorInfo\fR structure (see below)\&. 
.RE
.SH Error Information
.LP
The \fIErrorInfo\fR mentioned above is the standard \fIErrorInfo\fR structure which is returned from all IO modules\&. It has the following format: 

.nf
    {ErrorLine, Module, ErrorDescriptor}
.fi
.LP
A string which describes the error is obtained with the following call: 

.nf
apply(Module, format_error, ErrorDescriptor)
.fi
.SH See Also
.LP
erl_parse, epp 
.SH AUTHOR
.nf
Robert Virding - support@erlang.ericsson.se
.fi
