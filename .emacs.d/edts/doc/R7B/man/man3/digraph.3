.TH digraph 3 "stdlib  1.9.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
digraph \- Directed Graphs
.SH DESCRIPTION
.LP
The \fIdigraph\fR module implements a version of labeled directed graphs\&. What makes the graphs implemented here non-proper directed graphs is that multiple edges between vertices are allowed\&. However, the customary definition of directed graphs will be used in the text that follows\&. 
.LP
A \fIdirected graph\fR (or just "graph") is a pair (V, E) of a finite set V of \fIvertices\fR and a finite set E of \fIdirected edges\fR (or just "edges")\&. The set of edges E is a subset of V   V (the Cartesian product of V with itself)\&. In this module, V is allowed to be empty; the so obtained unique graph is called the  \fIempty graph\fR\&. Both vertices and edges are represented by unique Erlang terms\&. 
.LP
Graphs can be annotated with additional information\&. Such information may be attached to the vertices and to the edges of the graph\&. A graph which has been annotated is called a \fIlabeled graph\fR, and the information attached to a vertex or an edge is called a \fIlabel\fR\&. Labels are Erlang terms\&. 
.LP
An edge e = (v, w) is said to \fIemanate\fR from vertex v and to be \fIincident\fR on vertex w\&. The \fIout-degree\fR of a vertex is the number of edges emanating from that vertex\&. The \fIin-degree\fR of a vertex is the number of edges incident on that vertex\&. If there is an edge emanating from v and incident on w, then w is is said to be an \fIout-neighbour\fR of v, and v is said to be an \fIin-neighbour\fR of w\&. A \fIpath\fR P from v[1] to v[k] in a graph (V, E) is a non-empty sequence v[1], v[2], \&.\&.\&., v[k] of vertices in V such that there is an edge (v[i],v[i+1]) in E for 1 <= i < k\&. The \fIlength\fR of the path P is k-1\&. P is \fIsimple\fR if all vertices are distinct, except that the first and the last vertices may be the same\&. P is a \fIcycle\fR if the length of P is not zero and v[1] = v[k]\&. A \fIloop\fR is a cycle of length one\&. A \fIsimple cycle\fR is a path that is both a cycle and simple\&. An \fIacyclic graph\fR is a graph that has no cycles\&. 

.SH EXPORTS
.LP
.B
new(Type) -> graph() | {error, Reason}
.br
.RS
.TP
Types
Type = [cyclic | acyclic | public | private | protected]
.br
Reason = {unknown_type, term()}
.br
.RE
.RS
.LP
Returns an empty graph with properties according to the options in \fIType\fR: 
.RS 2
.TP 4
.B
\fIcyclic\fR:
Allow cycles in the graph (default)\&.
.TP 4
.B
\fIacyclic\fR:
The graph is to be kept acyclic\&.
.TP 4
.B
\fIpublic\fR:
The graph may be read and modified by any process\&.
.TP 4
.B
\fIprotected\fR:
Other processes can only read the graph (default)\&.
.TP 4
.B
\fIprivate\fR:
The graph can be read and modified by the creating process only\&.
.RE
.LP
If an unrecognized type option T is given, then \fI{error,  {unknown_type,  \fRT\fI}}\fR is returned\&. 
.RE
.LP
.B
new() -> graph()
.br
.RS
.LP
Equivalent to \fInew([])\fR\&. 
.RE
.LP
.B
delete(G) -> true
.br
.RS
.TP
Types
G = graph()
.br
.RE
.RS
.LP
Deletes the graph \fIG\fR\&. This call is important because graphs are implemented with \fIets\fR\&. There is no garbage collection of \fIets\fR tables\&. The graph will, however, be deleted if the process that created the graph terminates\&. 
.RE
.LP
.B
info(G) -> InfoList
.br
.RS
.TP
Types
G = graph()
.br
InfoList = [{cyclicity, Cyclicity}, {memory, NoWords}, {protection, Protection}]
.br
Cyclicity = cyclic | acyclic
.br
Protection = public | protected | private
.br
NoWords = integer() >= 0
.br
.RE
.RS
.LP
Returns a list of \fI{Tag, Value}\fR pairs describing the graph \fIG\fR\&. The following pairs are returned: 
.RS 2
.TP 2
*
\fI{cyclicity, Cyclicity}\fR, where \fICyclicity\fR is \fIcyclic\fR or \fIacyclic\fR, according to the options given to \fInew\fR\&. 
.TP 2
*
\fI{memory, NoWords}\fR, where \fINoWords\fR is the number of words allocated to the \fIets\fR tables\&. 
.TP 2
*
\fI{protection, Protection}\fR, where \fIProtection\fR is \fIpublic\fR, \fIprotected\fR or \fIprivate\fR, according to the options given to \fInew\fR\&. 
.RE
.RE
.LP
.B
add_vertex(G, V, Label) -> vertex()
.br
.B
add_vertex(G, V) -> vertex()
.br
.B
add_vertex(G) -> vertex()
.br
.RS
.TP
Types
G = graph()
.br
V = vertex()
.br
Label = label()
.br
.RE
.RS
.LP
\fIadd_vertex/3\fR creates (or modifies) the vertex \fIV\fR of the graph \fIG\fR, using \fILabel\fR as the (new) label of the vertex\&. Returns \fIV\fR\&. 
.LP
\fIadd_vertex(G,  V)\fR is equivalent to \fIadd_vertex(G,  V,  [])\fR\&. 
.LP
\fIadd_vertex/1\fR creates a vertex using the empty list as label, and returns the created vertex\&. Tuples on the form \fI[ $v  | N]\fR, where N is an integer >= 1, are used for representing the created vertices\&. 
.RE
.LP
.B
vertex(G, V) -> {V, Label} | false
.br
.RS
.TP
Types
G = graph()
.br
V = vertex()
.br
Label = label()
.br
.RE
.RS
.LP
Returns \fI{V,  Label}\fR where \fILabel\fR is the label of the vertex \fIV\fR of the graph \fIG\fR, or \fIfalse\fR if there is no vertex \fIV\fR of the graph \fIG\fR\&. 
.RE
.LP
.B
no_vertices(G) -> integer() >= 0
.br
.RS
.TP
Types
G = graph()
.br
.RE
.RS
.LP
Returns the number of vertices of the graph \fIG\fR\&. 
.RE
.LP
.B
vertices(G) -> Vertices
.br
.RS
.TP
Types
G = graph()
.br
Vertices = [vertex()]
.br
.RE
.RS
.LP
Returns a list of all vertices of the graph \fIG\fR, in some unspecified order\&. 
.RE
.LP
.B
del_vertex(G, V) -> true
.br
.RS
.TP
Types
G = graph()
.br
V = vertex()
.br
.RE
.RS
.LP
Deletes the vertex \fIV\fR from the graph \fIG\fR\&. Any edges emanating from \fIV\fR or incident on \fIV\fR are also deleted\&. 
.RE
.LP
.B
del_vertices(G, Vertices) -> true
.br
.RS
.TP
Types
G = graph()
.br
Vertices = [vertex()]
.br
.RE
.RS
.LP
Deletes the vertices in the list \fIVertices\fR from the graph \fIG\fR\&. 
.RE
.LP
.B
add_edge(G, E, V1, V2, Label) -> edge() | {error, Reason}
.br
.B
add_edge(G, V1, V2, Label) -> edge() | {error, Reason}
.br
.B
add_edge(G, V1, V2) -> edge() | {error, Reason}
.br
.RS
.TP
Types
G = graph()
.br
E = edge()
.br
V1 = V2 = vertex()
.br
Label = label()
.br
Reason = {bad_edge, Path} | {bad_vertex, V}
.br
Path = [vertex()]
.br
.RE
.RS
.LP
\fIadd_edge/5\fR creates (or modifies) the edge \fIE\fR of the graph \fIG\fR, using \fILabel\fR as the (new) label of the edge\&. The edge is emanating from \fIV1\fR and incident on \fIV2\fR\&. Returns \fIE\fR\&. 
.LP
\fIadd_edge(G,  V1,  V2,  Label)\fR is equivalent to \fIadd_edge(G,  E,  V1,  V2,  Label)\fR, where \fIE\fR is a created edge\&. Tuples on the form \fI[ $e  | N]\fR, where N is an integer >= 1, are used for representing the created edges\&. 
.LP
\fIadd_edge(G,  V1,  V2)\fR is equivalent to \fIadd_edge(G,  V1,  V2,  [])\fR\&. 
.LP
If the edge would create a cycle in an acyclic graph, then \fI{error,  {bad_edge,  Path}}\fR is returned\&. If either of \fIV1\fR or \fIV2\fR is not a vertex of the graph \fIG\fR, then \fI{error,  {bad_vertex,  \fRV\fI}}\fR is returned, V = \fIV1\fR or V = \fIV2\fR\&. 
.RE
.LP
.B
edge(G, E) -> {E, V1, V2, Label} | false
.br
.RS
.TP
Types
G = graph()
.br
E = edge()
.br
V1 = V2 = vertex()
.br
Label = label()
.br
.RE
.RS
.LP
Returns \fI{E,  V1,  V2,  Label}\fR where \fILabel\fR is the label of the edge \fIE\fR emanating from \fIV1\fR and incident on \fIV2\fR of the graph \fIG\fR\&. If there is no edge \fIE\fR of the graph \fIG\fR, then \fIfalse\fR is returned\&. 
.RE
.LP
.B
edges(G, V) -> Edges
.br
.RS
.TP
Types
G = graph()
.br
V = vertex()
.br
Edges = [edge()]
.br
.RE
.RS
.LP
Returns a list of all edges emanating from or incident on \fIV\fR of the graph \fIG\fR, in some unspecified order\&. 
.RE
.LP
.B
no_edges(G) -> integer() >= 0
.br
.RS
.TP
Types
G = graph()
.br
.RE
.RS
.LP
Returns the number of edges of the graph \fIG\fR\&. 
.RE
.LP
.B
edges(G) -> Edges
.br
.RS
.TP
Types
G = graph()
.br
Edges = [edge()]
.br
.RE
.RS
.LP
Returns a list of all edges of the graph \fIG\fR, in some unspecified order\&. 
.RE
.LP
.B
del_edge(G, E) -> true
.br
.RS
.TP
Types
G = graph()
.br
E = edge()
.br
.RE
.RS
.LP
Deletes the edge \fIE\fR from the graph \fIG\fR\&. 
.RE
.LP
.B
del_edges(G, Edges) -> true
.br
.RS
.TP
Types
G = graph()
.br
Edges = [edge()]
.br
.RE
.RS
.LP
Deletes the edges in the list \fIEdges\fR from the graph \fIG\fR\&. 
.RE
.LP
.B
out_neighbours(G, V) -> Vertices
.br
.RS
.TP
Types
G = graph()
.br
V = vertex()
.br
Vertices = [vertex()]
.br
.RE
.RS
.LP
Returns a list of all out-neighbours of \fIV\fR of the graph \fIG\fR, in some unspecified order\&. 
.RE
.LP
.B
in_neighbours(G, V) -> Vertices
.br
.RS
.TP
Types
G = graph()
.br
V = vertex()
.br
Vertices = [vertex()]
.br
.RE
.RS
.LP
Returns a list of all in-neighbours of \fIV\fR of the graph \fIG\fR, in some unspecified order\&. 
.RE
.LP
.B
out_edges(G, V) -> Edges
.br
.RS
.TP
Types
G = graph()
.br
V = vertex()
.br
Edges = [edge()]
.br
.RE
.RS
.LP
Returns a list of all edges emanating from \fIV\fR of the graph \fIG\fR, in some unspecified order\&. 
.RE
.LP
.B
in_edges(G, V) -> Edges
.br
.RS
.TP
Types
G = graph()
.br
V = vertex()
.br
Edges = [edge()]
.br
.RE
.RS
.LP
Returns a list of all edges incident on \fIV\fR of the graph \fIG\fR, in some unspecified order\&. 
.RE
.LP
.B
out_degree(G, V) -> integer()
.br
.RS
.TP
Types
G = graph()
.br
V = vertex()
.br
.RE
.RS
.LP
Returns the out-degree of the vertex \fIV\fR of the graph \fIG\fR\&. 
.RE
.LP
.B
in_degree(G, V) -> integer()
.br
.RS
.TP
Types
G= graph()
.br
V = vertex()
.br
.RE
.RS
.LP
Returns the in-degree of the vertex \fIV\fR of the graph \fIG\fR\&. 
.RE
.LP
.B
del_path(G, V1, V2) -> true
.br
.RS
.TP
Types
G = graph()
.br
V1 = V2 = vertex()
.br
.RE
.RS
.LP
Deletes edges from the graph \fIG\fR until there are no paths from the vertex \fIV1\fR to the vertex \fIV2\fR\&. 
.LP
A sketch of the procedure employed: Find an arbitrary simple path v[1], v[2], \&.\&.\&., v[k] from \fIV1\fR to \fIV2\fR in \fIG\fR\&. Remove all edges of \fIG\fR emanating from v[i] and incident to v[i+1] for 1 <= i < k (including multiple edges)\&. Repeat until there is no path between \fIV1\fR and \fIV2\fR\&. 
.RE
.LP
.B
get_path(G, V1, V2) -> Vertices | false
.br
.RS
.TP
Types
G = graph()
.br
V1 = V2 = vertex()
.br
Vertices = [vertex()]
.br
.RE
.RS
.LP
Tries to find a simple path from the vertex \fIV1\fR to the vertex \fIV2\fR of the graph \fIG\fR\&. Returns the path as a list \fI[V1,  \&.\&.\&.,  V2]\fR of vertices, or \fIfalse\fR if no simple path from \fIV1\fR to \fIV2\fR of length one or more exists\&. 
.LP
The graph \fIG\fR is traversed in a depth-first manner, and the first path found is returned\&. 
.RE
.LP
.B
get_short_path(G, V1, V2) -> Vertices | false
.br
.RS
.TP
Types
G = graph()
.br
V1 = V2 = vertex()
.br
Vertices = [vertex()]
.br
.RE
.RS
.LP
Tries to find an as short as possible simple path from the vertex \fIV1\fR to the vertex \fIV2\fR of the graph \fIG\fR\&. Returns the path as a list \fI[V1,  \&.\&.\&.,  V2]\fR of vertices, or \fIfalse\fR if no simple path from \fIV1\fR to \fIV2\fR of length one or more exists\&. 
.LP
The graph \fIG\fR is traversed in a breadth-first manner, and the first path found is returned\&. 
.RE
.LP
.B
get_cycle(G, V) -> Vertices | false
.br
.RS
.TP
Types
G = graph()
.br
V1 = V2 = vertex()
.br
Vertices = [vertex()]
.br
.RE
.RS
.LP
If there is a simple cycle of length two or more through the vertex \fIV\fR, then the cycle is returned as a list \fI[V,  \&.\&.\&.,  V]\fR of vertices, otherwise if there is a loop through \fIV\fR, then the loop is returned as a list \fI[V]\fR\&. If there are no cycles through \fIV\fR, then \fIfalse\fR is returned\&. 
.LP
\fIget_path/3\fR is used for finding a simple cycle through \fIV\fR\&. 
.RE
.LP
.B
get_short_cycle(G, V) -> Vertices | false
.br
.RS
.TP
Types
G = graph()
.br
V1 = V2 = vertex()
.br
Vertices = [vertex()]
.br
.RE
.RS
.LP
Tries to find an as short as possible simple cycle through the vertex \fIV\fR of the graph \fIG\fR\&. Returns the cycle as a list \fI[V,  \&.\&.\&.,  V]\fR of vertices, or \fIfalse\fR if no simple cycle through \fIV\fR exists\&. Note that a loop through \fIV\fR is returned as the list \fI[V,  V]\fR\&. 
.LP
\fIget_short_path/3\fR is used for finding a simple cycle through \fIV\fR\&. 
.RE
.SH See Also
.LP
digraph_utils(3), ets(3) 
.SH AUTHOR
.nf
Tony Rogvall - support@erlang.ericsson.se
.fi
