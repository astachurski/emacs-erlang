.TH string 3 "stdlib  1.9.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
string \- String Processing Functions
.SH DESCRIPTION
.LP
This module contains functions for string processing\&. 

.SH EXPORTS
.LP
.B
len(String) -> Length
.br
.RS
.TP
Types
String = string()
.br
Length = integer()
.br
.RE
.RS
.LP
Returns the number of characters in the string\&. 
.RE
.LP
.B
equal(String1, String2) -> bool()
.br
.RS
.TP
Types
String1 = String2 = string()
.br
.RE
.RS
.LP
Tests whether two strings are equal\&. Returns \fItrue\fR if they are, otherwise \fIfalse\fR\&. 
.RE
.LP
.B
concat(String1, String2) -> String3
.br
.RS
.TP
Types
String1 = String2 = String3 = string()
.br
.RE
.RS
.LP
Concatenates two strings to form a new string\&. Returns the new string\&. 
.RE
.LP
.B
chr(String, Character) -> Index
.br
.B
rchr(String, Character) -> Index
.br
.RS
.TP
Types
String = string()
.br
Character = char()
.br
Index = integer()
.br
.RE
.RS
.LP
Returns the index of the first/last occurrence of \fICharacter\fR in \fIString\fR\&. \fI0\fR is returned if \fICharacter\fR does not occur\&. 
.RE
.LP
.B
str(String, SubString) -> Index
.br
.B
rstr(String, SubString) -> Index
.br
.RS
.TP
Types
String = SubString = string()
.br
Index = integer()
.br
.RE
.RS
.LP
Returns the position where the first/last occurence of \fISubString\fR begins in \fIString\fR\&. \fI0\fR is returned if \fISubString\fR does not exist in \fIString\fR\&. For example:

.nf
> string:str(" Hello Hello World World ", "Hello World")\&.
8
.fi
.RE
.LP
.B
span(String, Chars) -> Length 
.br
.B
cspan(String, Chars) -> Length
.br
.RS
.TP
Types
String = Chars = string()
.br
Length = integer()
.br
.RE
.RS
.LP
Returns the length of the maximum initial segment of String, which consists entirely of characters from (not from) Chars\&. 
.LP
For example:

.nf
> string:span("\\t    abcdef", " \\t")\&.
5
> string:cspan("\\t    abcdef", " \\t")\&.
0
.fi
.RE
.LP
.B
substr(String, Start) -> SubString
.br
.B
substr(String, Start, Length) -> Substring
.br
.RS
.TP
Types
String = SubString = string()
.br
Start = Length = integer()
.br
.RE
.RS
.LP
Returns a substring of \fIString\fR, starting at the position \fIStart\fR, and ending at the end of the string or at length \fILength\fR\&. 
.LP
For example:

.nf
> substr("Hello World", 4, 5)\&.
"lo Wo"
.fi
.RE
.LP
.B
tokens(String, SeperatorList) -> Tokens
.br
.RS
.TP
Types
String = SeperatorList = string()
.br
Tokens = [string()]
.br
.RE
.RS
.LP
Returns a list of tokens in \fIString\fR, separated by the characters in \fISeperatorList\fR\&. 
.LP
For example:

.nf
> tokens("abc defxxghix jkl", "x ")\&.
["abc", "def", "ghi", "jkl"]
.fi
.RE
.LP
.B
chars(Character, Number) -> String
.br
.B
chars(Character, Number, Tail) -> String
.br
.RS
.TP
Types
Character = char()
.br
Number = integer()
.br
String = string()
.br
.RE
.RS
.LP
Returns a string consisting of \fINumber\fR of characters \fICharacter\fR\&. Optionally, the string can end with the string \fITail\fR\&. 
.RE
.LP
.B
copies(String, Number) -> Copies
.br
.RS
.TP
Types
String = Copies = string()
.br
Number = integer()
.br
.RE
.RS
.LP
Returns a string containing \fIString\fR repeated \fINumber\fR times\&. 
.RE
.LP
.B
words(String) -> Count
.br
.B
words(String, Character) -> Count
.br
.RS
.TP
Types
String = string()
.br
Character = char()
.br
Count = integer()
.br
.RE
.RS
.LP
Returns the number of words in \fIString\fR, separated by blanks or \fICharacter\fR\&. 
.LP
For example:

.nf
> words(" Hello old boy!", $o)\&.
4
.fi
.RE
.LP
.B
sub_word(String, Number) -> Word
.br
.B
sub_word(String, Number, Character) -> Word
.br
.RS
.TP
Types
String = Word = string()
.br
Character = char()
.br
Number = integer()
.br
.RE
.RS
.LP
Returns the word in position \fINumber\fR of \fIString\fR\&. Words are separated by blanks or \fICharacter\fRs\&. 
.LP
For example:

.nf
> string:sub_word(" Hello old boy !",3,$o)\&.
"ld b"
.fi
.RE
.LP
.B
strip(String) -> Stripped
.br
.B
strip(String, Direction) -> Stripped
.br
.B
strip(String, Direction, Character) -> Stripped
.br
.RS
.TP
Types
String = Stripped = string()
.br
Direction = left | right | both
.br
Character = char()
.br
.RE
.RS
.LP
Returns a string, where leading and/or trailing blanks or a number of \fICharacter\fR have been removed\&. \fIDirection\fR can be \fIleft\fR, \fIright\fR, or \fIboth\fR and indicates from which direction blanks are to be removed\&. The function \fIstrip/1\fR is equivalent to \fIstrip(String, both)\fR\&. 
.LP
For example:

.nf
> string:strip("\&.\&.\&.Hello\&.\&.\&.\&.\&.", both, $\&.)\&.
"Hello"
.fi
.RE
.LP
.B
left(String, Number) -> Left
.br
.B
left(String, Number, Character) -> Left
.br
.RS
.TP
Types
String = Left = string()
.br
Character = char
.br
Number = integer()
.br
.RE
.RS
.LP
Returns the \fIString\fR with the length adjusted in accordance with \fINumber\fR\&. The left margin is fixed\&. If the \fIlength(String)\fR < \fINumber\fR, \fIString\fR is padded with blanks or \fICharacter\fRs\&. 
.LP
For example:

.nf
> string:left("Hello",10,$\&.)\&.
"Hello\&.\&.\&.\&.\&."
.fi
.RE
.LP
.B
right(String, Number) -> Right
.br
.B
right(String, Number, Character) -> Right
.br
.RS
.TP
Types
String = Right = string()
.br
Character = char
.br
Number = integer()
.br
.RE
.RS
.LP
Returns the \fIString\fR with the length adjusted in accordance with \fINumber\fR\&. The right margin is fixed\&. If the length of \fI(String)\fR < \fINumber\fR, \fIString\fR is padded with blanks or \fICharacter\fRs\&. 
.LP
For example:

.nf
> string:right("Hello", 10, $\&.)\&.
"\&.\&.\&.\&.\&.Hello"
.fi
.RE
.LP
.B
centre(String, Number) -> Centered
.br
.B
centre(String, Number, Character) -> Centered
.br
.RS
.TP
Types
String = Centered = string()
.br
Character = char
.br
Number = integer()
.br
.RE
.RS
.LP
Returns a string, where \fIString\fR is centred in the string and surrounded by blanks or characters\&. The resulting string will have the length \fINumber\fR\&. 
.RE
.LP
.B
sub_string(String, Start) -> SubString
.br
.B
sub_string(String, Start, Stop) -> SubString
.br
.RS
.TP
Types
String = SubString = string()
.br
Start = Stop = integer()
.br
.RE
.RS
.LP
Returns a substring of \fIString\fR, starting at the position \fIStart\fR to the end of the string, or to and including the \fIStop\fR position\&. 
.LP
For example:

.nf
sub_string("Hello World", 4, 8)\&.
"lo Wo"
.fi
.RE
.SH Notes
.LP
Some of the general string functions may seem to overlap each other\&. The reason for this is that this string package is the combination of two earlier packages and all the functions of both packages have been retained\&. 
.LP
The regular expression functions have been moved to their own module \fIregexp\fR (see regexp)\&. The old entry points still exist for backwards compatibility, but will be removed in a future release so that users are encouraged to use the module \fIregexp\fR\&. 
.SS Note:
.LP
Any undocumented functions in \fIstring\fR should not be used\&. 

.SH AUTHORS
.nf
Robert Virding - support@erlang.ericsson.se
Torbjorn Tornkvist - support@erlang.ericsson.se
.fi
