.TH sys 3 "stdlib  1.9.1" "Ericsson Utvecklings AB" "ERLANG MODULE DEFINITION"
.SH MODULE
sys \- A Functional Interface to System Messages
.SH DESCRIPTION
.LP
This module contains functions for sending system messages used by programs, and messaged used for debugging purposes\&. 
.LP
Functions used for implementation of processes should also understand system messages such as debugging messages and code change\&. These functions must be used to implement the use of system messages for a process; either directly, or through standard behaviours, such as \fIgen_server\fR\&.
.LP
The following types are used in the functions defined below: 
.RS 2
.TP 2
*
\fIName = pid() | atom() | {global, atom()}\fR 
.TP 2
*
\fITimeout = int() >= 0 | infinity\fR 
.TP 2
*
\fIsystem_event() = {in, Msg} | {in, Msg, From} | {out, Msg, To} | term()\fR 
.RE
.LP
The default timeout is 5000 ms, unless otherwise specified\&. The \fItimeout\fR defines the time period to wait for the process to respond to a request\&. If the process does not respond, the function evaluates \fIexit({timeout, {M, F, A}})\fR\&. 
.LP
The functions make reference to a debug structure\&. The debug structure is a list of \fIdbg_opt()\fR\&. \fIdbg_opt()\fR is an internal data type used by the \fIhandle_system_msg/6\fR function\&. No debugging is performed if it is an empty list\&. 

.SH System Messages
.LP
Processes which are not implemented as one of the standard behaviours must still understand system messages\&. There are three different messages which must be understood: 
.RS 2
.TP 2
*
Plain system messages\&. These are received as \fI{system, From, Msg}\fR\&. The content and meaning of this message are not interpreted by the receiving process module\&. When a system message has been received, the function \fIsys:handle_system_msg/6\fR is called in order to handle the request\&. 
.TP 2
*
Shutdown messages\&. If the process traps exits, it must be able to handle an shut-down request from its parent, the supervisor\&. The message \fI{\&'EXIT\&', Parent, Reason}\fR from the parent is an order to terminate\&. The process must terminate when this message is received, normally with the same \fIReason\fR as \fIParent\fR\&. 
.TP 2
*
There is one more message which the process must understand if the modules used to implement the process change dynamically during runtime\&. An example of such a process is the \fIgen_event\fR processes\&. This message is \fI{get_modules, From}\fR\&. The reply to this message is \fIFrom ! {modules, Modules}\fR, where \fIModules\fR is a list of the currently active modules in the process\&. 
.RS 2
.LP
This message is used by the release handler to find which processes execute a certain module\&. The process may at a later time be suspended and ordered to perform a code change for one of its modules\&. 
.RE
.RE
.SH System Events
.LP
When debugging a process with the functions of this module, the process generates \fIsystem_events\fR which are then treated in the debug function\&. For example, \fItrace\fR formats the system events to the tty\&. 
.LP
There are three predefined system events which are used when a process receives or sends a message\&. The process can also define its own system events\&. It is always up to the process itself to format these events\&. 
.SH EXPORTS
.LP
.B
log(Name,Flag)
.br
.B
log(Name,Flag,Timeout) -> ok | {ok, [system_event()]}
.br
.RS
.TP
Types
Flag = true | {true, N} | false | get | print
.br
N = integer() > 0
.br
.RE
.RS
.LP
Turns the logging of system events On or Off\&. If On, a maximum of \fIN\fR events are kept in the debug structure (the default is 10)\&. If \fIFlag\fR is \fIget\fR, a list of all logged events is returned\&. If \fIFlag\fR is \fIprint\fR, the logged events are printed to \fIstandard_io\fR\&. The events are formatted with a function that is defined by the process that generated the event (with a call to \fIsys:handle_debug/4\fR)\&. 
.RE
.LP
.B
log_to_file(Name,Flag)
.br
.B
log_to_file(Name,Flag,Timeout) -> ok | {error, open_file}
.br
.RS
.TP
Types
Flag = FileName | false
.br
FileName = string()
.br
.RE
.RS
.LP
Enables or disables the logging of all system events in textual format to the file\&. The events are formatted with a function that is defined by the process that generated the event (with a call to \fIsys:handle_debug/4\fR)\&. 
.RE
.LP
.B
statistics(Name,Flag)
.br
.B
statistics(Name,Flag,Timeout) -> ok | {ok, Statistics} 
.br
.RS
.TP
Types
Flag = true | false | get
.br
Statistics = [{start_time, {Date1, Time1}}, {current_time, {Date, Time2}}, {reductions, integer()}, {messages_in, integer()}, {messages_out, integer()}]
.br
Date1 = Date2 = {Year, Month, Day}
.br
Time1 = Time2 = {Hour, Min, Sec}
.br
.RE
.RS
.LP
Enables or disables the collection of statistics\&. If \fIFlag\fR is \fIget\fR, the statistical collection is returned\&. 
.RE
.LP
.B
trace(Name,Flag)
.br
.B
trace(Name,Flag,Timeout) -> void()
.br
.RS
.TP
Types
Flag = boolean()
.br
.RE
.RS
.LP
Prints all system events on \fIstandard_io\fR\&. The events are formatted with a function that is defined by the process that generated the event (with a call to \fIsys:handle_debug/4\fR)\&. 
.RE
.LP
.B
no_debug(Name)
.br
.B
no_debug(Name,Timeout) -> void()
.br
.RS
.LP
Turns off all debugging for the process\&. This includes functions that have been installed explicitly with the \fIinstall\fR function, for example triggers\&. 
.RE
.LP
.B
suspend(Name)
.br
.B
suspend(Name,Timeout) -> void()
.br
.RS
.LP
Suspends the process\&. When the process is suspended, it will only respond to other system messages, but not other messages\&. 
.RE
.LP
.B
resume(Name)
.br
.B
resume(Name,Timeout) -> void()
.br
.RS
.LP
Resumes a suspended process\&. 
.RE
.LP
.B
change_code(Name, OldVsn, Module, Extra)
.br
.B
change_code(Name, OldVsn, Module, Extra, Timeout) -> ok | {error, Reason}
.br
.RS
.TP
Types
OldVsn = undefined | term()
.br
Module = atom()
.br
Extra = term()
.br
.RE
.RS
.LP
Tells the process to change code\&. The process must be suspended to handle this message\&. The \fIExtra\fR argument is reserved for each process to use as its own\&. The function \fIMod:system_code_change/4\fR is called\&. \fIOldVsn\fR is the old version of the \fIModule\fR\&. 
.RE
.LP
.B
get_status(Name)
.br
.B
get_status(Name,Timeout) -> {status, Pid, {module, Mod}, [PDict, SysState, Parent, Dbg, Misc]} 
.br
.RS
.TP
Types
PDict = [{Key, Value}]
.br
SysState = running | suspended
.br
Parent = pid()
.br
Dbg = [dbg_opt()]
.br
Misc = term()
.br
.RE
.RS
.LP
Gets the status of the process\&. 
.RE
.LP
.B
install(Name,{Func,FuncState})
.br
.B
install(Name,{Func,FuncState},Timeout)
.br
.RS
.TP
Types
Func = dbg_fun()
.br
dbg_fun() = fun(FuncState, Event, ProcState) -> done | NewFuncState
.br
FuncState = term()
.br
Event = system_event()
.br
ProcState = term()
.br
NewFuncState = term()
.br
.RE
.RS
.LP
This function makes it possible to install other debug functions than the ones defined above\&. An example of such a function is a trigger, a function that waits for some special event and performs some action when the event is generated\&. This could, for example, be turning on low level tracing\&. 
.LP
\fIFunc\fR is called whenever a system event is generated\&. This function should return \fIdone\fR, or a new func state\&. In the first case, the function is removed\&. It is removed if the function fails\&. 
.RE
.LP
.B
remove(Name,Func)
.br
.B
remove(Name,Func,Timeout) -> void()
.br
.RS
.TP
Types
Func = dbg_fun()
.br
.RE
.RS
.LP
Removes a previously installed debug function from the process\&. \fIFunc\fR must be the same as previously installed\&. 
.RE
.SH Process Implementation Functions
.LP
The following functions are used when implementing a special process\&. This is an ordinary process which does not use a standard behaviour, but a process which understands the standard system messages\&. 
.SH EXPORTS
.LP
.B
debug_options(Options) -> [dbg_opt()]
.br
.RS
.TP
Types
Options = [Opt]
.br
Opt = trace | log | statistics | {log_to_file, FileName} | {install, {Func, FuncState}}
.br
Func = dbg_fun()
.br
FuncState = term()
.br
.RE
.RS
.LP
This function can be used by a process that initiates a debug structure from a list of options\&. The values of the \fIOpt\fR argument are the same as the corresponding functions\&. 
.RE
.LP
.B
get_debug(Item,Debug,Default) -> term()
.br
.RS
.TP
Types
Item = log | statistics
.br
Debug = [dbg_opt()]
.br
Default = term()
.br
.RE
.RS
.LP
This function gets the data associated with a debug option\&. \fIDefault\fR is returned if the \fIItem\fR is not found\&. Can be used by the process to retrieve debug data for printing before it terminates\&. 
.RE
.LP
.B
handle_debug([dbg_opt()],FormFunc,Extra,Event) -> [dbg_opt()]
.br
.RS
.TP
Types
FormFunc = dbg_fun()
.br
Extra = term()
.br
Event = system_event()
.br
.RE
.RS
.LP
This function is called by a process when it generates a system event\&. \fIFormFunc\fR is a formatting function which is called as \fIFormFunc(Device, Event, Extra)\fR in order to print the events, which is necessary if tracing is activated\&. \fIExtra\fR is any extra information which the process needs in the format function, for example the name of the process\&. 
.RE
.LP
.B
handle_system_msg(Msg,From,Parent,Module,Debug,Misc)
.br
.RS
.TP
Types
Msg = term()
.br
From = pid()
.br
Parent = pid()
.br
Module = atom()
.br
Debug = [dbg_opt()]
.br
Misc = term()
.br
.RE
.RS
.LP
This function is used by a process module that wishes to take care of system messages\&. The process receives a \fI{system, From, Msg}\fR message and passes the \fIMsg\fR and \fIFrom\fR to this function\&. 
.LP
This function \fInever\fR returns\&. It calls the function \fIModule:system_continue(Parent, NDebug, Misc)\fR where the process continues the execution, or \fIModule:system_terminate(Reason, Parent, Debug, Misc)\fR if the process should terminate\&. The \fIModule\fR must export \fIsystem_continue/3\fR, \fIsystem_terminate/4\fR, and \fIsystem_code_change/4\fR (see below)\&. 
.LP
The \fIMisc\fR argument can be used to save internal data in a process, for example its state\&. It is sent to \fIModule:system_continue/3\fR or \fIModule:system_terminate/4\fR 
.RE
.LP
.B
print_log(Debug) -> void()
.br
.RS
.TP
Types
Debug = [dbg_opt()]
.br
.RE
.RS
.LP
Prints the logged system events in the debug structure using \fIFormFunc\fR as defined when the event was generated by a call to \fIhandle_debug/4\fR\&. 
.RE
.LP
.B
Mod:system_continue(Parent, Debug, Misc)
.br
.RS
.TP
Types
Parent = pid()
.br
Debug = [dbg_opt()]
.br
Misc = term()
.br
.RE
.RS
.LP
This function is called from \fIsys:handle_system_msg/6\fR when the process should continue its execution (for example after it has been suspended)\&. This function never returns\&. 
.RE
.LP
.B
Mod:system_terminate(Reason, Parent, Debug, Misc)
.br
.RS
.TP
Types
Reason = term()
.br
Parent = pid()
.br
Debug = [dbg_opt()]
.br
Misc = term()
.br
.RE
.RS
.LP
This function is called from \fIsys:handle_system_msg/6\fR when the process should terminate\&. For example, this function is called when the process is suspended and its parent orders shut-down\&. It gives the process a chance to do a clean-up\&. This function never returns\&. 
.RE
.LP
.B
Mod:system_code_change(Misc, Module, OldVsn, Extra) -> {ok, NMisc}
.br
.RS
.TP
Types
Misc = term()
.br
OldVsn = undefined | term()
.br
Module = atom()
.br
Extra = term()
.br
NMisc = term()
.br
.RE
.RS
.LP
Called from \fIsys:handle_system_msg/6\fR when the process should perform a code change\&. The code change is used when the internal data structure has changed\&. This function converts the \fIMisc\fR argument to the new data structure\&. \fIOldVsn\fR is the \fIvsn\fR attribute of the old version of the \fIModule\fR\&. If no such attribute was defined, the atom \fIundefined\fR is sent\&. 
.RE
.SH AUTHORS
.nf
Martin Bjorklund - support@erlang.ericsson.se
Magnus Froberg - support@erlang.ericsson.se
.fi
