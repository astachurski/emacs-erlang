


erlsrv(1)                 USER COMMANDS                 erlsrv(1)



NAME
     erlsrv - Run the Erlang emulator as  a  service  on  Windows
     NT(R)

DESCRIPTION
     This utility is specific to Windows NT(R) It  allows  Erlang
     emulators  to  run  as  services  on the NT system, allowing
     embedded systems to start without any user  needing  to  log
     in.  The  emulator  started  in  this way can be manipulated
     through the Windows NT(R) services applet in a manner  simi-
     lar to other services.

     As well as being the actual service, erlsrv also provides  a
     command  line  interface for registering, changing, starting
     and stopping services.

     To manipulate services,  the  logged  in  user  should  have
     Administrator  privileges on the machine. The Erlang machine
     itself is (default) run as the local administrator. This can
     be changed with the Services applet in Windows NT(R).

     The processes created by the service can, as opposed to nor-
     mal  services,  be "killed" with the task manager. Killing a
     emulator that is started  by  a  service  will  trigger  the
     "OnFail"  action  specified for that service, which may be a
     reboot.

     The following parameters may be specified  for  each  Erlang
     service:

       * _S_t_o_p_A_c_t_i_o_n: This tells _e_r_l_s_r_v how  to  stop  the  Erlang
         emulator.  Default  is  to  kill it (Win32 TerminatePro-
         cess), but this action can specify any Erlang shell com-
         mand  that  will  be executed in the emulator to make it
         stop. The emulator is expected to stop within 30 seconds
         after  the command is issued in the shell. If the emula-
         tor is not stopped, it will report a  running  state  to
         the service manager.

       * _O_n_F_a_i_l:  This  can  be  either   of   _r_e_b_o_o_t,   _r_e_s_t_a_r_t,
         _r_e_s_t_a_r_t__a_l_w_a_y_s  or  _i_g_n_o_r_e  (the  default).  In  case of
         _r_e_b_o_o_t, the NT system is rebooted whenever the  emulator
         stops  (a  more  simple form of watchdog), this could be
         useful for less  critical  systems,  otherwise  use  the
         heart  functionality  to  accomplish  this.  The restart
         value makes the Erlang emulator be restarted (with what-
         ever  parameters  are  registered for the service at the
         occasion) when it stops. If  the  emulator  stops  again
         within  10  seconds,  it  is  not  restarted to avoid an
         infinite loop which could completely hang the NT system.
         _r_e_s_t_a_r_t__a_l_w_a_y_s  is  similar to restart, but does not try
         to detect cyclic restarts,  it  is  expected  that  some



Ericsson Utvecklings ALBast change: erts  5.0.1                   1






erlsrv(1)                 USER COMMANDS                 erlsrv(1)



         other  mechanism  is  present  to avoid the problem. The
         default (ignore) just reports the service as stopped  to
         the  service  manager  whenever  it  fails, it has to be
         manually restarted.

         On a system where release handling is used, this  should
         always  be  set to _i_g_n_o_r_e. Use _h_e_a_r_t to restart the ser-
         vice on failure instead.

       * _M_a_c_h_i_n_e:  The  location  of  the  Erlang  emulator.  The
         default  is the _e_r_l._e_x_e located in the same directory as
         erlsrv.exe. Do not specify _w_e_r_l._e_x_e as this emulator, it
         will not work.

         If the system uses release handling, this should be  set
         to a program similar to _s_t_a_r_t__e_r_l._e_x_e.

       * _E_n_v: Specifies an _a_d_d_i_t_i_o_n_a_l environment for the  emula-
         tor.  The environment variables specified here are added
         to the system wide environment block  that  is  normally
         present  when  a service starts up. Variables present in
         both the system wide  environment  and  in  the  service
         environment  specification  will  be  set  to  the value
         specified in the service.

       * _W_o_r_k_D_i_r: The working directory for the Erlang  emulator,
         has  to be on a local drive (there are no network drives
         mounted when a service starts). Default  working  direc-
         tory  for  services  is %_S_y_s_t_e_m_D_r_i_v_e%%_S_y_s_t_e_m_P_a_t_h%. Debug
         log files will be placed in this directory.

       * _P_r_i_o_r_i_t_y: The process priority of the emulator, this can
         be  one of _r_e_a_l_t_i_m_e, _h_i_g_h, _l_o_w or _d_e_f_a_u_l_t (the default).
         Real-time priority is not recommended, the machine  will
         possibly  be  inaccessible  to  interactive  users. High
         priority could be used if two Erlang nodes should reside
         on  one  dedicated system and one should have precedence
         over the other. Low process  priority  may  be  used  if
         interactive  performance  should  not be affected by the
         emulator process.

       * _S_N_a_m_e _o_r _N_a_m_e: Specifies the short or long node-name  of
         the Erlang emulator. The Erlang services are always dis-
         tributed, default is to use the service name as  (short)
         node-name.

       * _D_e_b_u_g_T_y_p_e: Can be one of _n_o_n_e (default), _n_e_w,  _r_e_u_s_e  or
         _c_o_n_s_o_l_e.  Specifies  that  output  from the Erlang shell
         should be sent to a "debug log". The log file  is  named
         <servicename>._d_e_b_u_g  or  <servicename>._d_e_b_u_g.<N>,  where
         <N> is an integer between  1  and  99.  The  logfile  is
         placed  in  the  working  directory  of  the service (as



Ericsson Utvecklings ALBast change: erts  5.0.1                   2






erlsrv(1)                 USER COMMANDS                 erlsrv(1)



         specified in WorkDir). The _r_e_u_s_e  option  always  reuses
         the  same  log  file  (<servicename>._d_e_b_u_g)  and the _n_e_w
         option uses a separate log file for every invocation  of
         the   service   (<servicename>._d_e_b_u_g.<N>).  The  _c_o_n_s_o_l_e
         option opens an interactive Windows NT(R) console window
         for  the Erlang shell of the service. The _c_o_n_s_o_l_e option
         automatically disables  the  _S_t_o_p_A_c_t_i_o_n  and  a  service
         started with an interactive console window will not sur-
         vive logouts. If no _D_e_b_u_g_T_y_p_e is specified  (_n_o_n_e),  the
         output of the Erlang shell is discarded.

       * _A_r_g_s:  Additional  arguments  passed  to  the   emulator
         startup  program  _e_r_l._e_x_e  (or _s_t_a_r_t__e_r_l._e_x_e). Arguments
         that cannot be specified here are -_n_o_i_n_p_u_t  (StopActions
         would not work), -_n_a_m_e and -_s_n_a_m_e (they are specified in
         any way. The most common use is for  specifying  cookies
         and flags to be passed to init:boot() (-_s).

      The naming of the service in a  system  that  uses  release
     handling  has  to  follow  the  convention _N_o_d_e_N_a_m_e__R_e_l_e_a_s_e,
     where _N_o_d_e_N_a_m_e is the first part of the Erlang nodename  (up
     to,  but  not  including the "@") and _R_e_l_e_a_s_e is the current
     release of the application.


EXPORTS
     erlsrv {set | add} <service-name> [<service options>]

          The set and add commands adds or modifies a Erlang ser-
          vice  respectively. The simplest form of an add command
          would be completely without options in which  case  all
          default  values  (described  above)  apply. The service
          name is mandatory.

          Every option can be given without parameters, in  which
          case  the  default  value  is  applied.  Values  to the
          options are supplied _o_n_l_y when the default  should  not
          be  used (i.e. _e_r_l_s_r_v _s_e_t _m_y_s_e_r_v_i_c_e -_p_r_i_o -_a_r_g sets the
          default priority and removes all arguments).

          The following service options are currently available:

            -st[opaction] [<erlang shell command>]:
                Defines the StopAction, the command given to  the
                erlang shell when the service is stopped. Default
                is none.

            -on[fail] [{reboot | restart | restart_always}]:
                Specifies the action to take when the erlang emu-
                lator stops unexpectedly. Default is to ignore.

            -m[achine] [<erl-command>]:



Ericsson Utvecklings ALBast change: erts  5.0.1                   3






erlsrv(1)                 USER COMMANDS                 erlsrv(1)



                The complete path to the erlang  emulator,  never
                use  the  werl  program  for this. Default is the
                _e_r_l._e_x_e in the same directory as _e_r_l_s_r_v._e_x_e. When
                release handling is used, this should be set to a
                program similar to _s_t_a_r_t__e_r_l._e_x_e.

            -e[nv] [<variable>[=<value>]] ...:
                Edits the  environment  block  for  the  service.
                Every  environment variable specified will add to
                the  system  environment  block.  If  a  variable
                specified here has the same name as a system wide
                environment variable, the specified  value  over-
                rides  the system wide. Environment variables are
                added    to    this    list     by     specifying
                <variable>=<value>  and  deleted from the list by
                specifying  <variable>  alone.  The   environment
                block is automatically sorted. Any number of -_e_n_v
                options can be specified in one command.  Default
                is to use the system environment block unmodified
                (except for two additions, see below).

            -w[orkdir] [<directory>]:
                The initial working directory of the erlang  emu-
                lator. Default is the system directory.

            -p[riority] [{low|high|realtime}]:
                The priority of the erlang emulator. The  default
                is the Windows NT(R) default priority.

            {-sn[ame] | -n[ame]} [<node-name>]:
                The node-name of the erlang machine, distribution
                is mandatory. Default is -_s_n_a_m_e <_s_e_r_v_i_c_e _n_a_m_e>.

            -d[ebugtype] [{new|reuse|console}]:
                Specifies where  shell  output  should  be  sent,
                default is that shell output is discarded.

            -ar[gs] [<limited erl arguments>]:
                Additional  arguments  to  the  erlang  emulator,
                avoid   -_n_o_i_n_p_u_t,   -_n_o_s_h_e_l_l   and  -_s_n_a_m_e/-_n_a_m_e.
                Default is no additional arguments. Remember that
                the  services  cookie file is not necessarily the
                same as the interactive users. The  service  runs
                as  the local administrator. All arguments should
                be given  together  in  one  string,  use  double
                quotes  (") to give an argument string containing
                spaces and use quoted quotes  (\\")  to  give  an
                quote within the argument string if necessary.

     erlsrv {start | stop | disable | enable} <service-name>





Ericsson Utvecklings ALBast change: erts  5.0.1                   4






erlsrv(1)                 USER COMMANDS                 erlsrv(1)



          These commands are only added for convenience, the nor-
          mal way to manipulate the state of a service is through
          the control panels services applet. The _s_t_a_r_t and  _s_t_o_p
          commands  communicates  with  the  service  manager for
          stopping and starting  a  service.  The  commands  wait
          until  the service is actually stopped or started. When
          disabling a service, it is not  stopped,  the  disabled
          state  will  not take effect until the service actually
          is stopped. Enabling a service  sets  it  in  automatic
          mode,  that is started at boot. This command cannot set
          the service to manual.

     erlsrv remove <service-name>

          This command removes the service  completely  with  all
          its registered options. It will be stopped before it is
          removed.

     erlsrv list [<service-name>]

          If no service name is supplied, a brief listing of  all
          erlang services is presented. If a service-name is sup-
          plied, all options for that service are presented.

     erlsrv help

ENVIRONMENT
     The environment of an erlang machine started  as  a  service
     will  contain  two  special  variables, _E_R_L_S_R_V__S_E_R_V_I_C_E__N_A_M_E,
     which is the name of the service that  started  the  machine
     and   _E_R_L_S_R_V__E_X_E_C_U_T_A_B_L_E  which  is  the  full  path  to  the
     _e_r_l_s_r_v._e_x_e that can be used to manipulate the service.  This
     will  come  in  handy when defining a heart command for your
     service. A command file for restarting a service will simply
     look like this:

     @echo off
     %ERLSRV_EXECUTABLE% stop %ERLSRV_SERVICE_NAME%
     %ERLSRV_EXECUTABLE% start %ERLSRV_SERVICE_NAME%

     This command file is then set as heart command.

     The environment variables can also be used to detect that we
     are  running  as  a  service  and  make  port programs react
     correctly to the control events  generated  on  logout  (see
     below).

PORT PROGRAMS
     When a program runs in the service context, it has to handle
     the control events that is sent to every program in the sys-
     tem when the interactive user logs off. This is done in dif-
     ferent  ways  for  programs running in the console subsystem



Ericsson Utvecklings ALBast change: erts  5.0.1                   5






erlsrv(1)                 USER COMMANDS                 erlsrv(1)



     and programs running as window applications. An  application
     which  runs  in  the console subsystem (normal for port pro-
     grams) uses the win32 function  _S_e_t_C_o_n_s_o_l_e_C_t_r_l_H_a_n_d_l_e_r  to  a
     control   handler   that  returns  TRUE  in  answer  to  the
     _C_T_R_L__L_O_G_O_F_F__E_V_E_N_T.   Other   applications    just    forward
     _W_M__E_N_D_S_E_S_S_I_O_N  and  _W_M__Q_U_E_R_Y_E_N_D_S_E_S_S_I_O_N to the default window
     procedure. Here is a brief example in C of how  to  set  the
     console control handler:

     #include <windows.h>
     /*
     ** A Console control handler that ignores the log off events,
     ** and lets the default handler take care of other events.
     */
     BOOL WINAPI service_aware_handler(DWORD ctrl){
         if(ctrl == CTRL_LOGOFF_EVENT)
             return TRUE;
         return FALSE;
     }

     void initialize_handler(void){
         char buffer[2];
         /*
          * We assume we are running as a service if this
          * environment variable is defined
          */
         if(GetEnvironmentVariable("ERLSRV_SERVICE_NAME",buffer,
                                   (DWORD) 2)){
             /*
             ** Actually set the control handler
             */
             SetConsoleCtrlHandler(&service_aware_handler, TRUE);
         }
     }

NOTES
     Even though the options are described in a Unix-like format,
     the case of the options or commands is not relevant, and the
     "/" character for options can be used as  well  as  the  "-"
     character.

     Note  that  the  program  resides  in  the  emulators   _b_i_n-
     directory,  not  in  the  _b_i_n-directory  directly  under the
     erlang root. The reasons for this are the subtle problem  of
     upgrading the emulator on a running system, where a new ver-
     sion of the runtime system  should  not  need  to  overwrite
     existing (and probably used) executables.

     To  easily  manipulate  the   erlang   services,   put   the
     <_e_r_l_a_n_g__r_o_o_t>\\_e_r_t_s-<_v_e_r_s_i_o_n>\\_b_i_n  directory  in  the  path
     instead of <_e_r_l_a_n_g__r_o_o_t>\\_b_i_n. The  erlsrv  program  can  be
     found  from inside erlang by using the  _o_s:_f_i_n_d__e_x_e_c_u_t_a_b_l_e/_1



Ericsson Utvecklings ALBast change: erts  5.0.1                   6






erlsrv(1)                 USER COMMANDS                 erlsrv(1)



     erlang function.

     For release handling to work, use _s_t_a_r_t__e_r_l  as  the  Erlang
     machine.  It is also worth mentioning again that the name of
     the service is significant (see above).

SEE ALSO
     start_erl(1), release_handler(3)

AUTHOR
     Patrik Nyblom - support@erlang.ericsson.se












































Ericsson Utvecklings ALBast change: erts  5.0.1                   7



