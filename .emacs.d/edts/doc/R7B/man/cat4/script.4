


script(4)                     FILES                     script(4)



NAME
     script - Boot script

DESCRIPTION
     The _b_o_o_t _s_c_r_i_p_t describes how the Erlang runtime  system  is
     started.  It contains instructions on which code to load and
     which processes and applications to start.

     The command _e_r_l -_b_o_o_t _N_a_m_e starts the  system  with  a  boot
     file   called   _N_a_m_e._b_o_o_t,   which  is  generated  from  the
     _N_a_m_e._s_c_r_i_p_t file, using _s_y_s_t_o_o_l_s:_s_c_r_i_p_t_2_b_o_o_t/_1.

     The ._s_c_r_i_p_t file is generated by _s_y_s_t_o_o_l_s from a  ._r_e_l  file
     and ._a_p_p files.


FILE SYNTAX
     The boot script is stored  in  a  file  with  the  extension
     ._s_c_r_i_p_t

     The file has the following syntax:

     {script, {Name, Vsn},
      [
       {progress, loading},
       {preLoaded, [Mod1, Mod2, ...]},
       {path, [Dir1,"$ROOT/Dir",...]}.
       {primLoad, [Mod1, Mod2, ...]},
       ...
       {kernel_load_completed},
       {progress, loaded},
       {kernelProcess, Name, {Mod, Func, Args}},
       ...
       {apply, {Mod, Func, Args}},
       ...
       {progress, started}]}.

       * _N_a_m_e = _s_t_r_i_n_g() defines the name of the system.

       * _V_s_n = _s_t_r_i_n_g() defines the version of the system.

       * {_p_r_o_g_r_e_s_s, _T_e_r_m} sets the "progress" of the  initializa-
         tion program. The function _i_n_i_t:_g_e_t__s_t_a_t_u_s() returns the
         current value of the progress, which is {_I_n_t_e_r_n_a_l_S_t_a_t_u_s,
         _T_e_r_m}.

       * {_p_a_t_h, [_D_i_r]} where _D_i_r is a string. This argument  sets
         the load path of the system to [_D_i_r]. The load path used
         to load modules is obtained from the initial load  path,
         which  is  given  in  the script file, together with any
         path flags which were supplied in the command line argu-
         ments.  The  command  line  arguments modify the path as



Ericsson Utvecklings ABLast change: sasl  1.9                    1






script(4)                     FILES                     script(4)



         follows:


           - -_p_a _D_i_r_1 _D_i_r_2 ... _D_i_r_N adds  the  directories  _D_i_r_1,
             _D_i_r_2,  ...,  _D_i_r_N  to  the front of the initial load
             path.

           - -_p_z _D_i_r_1 _D_i_r_2 ... _D_i_r_N adds  the  directories  _D_i_r_1,
             _D_i_r_2, ..., _D_i_r_N to the end of the initial load path.

           - -_p_a_t_h _D_i_r_1 _D_i_r_2 ... _D_i_r_N defines  a  set  of  direc-
             tories  _D_i_r_1,  _D_i_r_2,  ...,  _D_i_r_N  which replaces the
             search path given  in  the  script  file.  Directory
             names in the path are interpreted as follows:

               o Directory names starting with / are  assumed  to
                 be absolute path names.

               o Directory names not starting with / are  assumed
                 to be relative the current working directory.

               o The special $_R_O_O_T variable can only be  used  in
                 the  script, not as a command line argument. The
                 given directory is relative the Erlang installa-
                 tion directory.

       * {_p_r_i_m_L_o_a_d, [_M_o_d]}  loads  the  modules  [_M_o_d]  from  the
         directories  specified  in  _P_a_t_h. The script interpreter
         fetches the appropriate module by calling  the  function
         _e_r_l__p_r_i_m__l_o_a_d_e_r:_g_e_t__f_i_l_e(_M_o_d).  A fatal error which ter-
         minates the system will occur if the  module  cannot  be
         located.

       * {_k_e_r_n_e_l__l_o_a_d__c_o_m_p_l_e_t_e_d} indicates that all modules which
         _m_u_s_t  be  loaded  _b_e_f_o_r_e  any  processes are started are
         loaded. In interactive mode, all {_p_r_i_m_L_o_a_d, [_M_o_d]}  com-
         mands  interpreted  after  this command are ignored, and
         these modules are loaded on demand.  In  embedded  mode,
         _k_e_r_n_e_l__l_o_a_d__c_o_m_p_l_e_t_e_d  is  ignored,  and all modules are
         loaded during system start.

       * {_k_e_r_n_e_l_P_r_o_c_e_s_s, _N_a_m_e, {_M_o_d, _F_u_n_c, _A_r_g_s}} starts a  "ker-
         nel  process".  The  kernel  process  _N_a_m_e is started by
         evaluating _a_p_p_l_y(_M_o_d, _F_u_n_c, _A_r_g_s) which is  expected  to
         return  {_o_k,  _P_i_d}  or _i_g_n_o_r_e. The _i_n_i_t process monitors
         the behaviour of _P_i_d and terminates the  system  if  _P_i_d
         dies. Kernel processes are key components of the runtime
         system. Users do not normally add new kernel processes.

       * {_a_p_p_l_y, {_M_o_d, _F_u_n_c,  _A_r_g_s}}.  The  init  process  simply
         evaluates  _a_p_p_l_y(_M_o_d, _F_u_n_c, _A_r_g_s). The system terminates
         if this results in an error. The boot procedure hangs if



Ericsson Utvecklings ABLast change: sasl  1.9                    2






script(4)                     FILES                     script(4)



         this function never returns.

  Note:
     In the _i_n_t_e_r_a_c_t_i_v_e system the code  loader  provides  demand
     driven  code  loading,  but  in the _e_m_b_e_d_d_e_d system the code
     loader loads all the code immediately. The same  version  of
     _c_o_d_e   is   used  in  both  cases.  The  code  server  calls
     _i_n_i_t:_g_e_t__a_r_g_u_m_e_n_t(_m_o_d_e) to find out  if  it  should  run  in
     demand mode, or non-demand driven mode.


SEE ALSO
     systools(3)

AUTHORS
     Martin Bjorklund - support@erlang.ericsson.se
     Magnus Froberg - support@erlang.ericsson.se






































Ericsson Utvecklings ABLast change: sasl  1.9                    3



