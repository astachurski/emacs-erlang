


int(3)              ERLANG MODULE DEFINITION               int(3)



MODULE
     int - Interpreter (Debugger) Interface.

DESCRIPTION
     The module _i_n_t provides an interface for the  Erlang  inter-
     preter  (debugger).  The  graphical interface can be opened,
     but there are also commands available for  interacting  with
     the interpreter from the Erlang shell.

     The purpose of the  interpreter  is  to  provide  mechanisms
     which  makes  it  possible to monitor what is going on while
     processes  execute  specified  modules,  or  when  processes
     crash.

     The following features are provided to assist  the  user  to
     catch bugs:

             o Specify which module(s) to be interpreted.

             o Make processes stop on specified break points.

             o Examine what has happened when a process has
               stopped, or crashed, by means of process attachment.
               This includes inspecting variable bindings.

             o Change processes, so that you can experiment
               by correcting the effects of one bug and proceed to
               the next one.

             o Single step the execution.

             o Monitor the current status of all interpreted
               processes. Processes spread over several Erlang
               nodes can all be monitored and attached.

     If a network  of  Erlang  nodes,  break  points  are  always
     updated on all nodes.


EXPORTS
     m() -> pid()

          Starts a new graphical monitor. This is the main window
          of  the  interpreter.  All interpreter functionality is
          accessed from the monitor window.  The  monitor  window
          displays  the  status of all processes that are running
          interpreted modules.

     i(AbsModule) -> {module, Module} | error

          Types
               AbsModule  =  atom()  |  string()  |   [atom()   |



Ericsson UtvecklingsLaAsBt change: debugger  1.5.2                 1






int(3)              ERLANG MODULE DEFINITION               int(3)



               string()]
               Module = atom()

          Marks _M_o_d_u_l_e as being interpreted. The _M_o_d_u_l_e parameter
          can either be a single module name, or a list of module
          names. _M_o_d_u_l_e is compiled into an abstract  form  which
          is  loaded  into  the interpreter. The actual paths are
          searched   for   the   corresponding   source   file(s)
          (_M_o_d_u_l_e.erl).  _M_o_d_u_l_e  can  be  given  with an absolute
          path.

  Note:
     If _M_o_d_u_l_e is a list of  modules,  the  result  of  the  last
     module is returned.


  Note:
     If an interpreted module is compiled using the _c:_c function,
     this module is reloaded into the interpreter.


     i(AbsModule,Options) -> {module, Module} | error

          Types
               AbsModule  =  atom()  |  string()  |   [atom()   |
               string()]
               Module = atom()
               Options = [opt()]
               opt() = verbose | {i, dir()} | {d, macro()} |  {d,
               macro(), term()}
               dir() = string()
               macro() = atom()

          As above, but verbose information is given  in  _O_p_t_i_o_n_s
          is one of:

            _v_e_r_b_o_s_e:
                Print verbose information.

            {_i, _D_i_r}:
                Add _D_i_r to the list of directories to be searched
                when including a file.

            {_d, _M_a_c_r_o}:

            {_d, _M_a_c_r_o, _V_a_l_u_e}:
                Defines a macro _M_a_c_r_o to have  the  value  _V_a_l_u_e.
                The default is _t_r_u_e).

     a(AbsModule) -> {module, Module} | error

          Types



Ericsson UtvecklingsLaAsBt change: debugger  1.5.2                 2






int(3)              ERLANG MODULE DEFINITION               int(3)



               AbsModule  =  atom()  |  string()  |   [atom()   |
               string()]
               Module = atom()

          _O_b_s_o_l_e_t_e function. It has  the  same  functionality  as
          _i_n_t:_i/_1.

     a(AbsModule,Options) -> {module, Module} | error

          Types
               AbsModule  =  atom()  |  string()  |   [atom()   |
               string()]
               Module = atom()
               Options = [opt()]
               opt() = verbose | {i, dir()} | {d, macro()} |  {d,
               macro(), term()}
               dir() = string()
               macro() = atom()

          _O_b_s_o_l_e_t_e function. It has  the  same  functionality  as
          _i_n_t:_i/_2.

     n(Module) -> ok

          Types
               Module = atom() | string() | [atom() | string()]

          Does not interpret _M_o_d_u_l_e.  The  _M_o_d_u_l_e  parameter  can
          either  be  a  single  module name, or a list of module
          names. _M_o_d_u_l_e  is  removed  from  the  set  of  modules
          currently being interpreted.

     ni(AbsModule) -> {module,Module} | error | ok
     ni(AbsModule,Options) -> {module,Module} | error | ok
     na(AbsModule) -> {module,Module} | error | ok
     na(AbsModule,Options) -> {module,Module} | error | ok
     nn(Module) -> ok

          Behaves as the corresponding i/1,i/2,a/1,a/2,n/1  func-
          tions described above, but on all nodes in the network.
          These functions always return _o_k if we are _a_l_i_v_e,  oth-
          erwise as above.

     interpreted() -> [Module]

          Types
               Module = atom()

          Returns a list of all modules  currently  being  inter-
          preted.





Ericsson UtvecklingsLaAsBt change: debugger  1.5.2                 3






int(3)              ERLANG MODULE DEFINITION               int(3)



     version() -> atom()

          Returns the current version number of the interpreter.

     auto_attach(Flag) -> true

          Types
               Flag = FlagItem | [FlagItem]
               FlagItem = init | break | exit | false

          Interpreted processes can  be  attached  automatically,
          without the need to attach to a process using the moni-
          tor  window  _i_n_t:_m().  An  attachment  window   -   not
          described here - pops up for the attached process. _F_l_a_g
          specifies at  which  point  interpreted  processes  are
          automatically attached.

          _F_l_a_g is one of:

            * _i_n_i_t. Attach to a process the very  first  time  it
              calls an interpreted function.

            * _b_r_e_a_k. Attach to a process whenever  it  reaches  a
              break point.

            * _e_x_i_t. Attach to a process when it terminates.

            * _f_a_l_s_e. Deactivate the automatic attach facility.

          If several conditions are to be active, a list of flags
          must be given.

     auto_attach(Flag,Function) -> true

          Types
               Flag = FlagItem | [FlagItem]
               FlagItem = init | break | exit | false
               Function = {Mod, Func}
               Mod = atom()
               Fun = atom()

          As above, but instead of using the  default  attachment
          window,  the  specified  _F_u_n_c_t_i_o_n  is  used in order to
          start the interaction with the  attached  process.  The
          _F_u_n_c_t_i_o_n  parameter  must be the tuple {_M_o_d, _F_u_n_c}, and
          this function should implement the corresponding  func-
          tionality  in the same way as the _i_n_t__s_h_o_w:_a__s_t_a_r_t/_3, _4
          functions.

     stack_trace(Flag) -> true

          Types



Ericsson UtvecklingsLaAsBt change: debugger  1.5.2                 4






int(3)              ERLANG MODULE DEFINITION               int(3)



               Flag = all | true | no_tail | false

          The interpreter can keep call frames in the  stack  for
          future  inspections. Typically, it is possible to go up
          and down in the stack in order to inspect the  flow  of
          control  when  the  execution  has  been stopped - at a
          break point, when a process has  terminated,  or  in  a
          single step execution.

          By default, the whole stack is  kept  (_F_l_a_g  =  _a_l_l  or
          _t_r_u_e). If processes with a very long life time and with
          a lot of tail  recursive  calls  are  interpreted,  the
          _n_o__t_a_i_l  flag  should  be used. No tail recursive calls
          are kept in the stack if this flag is used.

          The _f_a_l_s_e flag should be used if the interpreter is not
          to keep call frames.

     snapshot() -> [Snap]

          Types
               Snap = {Pid, InitialFunc, Status, Info}
               Pid = pid()
               InitialFunc = atom()
               Status = idle | running | waiting | break | exit |
               no_conn
               Info = {} | {Module, Line} | ExitReason
               Module = atom()
               Line = int()
               ExitReason = term()

          Returns a list which contains the current status infor-
          mation  of  all  interpreted processes, [{_P_i_d, _I_n_i_t_i_a_l_-
          _F_u_n_c, _S_t_a_t_u_s, _I_n_f_o}, ...] where:

            * _P_i_d is the process identity of the interpreted pro-
              cess.

            * _I_n_i_t_i_a_l_F_u_n_c is the name of  the  first  interpreted
              function.

            * _S_t_a_t_u_s is the current status of the process.

            * _I_n_f_o is additional information if _S_t_a_t_u_s  is  break
              (the  tuple  {_M_o_d_u_l_e, _L_i_n_e}) or exit (the exit rea-
              son).

     continue(Pid) -> ok | {error, not_interpreted}

          Order _P_i_d to resume the execution.





Ericsson UtvecklingsLaAsBt change: debugger  1.5.2                 5






int(3)              ERLANG MODULE DEFINITION               int(3)



     continue(X,Y,Z) -> ok | {error, not_interpreted}

          Types
               X = Y = Z = int()

          Order the process c:pid(_X,_Y,_Z) to resume the execution.

     clear() -> ok

          Delete (clear) information for all terminated processes
          from the interpreter.

     file(Module) -> FileName | {error, not_loaded}

          Types
               Module = atom()
               FileName = string()

          Returns the name of the corresponding source code  file
          last loaded for _M_o_d_u_l_e. Returns the name with the abso-
          lute path of the file.

     break(Module,Line) -> ok | {error, What}

          Types
               Module = atom()
               Line = int()
               What = badarg | break_exists

          Creates a new break point at _L_i_n_e in _M_o_d_u_l_e. The execu-
          tion  of  an  interpreted process is stopped before the
          expression at _L_i_n_e in _M_o_d_u_l_e is executed.

     delete_break(Module,Line) -> ok | {error, What}

          Types
               Module = atom()
               Line = int()
               What = badarg | no_break_exists

          Deletes the break point located at _L_i_n_e in _M_o_d_u_l_e.

     no_break() -> ok

          Deletes all existing break points.

     no_break(Module) -> ok

          Types
               Module = atom()





Ericsson UtvecklingsLaAsBt change: debugger  1.5.2                 6






int(3)              ERLANG MODULE DEFINITION               int(3)



          Deletes all existing break points in _M_o_d_u_l_e.

     break_in(Module,Function,Arity) -> ok | {error, What}

          Types
               Module = atom()
               Function = atom()
               Arity = int()
               What = badarg | function_not_found

          Creates break points at the first line in every  clause
          of the _M_o_d_u_l_e:_F_u_n_c_t_i_o_n/_A_r_i_t_y function.

     del_break_in(Module,Function,Arity) -> ok | {error, What}

          Types
               Module = atom()
               Function = atom()
               Arity = int()
               What = badarg | function_not_found

          Deletes break points at the first line in every  clause
          of the _M_o_d_u_l_e:_F_u_n_c_t_i_o_n/_A_r_i_t_y function.

     disable_break(Module,Line) -> ok | {error, What}

          Types
               Module = atom()
               Line = int()
               What = badarg | no_break

          Makes the break point at _L_i_n_e in  _M_o_d_u_l_e  inactive.  No
          processes  will  be stopped at the break point, but the
          break point still exists.

     enable_break(Module,Line) -> ok | {error, What}

          Types
               Module = atom()
               Line = int()
               What = badarg | no_break

          Makes  the  break  point  at  _L_i_n_e  in  _M_o_d_u_l_e  active.
          Processes will again be stopped at the break point.

     action_at_break(Module,Line,Action) -> ok | {error, What}

          Types
               Module = atom()
               Line = int()
               Action = enable | disable | delete
               What = badarg | no_break



Ericsson UtvecklingsLaAsBt change: debugger  1.5.2                 7






int(3)              ERLANG MODULE DEFINITION               int(3)



          Sets the status of the break point at  _L_i_n_e  in  _M_o_d_u_l_e
          after  it is triggered the next time. _A_c_t_i_o_n is _e_n_a_b_l_e,
          _d_i_s_a_b_l_e, or _d_e_l_e_t_e.

     test_at_break(Module,Line,Function) -> ok | {error, What}

          Types
               Module = atom()
               Line = int()
               Function = {M, F}
               Mod = atom()
               Func = atom()
               What = badarg | no_break

          Makes the break point at _L_i_n_e  in  _M_o_d_u_l_e  conditional.
          _F_u_n_c_t_i_o_n is called whenever the break point is reached.
          _F_u_n_c_t_i_o_n is a tuple {_M_o_d,  _F_u_n_c}.  _F_u_n_c_t_i_o_n  must  have
          _a_r_i_t_y  _1 and return either _t_r_u_e or _f_a_l_s_e. This way, the
          break point either triggers, or not.  The  argument  to
          _F_u_n_c_t_i_o_n  is  the current variable bindings of the pro-
          cess at the place of the break point. The bindings  can
          be inspected using _i_n_t:_g_e_t__b_i_n_d_i_n_g/_2.

     get_binding(Variable,Bs) -> {value, Value} | unbound

          Types
               Variable = atom()
               Bs = term()
               Value = term()

          Gets the binding of _V_a_r_i_a_b_l_e in the  binding  structure
          _B_s.  _V_a_r_i_a_b_l_e  must be an atom, for example '_N_u_m'. This
          function is be used from  inside  a  conditional  break
          point  function.  _B_s  is supplied as an argument to the
          conditional test function above.

     all_breaks() -> [{Break, Options}]

          Types
               Break = {Module, Line}
               Module = atom()
               Line = int()
               Options = term()

          Returns a list of all existing break points.

     all_breaks(Module) -> [{Break, Options}]

          Types
               Module = atom()
               Break = {Module, Line}
               Line = int()



Ericsson UtvecklingsLaAsBt change: debugger  1.5.2                 8






int(3)              ERLANG MODULE DEFINITION               int(3)



               Options = term()

          Returns a list of all existing break points located  in
          _M_o_d_u_l_e.

Usage
     Refer to the Debugger User's Guide for information about the
     graphical interface.

See Also
     i(3), c(3), code(3), error_handler(3)

AUTHOR
     Magnus Froberg - support@erlang.ericsson.se









































Ericsson UtvecklingsLaAsBt change: debugger  1.5.2                 9



