


eva_snmp_adaptation(3)ERLANG MODULE DEFINITIOeNva_snmp_adaptation(3)



MODULE
     eva_snmp_adaptation  - An SNMP Adaptation to EVA

DESCRIPTION
     This module implements an SNMP adaptation to basic EVA.  The
     MIB  implemented  by this adaptation is OTP-EVA-MIB. The MIB
     is located in the directory _m_i_b_s in the distribution.

     The resources generate events and alarms using the API  pro-
     vided  by EVA. They are not aware that the events and alarms
     are sent as SNMP traps to SNMP managers.

     However, each trap to be sent must be  defined  in  an  SNMP
     MIB,  and  there  must  be  instrumentation  functions  that
     translate the EVA events and alarms into  SNMP  traps.  Nor-
     mally, each event and alarm in the system is mapped onto one
     separate SNMP trap. This mapping is done by registration  of
     the  events.  The  following functions are available for the
     registration. They could be called  when  the  corresponding
     MIB is loaded.


EXPORTS
     create_tables(Nodes) -> void()

          Types
               Nodes = [node()]

          This function creates the Mnesia  tables  required  for
          the _e_v_a__s_n_m_p__a_d_a_p_t_a_t_i_o_n. _N_o_d_e_s is a list of nodes where
          the tables should be replicated.  This  list  of  nodes
          should specify the same nodes where the application EVA
          can be run distributed, so that  EVA  always  can  have
          local access to the tables.

          This function should be called once when installing the
          EVA application in the system.

     name2index(Name) -> {ok, Index} | undefined

          Types
               Name = atom()
               Index = integer()

          Maps an event to the corresponding _e_v_e_n_t_I_n_d_e_x value for
          the event, as defined in the _e_v_e_n_t_T_a_b_l_e in _O_T_P-_E_V_A-_M_I_B.

     register_alarms(Alarms) -> void()

          Types
               Alarms  =  [{Name,  Trap,  Treatment,   Community,
               Func}]



Ericsson UtvecklingsLAaBst change: eva  2.0.2.1                   1






eva_snmp_adaptation(3)ERLANG MODULE DEFINITIOeNva_snmp_adaptation(3)



               Name = Trap = atom()
               Func  =  fun(#alarm)  ->  {ok,  ObjOID,  CauseOID,
               SnmpVarbinds}
               Treatment = none | snmpTrap
               Community = string()
               ObjOid = CauseOid = [integer()]

          This function must be used to register an EVA alarm  as
          an  SNMP alarm. It is used to associate each event with
          the corresponding SNMP trap and an Erlang  instrumenta-
          tion  function which translates the #_a_l_a_r_m into a trap.
          The corresponding _T_r_a_p must be defined in an SNMP  MIB.
          _T_r_e_a_t_m_e_n_t  defines how this alarm is treated when it is
          generated. If it is _s_n_m_p_T_r_a_p, it is sent to the _C_o_m_m_u_n_-
          _i_t_y.

          When the EVA alarm _N_a_m_e is generated by an application,
          the  adaptation  calls _F_u_n_c(#_a_l_a_r_m). The purpose of the
          _F_u_n_c is to translate the Erlang record #_a_l_a_r_m into SNMP
          values.  _O_b_j_O_I_D  is an OBJECT IDENTIFIER representation
          of the #_a_l_a_r_m._s_e_n_d_e_r, _C_a_u_s_e_O_I_D is an OBJECT  IDENTIFIER
          representation of the #_a_l_a_r_m._c_a_u_s_e, and _S_n_m_p_V_a_r_b_i_n_d_s is
          a list of extra variable bindings for  the  trap.  This
          list is as defined for _s_n_m_p:_s_e_n_d__t_r_a_p.

          The _a_l_a_r_m record is defined in  _e_v_a._h_r_l,  available  in
          the _i_n_c_l_u_d_e directory in the distribution.

     register_events(Events) -> void()

          Types
               Events  =  [{Name,  Trap,  Treatment,   Community,
               Func}]
               Name = Trap = atom()
               Func = fun(#event) -> {ok, SnmpVarbinds}
               Treatment = none | snmpTrap
               Community = string()

          This function must be used to register an EVA event  as
          an  SNMP event. It is used to associate each event with
          the corresponding SNMP trap and an Erlang  instrumenta-
          tion  function which translates the #_e_v_e_n_t into a trap.
          The corresponding _T_r_a_p must be defined in an SNMP  MIB.
          _T_r_e_a_t_m_e_n_t  defines how this event is treated when it is
          generated. If it is _s_n_m_p_T_r_a_p it is sent to the  _C_o_m_m_u_n_-
          _i_t_y.

          When the EVA event _N_a_m_e is generated by an application,
          the  adaptation  calls _F_u_n_c(#_e_v_e_n_t). The purpose of the
          _F_u_n_c is to translate the Erlang record #_e_v_e_n_t into SNMP
          values.  The  _S_n_m_p_V_a_r_b_i_n_d_s  is a list of extra variable
          bindings for the trap. This  list  is  as  defined  for



Ericsson UtvecklingsLAaBst change: eva  2.0.2.1                   2






eva_snmp_adaptation(3)ERLANG MODULE DEFINITIOeNva_snmp_adaptation(3)



          _s_n_m_p:_s_e_n_d__t_r_a_p.

          The _e_v_e_n_t record is defined in  _e_v_a._h_r_l,  available  in
          the _i_n_c_l_u_d_e directory in the distribution.

     start_link() -> {ok, Pid} | {error, Reason}

          Starts the EVA SNMP adaptation. This  function  can  be
          used  to include the service in a supervisor. Normally,
          functions  in  the  supervisor  _e_v_a__s_u_p  can  be   used
          instead.

          The function _c_r_e_a_t_e__t_a_b_l_e_s/_1 must be called before  the
          service is started.

          An EVA adaptation is always implemented as a  _g_e_n__e_v_e_n_t
          handler.  So  is  _e_v_a__s_n_m_p__a_d_a_p_t_a_t_i_o_n.  But in order to
          supervise this service  from  an  ordinary  supervisor,
          this  function  creates  a  process that supervises the
          _g_e_n__e_v_e_n_t handler.

Instrumentation Functions for the OTP-EVA-MIB
     In some cases, other adaptations may need access to the SNMP
     specific  data in EVA. To do this, the instrumentation func-
     tions for the SNMP objects can be used.  These  instrumenta-
     tion  functions  takes  the  arguments and return the values
     defined in the application _s_n_m_p.

EXPORTS
     alarmTable(Op, RowIndex, Cols) -> InstrumRet

          Instrumentation function for _a_l_a_r_m_T_a_b_l_e. This  function
          assumes  that  access  checks are made according to the
          MIB, so it may crash if,  for  example,  _a_l_a_r_m_C_l_a_s_s  is
          set.

     curAlarmTable(Op, RowIndex, Cols) -> InstrumRet

          Instrumentation function  for  _c_u_r_r_e_n_t_A_l_a_r_m_T_a_b_l_e.  This
          function  assumes that access checks are made according
          to the MIB, so it may crash if,  for  example,  _c_u_r_r_e_n_-
          _t_A_l_a_r_m_S_e_v_e_r_i_t_y is set.

     curAlarmLastTimeChanged(get) -> InstrumRet

          Instrumentation function for _c_u_r_r_e_n_t_A_l_a_r_m_L_a_s_t_T_i_m_e_S_e_n_t.

     eventTable(Op, RowIndex, Cols) -> InstrumRet

          Instrumentation function for _e_v_e_n_t_T_a_b_l_e. This  function
          assumes  that  access  checks are made according to the
          MIB, so it may crash if, for example, _e_v_e_n_t_T_r_a_p_N_a_m_e  is



Ericsson UtvecklingsLAaBst change: eva  2.0.2.1                   3






eva_snmp_adaptation(3)ERLANG MODULE DEFINITIOeNva_snmp_adaptation(3)



          set.

SEE ALSO
     eva(3), eva_sup(3), gen_event(3), snmp(3)

AUTHOR
     Martin Bjorklund - support@erlang.ericsson.se
















































Ericsson UtvecklingsLAaBst change: eva  2.0.2.1                   4



