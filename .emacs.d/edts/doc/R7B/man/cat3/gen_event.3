


gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



MODULE
     gen_event - A Generic Event Handling Behavior.

DESCRIPTION
     _g_e_n__e_v_e_n_t provides a general framework for building applica-
     tion specific event handling routines. Event managers can be
     built for tasks like:

       * error logging

       * alarm handling

       * call record logging

       * debugging

       * equipment management.

     All event handlers are written as generic event managers and
     share a common set of interface functions. The generic parts
     of the event manager contains functions for debugging,  han-
     dling the termination of the parent, and error handling.

     The idea is that a server, the event manager, implements all
     server  specific  parts,  while  event handlers are added in
     order to handle specific events. Each event  handler  should
     be  implemented  in  a  module (called the callback module).
     Each  callback  module  contains  callback  functions  (e.g.
     _h_a_n_d_l_e__e_v_e_n_t/_2)  which are called whenever the event manager
     receives a corresponding message.

     Event handlers can be written which act on  _a_l_l  events,  on
     _s_o_m_e  of  the  events,  or on some particular combination of
     events. Event handlers can also be manipulated  at  runtime.
     In particular, an event handler can be:

       * installed

       * removed

       * replaced by a different handler

     We can even install several event handlers in the same event
     manager.

     The relationship between  the  generic  interface  functions
     (and  received  messages)  and the callback functions can be
     illustrated as follows:

     Callback module  gen_event
     ----------------         ---------
     gen_event:add_handler    ----->



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  1






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



     Module:init/1            <-----

     gen_event:notify         ----->
     Module:handle_event/2    <-----

     gen_event:call           ----->
     Module:handle_call/2     <-----

     gen_event:delete_handler ----->
     Module:terminate/2       <-----

     gen_event:stop           ----->
     Module:terminate/2       <-----

     gen_event:swap_handler   ----->
     Mod1:terminate/2         <-----
     Mod2:init/1              <-----

     Module:handle_info/2     <-----   other message
                                       received.

     The event manager can be debugged using the _s_y_s module.


EXPORTS
     start() -> ServerRet
     start(Name) -> ServerRet
     start_link() -> ServerRet
     start_link(Name) -> ServerRet

          Types
               Name = {local, atom()} | {global, atom()}
               ServerRet = {ok, Pid} | {error, Reason}
               Pid = pid()
               Reason = {already_started, Pid} | term()

          This function starts an event manager. If  the  manager
          is started without _N_a_m_e, it can only be called by using
          the returned _P_i_d identifier. If started with _N_a_m_e,  the
          name is registered locally or globally.

          An event manager started with _s_t_a_r_t/_0 or  _s_t_a_r_t/_1  does
          not  care  about the parent. This means that the parent
          is not handled explicitly in the generic manager  part.
          If  started in this manner, these functions _m_u_s_t _n_o_t be
          used if the event manager is a worker in a  supervision
          tree.

          A manager started with _s_t_a_r_t__l_i_n_k/_0 or _s_t_a_r_t__l_i_n_k/_1  is
          initially  linked  to  the caller - the parent - and it
          will terminate whenever the parent process  terminates,
          with  the  same  reason as the parent. An event manager



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  2






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



          always traps exit signals, so the _t_e_r_m_i_n_a_t_e/_2  callback
          function  is  called  for  each  added event handler in
          order to clean up before  termination.  If  started  in
          this  manner,  these  functions  _s_h_o_u_l_d  be used if the
          event manager is a worker in a supervision tree.

     stop(EventMgr) -> ok

          Types
               EventMgr = Name | {Name, Node} | {global, Name}  |
               Pid
               Name = atom()
               Node = atom()
               Pid = pid()

          Terminates the event manager. The _t_e_r_m_i_n_a_t_e/_2  callback
          function  is  called  for  each  added event handler in
          order to clean up. The _A_r_g argument of each _t_e_r_m_i_n_a_t_e/_2
          will have the value _s_t_o_p.

     notify(EventMgr, Event) -> ok
     sync_notify(EventMgr, Event) -> ok

          Types
               EventMgr = Name | {Name, Node} | {global, Name}  |
               Pid
               Name = atom()
               Node = atom()
               Pid = pid()
               Event = term()

          Sends an  event  notification  to  the  _E_v_e_n_t_M_g_r  event
          manager.  The  _E_v_e_n_t  sent can be any Erlang term. How-
          ever, the added event  handlers  must  know  about  the
          term,  and  for  this  reason  an  event format must be
          specified for each event manager.

          The event manager calls each associated  _h_a_n_d_l_e__e_v_e_n_t/_2
          callback  function  to  inform each added event handler
          about the event.

          The  _n_o_t_i_f_y/_2   function   is   asynchronous,   whereas
          _s_y_n_c__n_o_t_i_f_y/_2  is  synchronous  in  the  sense  that it
          returns when all handlers have handled the _E_v_e_n_t.

     add_handler(EventMgr, Handler, Args) -> ok | ErrorRet

          Types
               EventMgr = Name | {Name, Node} | {global, Name}  |
               Pid
               Name = atom()
               Node = atom()



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  3






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



               Pid = pid()
               Handler = Module | {Module, Id}
               Module = atom()
               Id = term()
               Args = term()
               ErrorRet = term()

          This function adds a new event handler to the  _E_v_e_n_t_M_g_r
          event manager. The callback module of the event handler
          is _M_o_d_u_l_e and the name of the handler is  _H_a_n_d_l_e_r.  The
          _I_d  term  is  used  to identify a specific handler when
          installing several handlers  which  all  use  the  same
          callback    module.   _A_r_g_s   is   supplied   with   the
          _M_o_d_u_l_e:_i_n_i_t(_A_r_g_s) call in order to initialize the event
          handler.  _E_r_r_o_r_R_e_t  is any unexpected return value from
          the _i_n_i_t/_1 function.

     add_sup_handler(EventMgr, Handler, Args) -> ok | ErrorRet

          Types
               EventMgr = Name | {Name, Node} | {global, Name}  |
               Pid
               Name = atom()
               Node = atom()
               Pid = pid()
               Handler = Module | {Module, Id}
               Module = atom()
               Id = term()
               Args = term()
               ErrorRet = term()

          Adds a new supervised event  handler  to  the  _E_v_e_n_t_M_g_r
          event  manager. The handler is added in the manner pre-
          viously described for the _a_d_d__h_a_n_d_l_e_r/_3 function.

          Whenever the process which evaluated this function ter-
          minates,  the _H_a_n_d_l_e_r is automatically deleted from the
          _E_v_e_n_t_M_g_r. The _M_o_d_u_l_e:_t_e_r_m_i_n_a_t_e/_2 function is called  in
          order  to  clean  up  with _A_r_g equal to {_s_t_o_p, _R_e_a_s_o_n}.
          _R_e_a_s_o_n is the termination reason of the process.

          Whenever the _H_a_n_d_l_e_r is deleted from the _E_v_e_n_t_M_g_r,  the
          process which evaluated this function receives the mes-
          sage {_g_e_n__e_v_e_n_t__E_X_I_T, _H_a_n_d_l_e_r, _R_e_a_s_o_n}. _R_e_a_s_o_n  is  one
          of the following:

            * _n_o_r_m_a_l.  The  handler  has  been  removed  by   the
              _d_e_l_e_t_e__h_a_n_d_l_e_r/_3  function,  or  _r_e_m_o_v_e__h_a_n_d_l_e_r has
              been returned by a callback function (see below).

            * _s_h_u_t_d_o_w_n. The _E_v_e_n_t_M_g_r process terminates,  or  the
              parent  process  of  the  handler  terminates  (the



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  4






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



              parent process could have  sent  an  explicit  _E_X_I_T
              signal  to  the _E_v_e_n_t_M_g_r process and expects a mes-
              sage in response).

            * {_s_w_a_p_p_e_d, _N_e_w_H_a_n_d_l_e_r, _N_e_w_P_a_r_e_n_t}. The  handler  has
              been replaced by _N_e_w_H_a_n_d_l_e_r (see below).

            * _E_r_r_o_r. The handler crashed due to _E_r_r_o_r.  _E_r_r_o_r  is
              any Erlang term (_t_e_r_m()).

     delete_handler(EventMgr, Handler, Args) -> DelRet

          Types
               EventMgr = Name | {Name, Node} | {global, Name}  |
               Pid
               Name = atom()
               Node = atom()
               Pid = pid()
               Handler = Module | {Module, Id}
               Module = atom()
               Id = term()
               Args = term()
               DelRet = term() | {error, module_not_found}

          Removes the event handler  _H_a_n_d_l_e_r  from  the  _E_v_e_n_t_M_g_r
          event    manager.    _A_r_g_s    is   supplied   with   the
          _M_o_d_u_l_e:_t_e_r_m_i_n_a_t_e(_A_r_g_s, ...) call in order to  clean  up
          the  handler. Normally, it is preferable if _A_r_g_s is the
          atom _s_t_o_p as described for _s_t_o_p/_1.

          _D_e_l_R_e_t can be any Erlang  term  as  returned  from  the
          _M_o_d_u_l_e:_t_e_r_m_i_n_a_t_e/_2  function.  This  value  can be used
          later on as a start argument (_A_r_g_s = _D_e_l_R_e_t)  in  order
          to restart (re-add) the same event handler with its old
          internal state. See also _s_w_a_p__h_a_n_d_l_e_r/_3 below.

     swap_handler(EventMgr, OldHandler, NewHandler) -> SwRet

          Types
               EventMgr = Name | {Name, Node} | {global, Name}  |
               Pid
               Name = atom()
               Node = atom()
               Pid = pid()
               OldHandler = {Handler1, Args1}
               NewHandler = {Handler2, Args2}
               Handler1 = Module1 | {Module1, Id1}
               Handler2 = Module2 | {Module2, Id2}
               Module1 = Module2 = atom()
               Id1 = Id2 = term()
               Args1 = Args2 = term()
               SwRet = ok | {error, SwErr}



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  5






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



               SwErr = term()

          Removes the _H_a_n_d_l_e_r_1 event handler and installs the new
          _H_a_n_d_l_e_r_2 event handler. If appropriate, the new handler
          can inherit the internal state of the old handler.

          _M_o_d_u_l_e_1:_t_e_r_m_i_n_a_t_e(_A_r_g_s_1, ...) is called to  remove  the
          old  handler. The return value of the _t_e_r_m_i_n_a_t_e/_2 func-
          tion is passed to the new handler as _T_e_r_m_R_e_t below. The
          new    handler    is   initialized   by   calling   the
          _M_o_d_u_l_e_2:_i_n_i_t({_A_r_g_s_2,  _T_e_r_m_R_e_t})  function  in  the  new
          callback  module.  If an error occurs, the return value
          of the _i_n_i_t/_1 function is returned as _S_w_E_r_r. To  ignore
          the  internal  state  of  the  old handler, the _T_e_r_m_R_e_t
          value should be ignored in the _i_n_i_t/_1 function  of  the
          new handler.

          If _H_a_n_d_l_e_r_1 was added as a supervised handler, with the
          _a_d_d__s_u_p__h_a_n_d_l_e_r/_3  function  for  example, the _H_a_n_d_l_e_r_2
          inherits the same parent. Thus, _H_a_n_d_l_e_r_2 will be super-
          vised by the same process as _H_a_n_d_l_e_r_1.

     swap_sup_handler(EventMgr, OldHandler, NewHandler) -> SwRet

          Types
               EventMgr = Name | {Name, Node} | {global, Name}  |
               Pid
               Name = atom()
               Node = atom()
               Pid = pid()
               OldHandler = {Handler1, Args1}
               NewHandler = {Handler2, Args2}
               Handler1 = Module1 | {Module1, Id1}
               Handler2 = Module2 | {Module2, Id2}
               Module1 = Module2 = atom()
               Id1 = Id2 = term()
               Args1 = Args2 = term()
               SwRet = ok | {error, SwErr}
               SwErr = term()

          Removes the _H_a_n_d_l_e_r_1 event handler and installs the new
          _H_a_n_d_l_e_r_2 event handler in the same manner described for
          the _s_w_a_p__h_a_n_d_l_e_r/_3 function above.

          The _H_a_n_d_l_e_r_2 event handler will be  supervised  by  the
          process  that  evaluated  this  function, in the manner
          described for the _a_d_d__s_u_p__h_a_n_d_l_e_r/_3 function above.

     call(EventMgr, Handler, Query) -> Ret
     call(EventMgr, Handler, Query, Timeout) -> Ret

          Types



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  6






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



               EventMgr = Name | {Name, Node} | {global, Name}  |
               Pid
               Name = atom()
               Node = atom()
               Pid = pid()
               Handler = Module | {Module, Id}
               Module = atom()
               Id = term()
               Query = term()
               Timeout = int() > 0 | infinity
               Ret = Reply | {error, ErrCall}
               Reply = term()
               ErrCall = bad_module | term()

          Sends a request to the specified event handler  _H_a_n_d_l_e_r
          in  the _E_v_e_n_t_M_g_r event manager. _Q_u_e_r_y can be any Erlang
          term, but it must be recognized by the  event  handler.
          To   handle   the   request,   the   callback  function
          _M_o_d_u_l_e:_h_a_n_d_l_e__c_a_l_l/_2 is called. _b_a_d__m_o_d_u_l_e is  returned
          if  the  _M_o_d_u_l_e  event handler does not exist. _R_e_p_l_y is
          the returned _R_e_p_l_y  value  of  the  callback  function,
          while _E_r_r_C_a_l_l is returned as an error descriptor if the
          callback module fails.

          _T_i_m_e_o_u_t should be set to some reasonable value (in mil-
          liseconds).  The  special value _i_n_f_i_n_i_t_y can be used if
          the user has no idea how long the request  is  supposed
          to take. If _T_i_m_e_o_u_t is not specified, the default value
          is _5_0_0_0.

          If _T_i_m_e_o_u_t has an integer value  and  no  response  has
          been  delivered  within  _T_i_m_e_o_u_t milliseconds, then the
          client will terminate with reason {_t_i_m_e_o_u_t, {_g_e_n__e_v_e_n_t,
          _c_a_l_l, [_E_v_e_n_t_M_g_r, _H_a_n_d_l_e_r, _Q_u_e_r_y, _T_i_m_e_o_u_t]}}.

     which_handlers(EventMgr) -> [Handler]

          Types
               EventMgr = Name | {Name, Node} | {global, Name}  |
               Pid
               Name = atom()
               Node = atom()
               Pid = pid()
               Handler = Module | {Module, Id}
               Module = atom()
               Id = term()

          Asks the _E_v_e_n_t_M_g_r  event  manager  about  active  event
          handlers.  This  function  returns a list of each added
          event handler.





Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  7






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



Callback Functions
     The following functions should be exported from a  _g_e_n__e_v_e_n_t
     callback module.

EXPORTS
     Module:init(Args) -> InitRes

          Types
               Args = term()
               InitRes = {ok, State} | Other
               State = term()
               Other = term()

          Whenever a new event  handler  is  added  to  an  event
          manager,  the _i_n_i_t/_1 function in the specified callback
          module is called in order to initialise the handler. If
          the initialization function succeeds, it is supposed to
          return the initialized internal _S_t_a_t_e of  the  handler.
          The _S_t_a_t_e is passed to all subsequent callback function
          calls to the handler.

          The _A_r_g_s argument supplied to the  _i_n_i_t/_1  function  is
          the same argument that is supplied to, for example, the
          _a_d_d__h_a_n_d_l_e_r/_3 function.

     Module:handle_event(Event, State) -> EventRet

          Types
               Event = term()
               EventRet = {ok, State1}  |  {swap_handler,  Args1,
               State1, Handler2, Args2} | remove_handler | Other
               Args1 = Args2 = term()
               State1 = State = term()
               Handler2 = Module | {Module, Id}
               Module = atom()
               Id = term()
               Other = term()

          For each event handler, this function is called by  the
          event  manager  whenever the event manager has received
          an  event.  _E_v_e_n_t  is   the   value   sent   with   the
          _g_e_n__e_v_e_n_t:_n_o_t_i_f_y/_2  function call. (Any other unmatched
          messages which are received by the event manager - such
          as   {'_E_X_I_T',   _P_i_d,   _W_h_y}   -   are  processed  using
          _h_a_n_d_l_e__i_n_f_o/_2)

          Normally, the event handler returns a  new  state  with
          {_o_k,  _S_t_a_t_e_1}  after  the event has been processed. The
          event handler can also remove itself or swap to another
          handler.   If   the   handler   is   removed  (returned
          _r_e_m_o_v_e__h_a_n_d_l_e_r), the _t_e_r_m_i_n_a_t_e/_2 callback  function  is
          called  with  _r_e_m_o_v_e__h_a_n_d_l_e_r as the first argument. The



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  8






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



          swap  procedure  is   the   same   as   described   for
          _s_w_a_p__h_a_n_d_l_e_r/_3.

          If the  _h_a_n_d_l_e__e_v_e_n_t/_2  function  crashes,  or  returns
          _O_t_h_e_r,  the  _M_o_d_u_l_e:terminate/2  function  is called in
          order to clean up (if  possible)  and  the  handler  is
          removed  from  the  event  manager. The _A_r_g argument of
          _M_o_d_u_l_e:terminate/2 is {_e_r_r_o_r, _R_e_a_s_o_n}, where _R_e_a_s_o_n  is
          {'_E_X_I_T', _W_h_y} if crashed, or _O_t_h_e_r.

     Module:handle_call(Query, State) -> CallRet

          Types
               Query = term()
               CallRet = {ok,  Reply,  State1}  |  {swap_handler,
               Reply,   Args1,   State1,   Handler2,   Args2}   |
               {remove_handler, Reply} | Other
               Reply = term()
               Args1 = Args2 = term()
               State1 = State = term()
               Handler2 = Module | {Module, Id}
               Module = atom()
               Id = term()
               Other = term()

          Handles a request generated by a _c_a_l_l/_3 function  call.
          The  request is dedicated to this handler. _Q_u_e_r_y can be
          any Erlang term recognized by the  event  handler.  The
          type  of  queries  which are handled is a design issue.
          _R_e_p_l_y is any Erlang term which represents the reply  to
          the call. _R_e_p_l_y is returned by the _c_a_l_l/_3 function.

          Normally, the event handler returns a  new  state  with
          {_o_k,  _R_e_p_l_y, _S_t_a_t_e_1} after the call has been processed.
          The event handler can also decide to remove  itself  or
          to  swap  to  another handler. If the handler should be
          removed (returned {_r_e_m_o_v_e__h_a_n_d_l_e_r,  _R_e_p_l_y}),  the  _t_e_r_-
          _m_i_n_a_t_e/_2    callback    function    is    called   with
          _r_e_m_o_v_e__h_a_n_d_l_e_r as the first  argument.  The  swap  pro-
          cedure is the same as described for _s_w_a_p__h_a_n_d_l_e_r/_3.

          If  the  _h_a_n_d_l_e__c_a_l_l/_2  function  crashes,  or  returns
          _O_t_h_e_r,  the  _M_o_d_u_l_e:terminate/2  function  is called in
          order to clean up (if  possible)  and  the  handler  is
          removed  from  the  event  manager. The _A_r_g argument of
          _M_o_d_u_l_e:terminate/2 is {_e_r_r_o_r, _R_e_a_s_o_n}, where _R_e_a_s_o_n  is
          {'_E_X_I_T', _W_h_y} if crashed, or _O_t_h_e_r.

     Module:handle_info(Info, State) -> EventRet

          Types
               Info = term()



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  9






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



               EventRet = {ok, State1}  |  {swap_handler,  Args1,
               State1, Handler2, Args2} | remove_handler | Other
               Args1 = Args2 = term()
               State1 = State = term()
               Handler2 = Module | {Module, Id}
               Module = atom()
               Id = term()
               Other = term()

          This callback function handles events other than _n_o_t_i_f_y
          and _c_a_l_l, which are received by the event manager. Typ-
          ical events, or messages, which are handled include:

            {'_E_X_I_T', _P_i_d, _R_e_a_s_o_n}:
                If  the   process   traps   exit   signals,   the
                corresponding messages are handled here.

            {_n_o_d_e_d_o_w_n, _N_o_d_e}:
                If  another  Erlang  node   is   monitored,   the
                corresponding _n_o_d_e_d_o_w_n message is handled here.

            _M_s_g:
                All other messages, sent  to  the  event  manager
                using _E_v_e_n_t_M_g_r ! _M_s_g, are also handled here.

  Note:
     Communication  with  the  event  manager  should  always  go
     through the above interface functions.


     The _E_v_e_n_t_R_e_t value is the same as for _h_a_n_d_l_e__e_v_e_n_t.

     Module:terminate(Arg, State) -> TermRet

          Types
               Arg = stop | remove_handler |  {error,  term()}  |
               {stop, term()} | term()
               TermRet = term()

          Cleans up the event handler before it is  removed  from
          the  event  manager.  If _A_r_g is _s_t_o_p or _r_e_m_o_v_e__h_a_n_d_l_e_r,
          the event handler is supposed  to  be  removed  and  no
          other  handler  is  supposed  to take over the internal
          state. In this case, _T_e_r_m_R_e_t is ignored.

          If another handler is taking over the internal state of
          this  handler,  this  should be marked with _A_r_g as some
          other Erlang term, _s_w_a_p for example. In this case,  the
          event  handler  should return the internal state _S_t_a_t_e,
          or parts of the state, in a way that is  recognized  by
          the handler which is supposed to take over.




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                 10






gen_event(3)        ERLANG MODULE DEFINITION         gen_event(3)



          _A_r_g is  {_e_r_r_o_r,  _E_r_r_o_r}  if  a  callback  function  has
          crashed  or  returned something inappropriate. _E_r_r_o_r is
          {'_E_X_I_T', _W_h_y} if it has crashed.

          _A_r_g is {_s_t_o_p, _R_e_a_s_o_n} if the  parent  of  a  supervised
          event handler has terminated. _R_e_a_s_o_n is the termination
          reason for the parent process.

     Module:code_change(OldVsn, State, Extra) -> {ok, NewState}

          Types
               OldVsn = undefined | term()
               State = term()
               Extra = term()
               NewState = term()

          This function is called when  a  code  change  is  per-
          formed, which implies that the internal data structures
          of the _M_o_d_u_l_e event handler has changed. This  function
          is  supposed  to  convert the old state to the new one.
          _O_l_d_V_s_n is the _v_s_n attribute of the old version  of  the
          module.  If  no  such  attribute  was defined, the atom
          _u_n_d_e_f_i_n_e_d is sent. _E_x_t_r_a is an optional term, which  is
          typically defined in the release upgrade script.

System events
     The  gen_event  behaviour  generates  the  following  system
     events, which are handled by the _s_y_s module:

       * {_i_n, _M_s_g} when a message is received.

See also
     sys(3)

AUTHORS
     Joe Armstrong - support@erlang.ericsson.se
     Magnus Froberg - support@erlang.ericsson.se
     Martin Bjorklund - support@erlang.ericsson.se

















Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                 11



