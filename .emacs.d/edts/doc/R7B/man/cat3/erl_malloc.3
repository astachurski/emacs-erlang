


erl_malloc(3)          C LIBRARY FUNCTIONS          erl_malloc(3)



NAME
     erl_malloc - Memory Allocation Functions

DESCRIPTION
     This module provides functions for allocating and deallocat-
     ing memory.


EXPORTS
     ETERM *erl_alloc_eterm(etype)

          Types
               unsigned char etype;

          This function allocates an (_E_T_E_R_M)  structure.  Specify
          _e_t_y_p_e as one of the following constants:

            * ERL_STRING

            * ERL_INTEGER

            * ERL_U_INTEGER /* _u_n_s_i_g_n_e_d _i_n_t_e_g_e_r */

            * ERL_ATOM

            * ERL_PID /* _E_r_l_a_n_g _p_r_o_c_e_s_s _i_d_e_n_t_i_f_i_e_r */

            * ERL_PORT

            * ERL_REF /* _E_r_l_a_n_g _r_e_f_e_r_e_n_c_e */

            * ERL_LIST

            * ERL_TUPLE

            * ERL_BINARY

            * ERL_FLOAT

            * ERL_VARIABLE

            * ERL_SMALL_BIG /* _b_i_g_n_u_m */

            * ERL_U_SMALL_BIG /* _b_i_g_n_u_m */

          _E_R_L__S_M_A_L_L__B_I_G  and  _E_R_L__U__S_M_A_L_L__B_I_G  are  for  creating
          Erlang _b_i_g_n_u_m_s, which can contain integers of arbitrary
          size. The size of  an  integer  in  Erlang  is  machine
          dependent,  but in general any integer larger than 2^28
          requires a bignum.





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               1






erl_malloc(3)          C LIBRARY FUNCTIONS          erl_malloc(3)



     void erl_eterm_release(void)

          Clears the freelist, where blocks are placed when  they
          are      released      by      _e_r_l__f_r_e_e__t_e_r_m()      and
          _e_r_l__f_r_e_e__c_o_m_p_o_u_n_d().

     void erl_eterm_statistics(allocated, freed)

          Types
               long *allocated;
               long *freed;

          _a_l_l_o_c_a_t_e_d and _f_r_e_e_d are initialized to contain informa-
          tion  about  the  fix-allocator  used to allocate ETERM
          components. _a_l_l_o_c_a_t_e_d is the number of blocks currently
          allocated  to ETERM objects. _f_r_e_e_d is the length of the
          freelist,  where  blocks  are  placed  when  they   are
          released by _e_r_l__f_r_e_e__t_e_r_m() and _e_r_l__f_r_e_e__c_o_m_p_o_u_n_d().

     void erl_free_array(array, size)

          Types
               ETERM **array;
               int size;

          This function frees an array of Erlang terms.

          _a_r_r_a_y is an array of ETERM* objects.

          _s_i_z_e is the number of terms in the array.

     void erl_free_term(t)

          Types
               ETERM *t;

          Use this function to free an Erlang term.

     void erl_free_compound(t)

          Types
               ETERM *t;

          Normally it is the programmer's responsibility to  free
          each Erlang term that has been returned from any of the
          _e_r_l__i_n_t_e_r_f_a_c_e functions.  However  since  many  of  the
          functions  that  build  new  Erlang terms in fact share
          objects with other existing terms, it may be  difficult
          for  the  programmer  to  maintain pointers to all such
          terms in order to free them individually.





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               2






erl_malloc(3)          C LIBRARY FUNCTIONS          erl_malloc(3)



          _e_r_l__f_r_e_e__c_o_m_p_o_u_n_d() will recursively free  all  of  the
          sub-terms  associated with a given Erlang term, regard-
          less of whether we are still holding  pointers  to  the
          sub-terms.

          There is an example in the User Manual under  "Building
          Terms and Patterns"

     void erl_malloc(size)

          Types
               long size;

          This function calls the standard _m_a_l_l_o_c() function.

     void erl_free(ptr)

          Types
               void *ptr;

          This function calls the standard _f_r_e_e() function.

AUTHORS
     T.Tornkvist - support@erlang.ericsson.se
     Gordon Beaton - support@erlang.ericsson.se






























Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               3



