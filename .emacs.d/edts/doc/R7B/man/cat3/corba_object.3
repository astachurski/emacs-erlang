


corba_object(3)     ERLANG MODULE DEFINITION      corba_object(3)



MODULE
     corba_object - The Corba Object interface functions

DESCRIPTION
     This module contains the Corba  Object  interface  functions
     that can be called for all objects.


EXPORTS
     get_interface(Object) -> InterfaceDef

          Types
               Object = #objref
               InterfaceDef = term()

          This function returns the  full  interface  description
          for an object.

     is_nil(Object) -> boolean()

          Types
               Object = #objref

          This function checks if the object reference has a  nil
          object value, which denotes no object. It is the refer-
          ence that is  test  and  no  object  implementation  is
          involved in the test.

     is_a(Object, Logical_type_id) -> Return

          Types
               Object = #objref
               Logical_type_id = string()

          The _L_o_g_i_c_a_l__t_y_p_e__i_d is a string that is  a  share  type
          identifier  (repository  id). The function returns true
          if the object is an instance of that type or an  ances-
          tor of the "most derived" type of that object.

          Note: Other ORB suppliers may not support this function
          completely  according to the OMG specification. Thus, a
          _i_s__a call may raise an exception or respond  unpredict-
          able if the Object is located on a remote node.

     is_remote(Object) -> boolean()

          Types
               Object = #objref

          This function returns true if an  object  reference  is
          remote otherwise false.




Ericsson UtvecklingsLAaBst change: orber  3.1.8                   1






corba_object(3)     ERLANG MODULE DEFINITION      corba_object(3)



     non_existent(Object) -> Return

          Types
               Object = #objref
               Return = boolean() | {EXCEPTION, _}

          This function can be used to test  if  the  object  has
          been  destroyed.  It  does  this  without  invoking any
          application level code. The  ORB  returns  true  if  it
          knows that the object is destroyed otherwise false.

          Note: The OMG have specified two  different  operators,
          __n_o_t__e_x_i_s_t_e_n_t   (CORBA   version   2.0   and  2.2)  and
          __n_o_n__e_x_i_s_t_e_n_t (CORBA version 2.3), to be used for  this
          function. It is not mandatory to support both versions.
          Thus, a _n_o_n__e_x_i_s_t_e_n_t call may  raise  an  exception  or
          respond  unpredictable  if  the  Object is located on a
          remote node. Depending  on  which  version,  ORB:s  you
          intend to communicate with supports, you can either use
          this function or _n_o_t__e_x_i_s_t_e_n_t/_1.

     not_existent(Object) -> Return

          Types
               Object = #objref
               Return = boolean() | {EXCEPTION, _}

          This function is implemented due to Interoperable  pur-
          poses.  Behaves  as  _n_o_n__e_x_i_s_t_e_n_t  except  the operator
          __n_o_t__e_x_i_s_t_e_n_t is used  when  communicating  with  other
          ORB:s.

     is_equivalent(Object, OtherObject) -> boolean()

          Types
               Object = #objref
               OtherObject = #objref

          This function is used to determine if two object refer-
          ences  are  equivalent so far the ORB easily can deter-
          mine. It returns _t_r_u_e if the target object reference is
          equal  to  the  other object reference and _f_a_l_s_e other-
          wise.

     hash(Object, Maximum) -> int()

          Types
               Object = #objref
               Maximum = int()

          This function returns a hash value based on the  object
          reference  that  not will change during the lifetime of



Ericsson UtvecklingsLAaBst change: orber  3.1.8                   2






corba_object(3)     ERLANG MODULE DEFINITION      corba_object(3)



          the object. The _M_a_x_i_m_u_m  parameter  denotes  the  upper
          bound of the value.

AUTHOR
     support - support@erlang.ericsson.se


















































Ericsson UtvecklingsLAaBst change: orber  3.1.8                   3



