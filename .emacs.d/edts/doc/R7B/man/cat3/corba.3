


corba(3)            ERLANG MODULE DEFINITION             corba(3)



MODULE
     corba - The functions on CORBA module level

DESCRIPTION
     This module contains functions that  are  specified  on  the
     CORBA  module  level.  It  also  contains some functions for
     creating and disposing objects.


EXPORTS
     create(Module, TypeID) -> Object
     create(Module, TypeID, Env) -> Object
     create(Module, TypeID, Env, Optons1) -> Object
     create_link(Module, TypeID) -> Object
     create_link(Module, TypeID, Env) -> Object
     create_link(Module, TypeID, Env, Options2) -> Reply

          Types
               Module = atom()
               TypeID = string()
               Env = term()
               Options1 = [{persistent, Bool}  |  {regname,  Reg-
               Name}]
               Options2 = [{sup_child, Bool} | {persistent, Bool}
               | {regname, RegName} | {pseudo, Bool}]
               RegName = {local, atom()} | {global, term()}
               Reply = #objref | {ok, Pid, #objref}
               Bool = true | false
               Object = #objref

          These functions start a new server object. If you start
          it  without _R_e_g_N_a_m_e it can only be accessed through the
          returned object key. Started with a _R_e_g_N_a_m_e the name is
          registered locally or globally.

          _T_y_p_e_I_D is the repository ID of the server  object  type
          and      could      for      example      look     like
          "IDL:StackModule/Stack:1.0".

          _M_o_d_u_l_e is the name of the interface API module.

          _E_n_v is the arguments passed which will be passed to the
          implementations _i_n_i_t call-back function.

          A server started with create/2,  create/3  or  create/4
          does  not  care  about the parent, which means that the
          parent is not handled explicitly in the generic process
          part.

          A server started with  create_link2,  create_link/3  or
          create_link/4  is  initially  linked to the caller, the
          parent, and  it  will  terminate  whenever  the  parent



Ericsson UtvecklingsLAaBst change: orber  3.1.8                   1






corba(3)            ERLANG MODULE DEFINITION             corba(3)



          process  terminates,  and  with  the same reason as the
          parent. If the  server  traps  exits,  the  terminate/2
          call-back  function  is  called  in  order  to clean up
          before the termination. These functions should be  used
          if the server is a worker in a supervision tree.

          If you use the option {_s_u_p__c_h_i_l_d,  _t_r_u_e}  create_link/4
          will  return {_o_k, _P_i_d, #_o_b_j_r_e_f}, otherwise #_o_b_j_r_e_f, and
          make it possible to start  a  server  as  a  supervisor
          child (stdlib-1.7 or later).

          If you use the option {_p_e_r_s_i_s_t_e_n_t, _t_r_u_e} you also  must
          use the option {_r_e_g_n_a_m_e, {_g_l_o_b_a_l, _N_a_m_e}}. This combina-
          tion makes it possible to tell the difference between a
          server permanently terminated or in the process of res-
          tarting.

          The option {_p_s_e_u_d_o, _t_r_u_e}, allow us to create an object
          which  is  not a server. Using {_p_s_e_u_d_o, _t_r_u_e} overrides
          all other start options. For more information see  sec-
          tion _M_o_d_u_l_e__I_n_t_e_r_f_a_c_e.

          If a server is started using  the  option  {_p_e_r_s_i_s_t_e_n_t,
          _t_r_u_e} the object key will not be removed unless it ter-
          minates with reason _n_o_r_m_a_l or _s_h_u_t_d_o_w_n. Hence, if  per-
          sistent  servers  is  used  as  supervisor  childs they
          should be _t_r_a_n_s_i_e_n_t and the  _o_b_j_e_c_t_k_e_y_s__g_c__t_i_m_e  should
          be modified (default equals _i_n_f_i_n_i_t_y).

          Example:

            corba:create('StackModule_Stack', "IDL:StackModule/Stack:1.0",
                         {10, test})

     dispose(Object) -> ok

          Types
               Object = #objref

          This function is used for terminating the execution  of
          a server object.

     create_subobject_key(Object, Key) -> Result

          Types
               Object = #objref
               Key = term()
               Result = #objref

          This function is used to create a subobject in a server
          object.  It  can  for  example be useful when one wants
          unique access to separate rows in a mnesia  or  an  ETS



Ericsson UtvecklingsLAaBst change: orber  3.1.8                   2






corba(3)            ERLANG MODULE DEFINITION             corba(3)



          table.  The  _R_e_s_u_l_t is an object reference that will be
          seen as a unique reference to  the  outside  world  but
          will  access  the  same server object where one can use
          the _g_e_t__s_u_b_o_b_j_e_c_t__k_e_y/_1 function to get the private key
          value.

          _K_e_y is stored in the object reference _O_b_j_e_c_t. If it  is
          a  binary  it  will be stored as is and otherwise it is
          converted to a binary before storage.

     get_subobject_key(Object) -> Result

          Types
               Object = #objref
               Result = #binary

          This function is used to fetch a subobject key from the
          object  reference  _O_b_j_e_c_t.  The  result  is  a always a
          binary, if it was an Erlang term that was  stored  with
          _c_r_e_a_t_e__s_u_b_o_b_j_e_c_t__k_e_y/_2  one  can to do _b_i_n_a_r_y__t_o__t_e_r_m/_1
          to get the real value.

     get_pid(Object) -> Result

          Types
               Object = #objref
               Result = #pid | {error, Reason} | {'EXCEPTION', E}

          This function is to get the process id from an  object,
          which  is  a must when Corba objects is started/handled
          in a supervisor tree. The function  will  throw  excep-
          tions  if  the  key  is  not  found or some other error
          occurs.

     raise(Exception)

          Types
               Exception = record()

          This function is used for raising corba  exceptions  as
          an Erlang user generated exit signal. It will throw the
          tuple {'_E_X_C_E_P_T_I_O_N', _E_x_c_e_p_t_i_o_n}.

     resolve_initial_references(ObjectId) -> Object

          Types
               ObjectId = string()
               Object = #objref

          This function returns  the  object  reference  for  the
          object id asked for (just now only the "NameService").




Ericsson UtvecklingsLAaBst change: orber  3.1.8                   3






corba(3)            ERLANG MODULE DEFINITION             corba(3)



     list_initial_services() -> [ObjectId]

          Types
               ObjectId = string()

          This function returns a list  of  allowed  object  id's
          (just now only the "NameService").

     resolve_initial_references_remote(ObjectId,   Address)    ->
     Object

          Types
               Address = [RemoteModifier]
               RemoteModifier = string()
               ObjectId = string()
               Object = #objref

          This function returns  the  object  reference  for  the
          object  id  asked for (depends on the orb, for orber it
          is just the "NameService"). The remote modifier  string
          has the following format: "_i_i_o_p://_h_o_s_t:_p_o_r_t".

     list_initial_services_remote(Address) -> [ObjectId]

          Types
               Address = [RemoteModifier]
               RemoteModifier = string()
               ObjectId = string()

          This function returns a list  of  allowed  object  id's
          (depends on the orb, for orber it is just the "NameSer-
          vice"). The remote modifier string  has  the  following
          format: "_i_i_o_p://_h_o_s_t:_p_o_r_t".

     object_to_string(Object) -> IOR_string

          Types
               Object = #objref
               IOR_string = string()

          This function  returns  the  object  reference  as  the
          external string representation of an IOR.

     string_to_object(IOR_string) -> Object

          Types
               IOR_string = string()
               Object = #objref

          This function takes  an  IOR  on  the  external  string
          representation and returns the object reference.




Ericsson UtvecklingsLAaBst change: orber  3.1.8                   4






corba(3)            ERLANG MODULE DEFINITION             corba(3)



AUTHOR
     Lars Thorsen - support@erlang.ericsson.se





















































Ericsson UtvecklingsLAaBst change: orber  3.1.8                   5



