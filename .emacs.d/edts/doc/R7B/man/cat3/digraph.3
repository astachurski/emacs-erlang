


digraph(3)          ERLANG MODULE DEFINITION           digraph(3)



MODULE
     digraph - Directed Graphs

DESCRIPTION
     The _d_i_g_r_a_p_h module implements a version of labeled  directed
     graphs.  What  makes  the graphs implemented here non-proper
     directed graphs is that multiple edges between vertices  are
     allowed.  However,  the  customary  definition  of  directed
     graphs will be used in the text that follows.

     A _d_i_r_e_c_t_e_d _g_r_a_p_h (or just "graph") is a pair  (V,  E)  of  a
     finite  set  V  of  _v_e_r_t_i_c_e_s  and a finite set E of _d_i_r_e_c_t_e_d
     _e_d_g_e_s (or just "edges"). The set of edges E is a subset of V
     V  (the Cartesian product of V with itself). In this module,
     V is allowed to be empty; the so obtained  unique  graph  is
     called  the   _e_m_p_t_y  _g_r_a_p_h.  Both  vertices  and  edges  are
     represented by unique Erlang terms.

     Graphs can be annotated with  additional  information.  Such
     information may be attached to the vertices and to the edges
     of the graph. A graph which has been annotated is  called  a
     _l_a_b_e_l_e_d  _g_r_a_p_h,  and the information attached to a vertex or
     an edge is called a _l_a_b_e_l. Labels are Erlang terms.

     An edge e = (v, w) is said to _e_m_a_n_a_t_e from vertex v  and  to
     be  _i_n_c_i_d_e_n_t  on vertex w. The _o_u_t-_d_e_g_r_e_e of a vertex is the
     number of edges emanating from that vertex. The _i_n-_d_e_g_r_e_e of
     a  vertex is the number of edges incident on that vertex. If
     there is an edge emanating from v and incident on w, then  w
     is  is said to be an _o_u_t-_n_e_i_g_h_b_o_u_r of v, and v is said to be
     an _i_n-_n_e_i_g_h_b_o_u_r of w. A _p_a_t_h P from v[1] to v[k] in a  graph
     (V, E) is a non-empty sequence v[1], v[2], ..., v[k] of ver-
     tices in V such that there is an edge (v[i],v[i+1]) in E for
     1  <= i < k. The _l_e_n_g_t_h of the path P is k-1. P is _s_i_m_p_l_e if
     all vertices are distinct, except that  the  first  and  the
     last vertices may be the same. P is a _c_y_c_l_e if the length of
     P is not zero and v[1] = v[k]. A _l_o_o_p is a cycle  of  length
     one.  A _s_i_m_p_l_e _c_y_c_l_e is a path that is both a cycle and sim-
     ple. An _a_c_y_c_l_i_c _g_r_a_p_h is a graph that has no cycles.


EXPORTS
     new(Type) -> graph() | {error, Reason}

          Types
               Type = [cyclic | acyclic | public | private | pro-
               tected]
               Reason = {unknown_type, term()}

          Returns an empty graph with properties according to the
          options in _T_y_p_e:




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  1






digraph(3)          ERLANG MODULE DEFINITION           digraph(3)



            _c_y_c_l_i_c:
                Allow cycles in the graph (default).

            _a_c_y_c_l_i_c:
                The graph is to be kept acyclic.

            _p_u_b_l_i_c:
                The graph may be read and modified  by  any  pro-
                cess.

            _p_r_o_t_e_c_t_e_d:
                Other  processes  can   only   read   the   graph
                (default).

            _p_r_i_v_a_t_e:
                The graph can be read and modified by the  creat-
                ing process only.

          If an unrecognized type option T is given, then {_e_r_r_o_r,
          {_u_n_k_n_o_w_n__t_y_p_e,  T}} is returned.

     new() -> graph()

          Equivalent to _n_e_w([]).

     delete(G) -> true

          Types
               G = graph()

          Deletes the graph _G. This  call  is  important  because
          graphs  are  implemented  with _e_t_s. There is no garbage
          collection of _e_t_s tables. The graph will,  however,  be
          deleted  if  the  process  that  created the graph ter-
          minates.

     info(G) -> InfoList

          Types
               G = graph()
               InfoList  =  [{cyclicity,   Cyclicity},   {memory,
               NoWords}, {protection, Protection}]
               Cyclicity = cyclic | acyclic
               Protection = public | protected | private
               NoWords = integer() >= 0

          Returns a list of {_T_a_g,  _V_a_l_u_e}  pairs  describing  the
          graph _G. The following pairs are returned:

            * {_c_y_c_l_i_c_i_t_y, _C_y_c_l_i_c_i_t_y}, where _C_y_c_l_i_c_i_t_y  is  _c_y_c_l_i_c
              or _a_c_y_c_l_i_c, according to the options given to _n_e_w.




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  2






digraph(3)          ERLANG MODULE DEFINITION           digraph(3)



            * {_m_e_m_o_r_y, _N_o_W_o_r_d_s}, where _N_o_W_o_r_d_s is the  number  of
              words allocated to the _e_t_s tables.

            * {_p_r_o_t_e_c_t_i_o_n, _P_r_o_t_e_c_t_i_o_n}, where _P_r_o_t_e_c_t_i_o_n is  _p_u_b_-
              _l_i_c, _p_r_o_t_e_c_t_e_d or _p_r_i_v_a_t_e, according to the options
              given to _n_e_w.

     add_vertex(G, V, Label) -> vertex()
     add_vertex(G, V) -> vertex()
     add_vertex(G) -> vertex()

          Types
               G = graph()
               V = vertex()
               Label = label()

          _a_d_d__v_e_r_t_e_x/_3 creates (or modifies) the vertex _V of  the
          graph  _G, using _L_a_b_e_l as the (new) label of the vertex.
          Returns _V.

          _a_d_d__v_e_r_t_e_x(_G,  _V) is equivalent  to  _a_d_d__v_e_r_t_e_x(_G,   _V,
          []).

          _a_d_d__v_e_r_t_e_x/_1 creates a vertex using the empty  list  as
          label,  and  returns  the created vertex. Tuples on the
          form [ $_v  | _N], where N is an integer >= 1,  are  used
          for representing the created vertices.

     vertex(G, V) -> {V, Label} | false

          Types
               G = graph()
               V = vertex()
               Label = label()

          Returns {_V,  _L_a_b_e_l} where _L_a_b_e_l is  the  label  of  the
          vertex _V of the graph _G, or _f_a_l_s_e if there is no vertex
          _V of the graph _G.

     no_vertices(G) -> integer() >= 0

          Types
               G = graph()

          Returns the number of vertices of the graph _G.

     vertices(G) -> Vertices

          Types
               G = graph()
               Vertices = [vertex()]




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  3






digraph(3)          ERLANG MODULE DEFINITION           digraph(3)



          Returns a list of all vertices of the graph _G, in  some
          unspecified order.

     del_vertex(G, V) -> true

          Types
               G = graph()
               V = vertex()

          Deletes the vertex  _V  from  the  graph  _G.  Any  edges
          emanating from _V or incident on _V are also deleted.

     del_vertices(G, Vertices) -> true

          Types
               G = graph()
               Vertices = [vertex()]

          Deletes the vertices in  the  list  _V_e_r_t_i_c_e_s  from  the
          graph _G.

     add_edge(G, E, V1, V2, Label) -> edge() | {error, Reason}
     add_edge(G, V1, V2, Label) -> edge() | {error, Reason}
     add_edge(G, V1, V2) -> edge() | {error, Reason}

          Types
               G = graph()
               E = edge()
               V1 = V2 = vertex()
               Label = label()
               Reason = {bad_edge, Path} | {bad_vertex, V}
               Path = [vertex()]

          _a_d_d__e_d_g_e/_5 creates (or modifies)  the  edge  _E  of  the
          graph  _G,  using  _L_a_b_e_l as the (new) label of the edge.
          The edge is emanating  from  _V_1  and  incident  on  _V_2.
          Returns _E.

          _a_d_d__e_d_g_e(_G,   _V_1,   _V_2,   _L_a_b_e_l)   is   equivalent   to
          _a_d_d__e_d_g_e(_G,  _E,  _V_1,  _V_2,  _L_a_b_e_l), where _E is a created
          edge. Tuples on the form [ $_e  |  _N],  where  N  is  an
          integer  >=  1,  are  used for representing the created
          edges.

          _a_d_d__e_d_g_e(_G,  _V_1,  _V_2) is equivalent to _a_d_d__e_d_g_e(_G,  _V_1,
          _V_2,  []).

          If the edge would create a cycle in an  acyclic  graph,
          then {_e_r_r_o_r,  {_b_a_d__e_d_g_e,  _P_a_t_h}} is returned. If either
          of _V_1 or _V_2 is not  a  vertex  of  the  graph  _G,  then
          {_e_r_r_o_r,   {_b_a_d__v_e_r_t_e_x,   V}} is returned, V = _V_1 or V =
          _V_2.



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  4






digraph(3)          ERLANG MODULE DEFINITION           digraph(3)



     edge(G, E) -> {E, V1, V2, Label} | false

          Types
               G = graph()
               E = edge()
               V1 = V2 = vertex()
               Label = label()

          Returns {_E,  _V_1,  _V_2,  _L_a_b_e_l} where _L_a_b_e_l is the  label
          of  the  edge _E emanating from _V_1 and incident on _V_2 of
          the graph _G. If there is no edge _E of the graph _G, then
          _f_a_l_s_e is returned.

     edges(G, V) -> Edges

          Types
               G = graph()
               V = vertex()
               Edges = [edge()]

          Returns a list of all edges emanating from or  incident
          on _V of the graph _G, in some unspecified order.

     no_edges(G) -> integer() >= 0

          Types
               G = graph()

          Returns the number of edges of the graph _G.

     edges(G) -> Edges

          Types
               G = graph()
               Edges = [edge()]

          Returns a list of all edges of the  graph  _G,  in  some
          unspecified order.

     del_edge(G, E) -> true

          Types
               G = graph()
               E = edge()

          Deletes the edge _E from the graph _G.

     del_edges(G, Edges) -> true

          Types
               G = graph()
               Edges = [edge()]



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  5






digraph(3)          ERLANG MODULE DEFINITION           digraph(3)



          Deletes the edges in the list _E_d_g_e_s from the graph _G.

     out_neighbours(G, V) -> Vertices

          Types
               G = graph()
               V = vertex()
               Vertices = [vertex()]

          Returns a list of all out-neighbours of _V of the  graph
          _G, in some unspecified order.

     in_neighbours(G, V) -> Vertices

          Types
               G = graph()
               V = vertex()
               Vertices = [vertex()]

          Returns a list of all in-neighbours of _V of  the  graph
          _G, in some unspecified order.

     out_edges(G, V) -> Edges

          Types
               G = graph()
               V = vertex()
               Edges = [edge()]

          Returns a list of all edges emanating  from  _V  of  the
          graph _G, in some unspecified order.

     in_edges(G, V) -> Edges

          Types
               G = graph()
               V = vertex()
               Edges = [edge()]

          Returns a list of all edges incident on _V of the  graph
          _G, in some unspecified order.

     out_degree(G, V) -> integer()

          Types
               G = graph()
               V = vertex()

          Returns the out-degree of the vertex _V of the graph _G.

     in_degree(G, V) -> integer()




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  6






digraph(3)          ERLANG MODULE DEFINITION           digraph(3)



          Types
               G= graph()
               V = vertex()

          Returns the in-degree of the vertex _V of the graph _G.

     del_path(G, V1, V2) -> true

          Types
               G = graph()
               V1 = V2 = vertex()

          Deletes edges from the graph _G until there are no paths
          from the vertex _V_1 to the vertex _V_2.

          A sketch of the procedure employed: Find  an  arbitrary
          simple  path  v[1], v[2], ..., v[k] from _V_1 to _V_2 in _G.
          Remove all edges of _G emanating from v[i] and  incident
          to  v[i+1]  for  1 <= i < k (including multiple edges).
          Repeat until there is no path between _V_1 and _V_2.

     get_path(G, V1, V2) -> Vertices | false

          Types
               G = graph()
               V1 = V2 = vertex()
               Vertices = [vertex()]

          Tries to find a simple path from the vertex _V_1  to  the
          vertex  _V_2  of  the graph _G. Returns the path as a list
          [_V_1,  ...,  _V_2] of vertices, or _f_a_l_s_e if no simple path
          from _V_1 to _V_2 of length one or more exists.

          The graph _G is traversed in a depth-first  manner,  and
          the first path found is returned.

     get_short_path(G, V1, V2) -> Vertices | false

          Types
               G = graph()
               V1 = V2 = vertex()
               Vertices = [vertex()]

          Tries to find an as short as possible simple path  from
          the  vertex _V_1 to the vertex _V_2 of the graph _G. Returns
          the path as a list [_V_1,   ...,   _V_2]  of  vertices,  or
          _f_a_l_s_e  if no simple path from _V_1 to _V_2 of length one or
          more exists.

          The graph _G is traversed in a breadth-first manner, and
          the first path found is returned.




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  7






digraph(3)          ERLANG MODULE DEFINITION           digraph(3)



     get_cycle(G, V) -> Vertices | false

          Types
               G = graph()
               V1 = V2 = vertex()
               Vertices = [vertex()]

          If there is a  simple  cycle  of  length  two  or  more
          through  the  vertex _V, then the cycle is returned as a
          list [_V,  ...,  _V] of vertices, otherwise if there is a
          loop  through  _V,  then  the loop is returned as a list
          [_V]. If there are no cycles through _V,  then  _f_a_l_s_e  is
          returned.

          _g_e_t__p_a_t_h/_3 is used for finding a simple  cycle  through
          _V.

     get_short_cycle(G, V) -> Vertices | false

          Types
               G = graph()
               V1 = V2 = vertex()
               Vertices = [vertex()]

          Tries to find an as  short  as  possible  simple  cycle
          through  the vertex _V of the graph _G. Returns the cycle
          as a list [_V,  ...,  _V] of vertices,  or  _f_a_l_s_e  if  no
          simple cycle through _V exists. Note that a loop through
          _V is returned as the list [_V,  _V].

          _g_e_t__s_h_o_r_t__p_a_t_h/_3 is used for  finding  a  simple  cycle
          through _V.

See Also
     digraph_utils(3), ets(3)

AUTHOR
     Tony Rogvall - support@erlang.ericsson.se

















Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  8



