


CosNotifyFilter_MappinEgRFLiAlNtGerM(O3D)ULECoDsENFoItNiIfTyIFOiNlter_MappingFilter(3)



MODULE
     CosNotifyFilter_MappingFilter -

DESCRIPTION
     The main purpose of this module is to match  events  against
     associated  constraints  and  return the value for the first
     constraint that returns true for the  given  event.  If  all
     constraints return false the default value will be returned.

     To get access to the record definitions for  the  structures
     use:
      -_i_n_c_l_u_d_e__l_i_b("_c_o_s_N_o_t_i_f_i_c_a_t_i_o_n/_i_n_c_l_u_d_e/*._h_r_l").


EXPORTS
     _get_constraint_grammar(MappingFilter) -> Grammar

          Types
               MappingFilter = #objref
               Grammar = string()

          This operation returns which type of Grammar  the  Map-
          pingFilter uses. Currently, only "_E_X_T_E_N_D_E_D__T_C_L" is sup-
          ported.

     _get_value_type(MappingFilter) -> CORBA::TypeCode

          Types
               MappingFilter = #objref

          This readonly attribute maintains  the  _C_O_R_B_A::_T_y_p_e_C_o_d_e
          of the default value associated with the target object.

     _get_default_value(MappingFilter) -> #any

          Types
               MappingFilter = #objref

          This readonly attribute maintains  the  #_a_n_y{}  defualt
          value associated with the target object.

     add_mapping_constraints(MappingFilter,           MappingCon-
     straintPairSeq) -> Reply

          Types
               MappingFilter = #objref
               MappingConstraintPairSeq = [MappingConstraintPair]
               MappingConstraintPair                            =
               #'CosNotifyFilter_MappingConstraintPair'{constraint_expression,
               result_to_set}
               constraint_expression                            =
               #'CosNotifyFilter_ConstraintExp'{event_types,



Ericsson UtvecklLiansgtscAhBange: cosNotification  1.0.2              1






CosNotifyFilter_MappinEgRFLiAlNtGerM(O3D)ULECoDsENFoItNiIfTyIFOiNlter_MappingFilter(3)



               constraint_expr}
               event_types = #'CosNotification_EventTypeSeq'{}
               constraint_expr = string()
               result_to_set = #any
               Reply = MappingConstraintInfoSeq  |  {'EXCEPTION',
               #'CosNotifyFilter_InvalidConstraint'{constr}}    |
               {'EXCEPTION',
               #'CosNotifyFilter_InvalidValue'{constr, value}}
               constr = ConstraintExp
               ConstraintExp                                    =
               #'CosNotifyFilter_ConstraintExp'{event_types,
               constraint_expr}
               event_types = #'CosNotification_EventTypeSeq'{}
               constraint_expr = string()
               MappingConstraintInfoSeq = [MappingConstraintInfo]
               MappingConstraintInfo                            =
               #'CosNotifyFilter_MappingConstraintInfo'{constraint_expression,
               constraint_id, value}
               constraint_expression = ConstraintExp
               constraint_id = long()
               value = #any

          This operation add new mapping constraints, which  will
          be used when trying to override Quality of Service set-
          tings defined in  the  given  event.  If  a  constraint
          return true the associated value will be returned, oth-
          erwise the default value.

     modify_constraints(MappingFilter,   ConstraintIDSeq,    Map-
     pingConstraintInfoSeq) -> Reply

          Types
               MappingFilter = #objref
               ConstraintIDSeq = [ConstraintID]
               ConstraintID = long()
               MappingConstraintInfoSeq = [MappingConstraintInfo]
               MappingConstraintInfo                            =
               #'CosNotifyFilter_MappingConstraintInfo'{constraint_expression,
               constraint_id, value}
               constraint_expression = ConstraintExp
               constraint_id = long()
               value = #any
               ConstraintInfoSeq = [ConstraintInfo]
               ConstraintInfo                                   =
               #'CosNotifyFilter_ConstraintInfo'{constraint_expression,
               constraint_id}
               constraint_expression = ConstraintExp
               constraint_id = long()
               Reply       =       ok       |       {'EXCEPTION',
               #'CosNotifyFilter_InvalidConstraint'{constr}}    |
               {'EXCEPTION',
               #'CosNotifyFilter_ConstraintNotFound'{id}}       |



Ericsson UtvecklLiansgtscAhBange: cosNotification  1.0.2              2






CosNotifyFilter_MappinEgRFLiAlNtGerM(O3D)ULECoDsENFoItNiIfTyIFOiNlter_MappingFilter(3)



               {'EXCEPTION',
               #'CosNotifyFilter_InvalidValue'{constr, value}}
               constr = ConstraintExp
               id = long()
               value = #any
               ConstraintExp                                    =
               #'CosNotifyFilter_ConstraintExp'{event_types,
               constraint_expr}
               event_types = #'CosNotification_EventTypeSeq'{}
               constraint_expr = string()

          The _C_o_n_s_t_r_a_i_n_t_I_D_S_e_q  supplied  should  relate  to  con-
          straints  the  caller  wishes  to remove. If any of the
          supplied Id's  are  not  found  an  exception  will  be
          raised.  This operation also accepts a sequence of _M_a_p_-
          _p_i_n_g_C_o_n_s_t_r_a_i_n_t_I_n_f_o which will be added. If  the  target
          object  cannot  modify  the constraints as requested an
          exception is raised describing  which  constraint,  and
          why, could not be updated.

     get_mapping_constraints(MappingFilter,  ConstraintIDSeq)  ->
     Reply

          Types
               MappingFilter = #objref
               ConstraintIDSeq = [ConstraintID]
               ConstraintID = long()
               Reply = MappingConstraintInfoSeq  |  {'EXCEPTION',
               #'CosNotifyFilter_ConstraintNotFound'{id}}
               MappingConstraintInfoSeq = [MappingConstraintInfo]
               MappingConstraintInfo                            =
               #'CosNotifyFilter_MappingConstraintInfo'{constraint_expression,
               constraint_id, value}
               constraint_expression = ConstraintExp
               ConstraintExp                                    =
               #'CosNotifyFilter_ConstraintExp'{event_types,
               constraint_expr}
               event_types = #'CosNotification_EventTypeSeq'{}
               constraint_expr = string()
               constraint_id = id = long()
               value = #any

          When adding a new constraint a unique Id  is  returned,
          which  is  accepted  as  input  for this operation. The
          associated constraint is returned, but if  no  such  Id
          exists an exception is raised.

     get_all_mapping_constraints(MappingFilter)  ->   MappingCon-
     straintInfoSeq

          Types
               MappingFilter = #objref



Ericsson UtvecklLiansgtscAhBange: cosNotification  1.0.2              3






CosNotifyFilter_MappinEgRFLiAlNtGerM(O3D)ULECoDsENFoItNiIfTyIFOiNlter_MappingFilter(3)



               MappingConstraintInfoSeq = [MappingConstraintInfo]
               MappingConstraintInfo                            =
               #'CosNotifyFilter_MappingConstraintInfo'{constraint_expression,
               constraint_id, value}
               constraint_expression = ConstraintExp
               ConstraintExp                                    =
               #'CosNotifyFilter_ConstraintExp'{event_types,
               constraint_expr}
               event_types = #'CosNotification_EventTypeSeq'{}
               constraint_expr = string()
               constraint_id = long()
               value = #any

          This operation returns a sequence of  all  unique  Id's
          associated  with  the  target  object. If no constraint
          have been added the sequence will be empty.

     remove_all_mapping_constraints(MappingFilter) -> ok

          Types
               MappingFilter = #objref

          This operation removes all constraints associated  with
          the target object.

     destroy(MappingFilter) -> ok

          Types
               MappingFilter = #objref

          This operation terminates the target  object.  Remember
          to  remove  this  Filter  from the objects it have been
          associated with.

     match(MappingFilter, Event) -> Reply

          Types
               MappingFilter = #objref
               Event = #any
               Reply  =   {boolean(),   #any}   |   {'EXCEPTION',
               #'CosNotifyFilter_UnsupportedFilterableData'{}}

          This operation evaluates _A_n_y events with  the  Filter's
          constraints, and returns the value to use. The value is
          the default value if all constraints returns false  and
          the  value associated with the first constraint return-
          ing true.

     match_structured(MappingFilter, Event) -> Reply

          Types
               MappingFilter = #objref



Ericsson UtvecklLiansgtscAhBange: cosNotification  1.0.2              4






CosNotifyFilter_MappinEgRFLiAlNtGerM(O3D)ULECoDsENFoItNiIfTyIFOiNlter_MappingFilter(3)



               Event = #'CosNotification_StructuredEvent'{}
               Reply  =   {boolean(),   #any}   |   {'EXCEPTION',
               #'CosNotifyFilter_UnsupportedFilterableData'{}}

          Similar to _m_a_t_c_h/_2 but accepts a  structured  event  as
          input.

AUTHOR
     support - support@erlang.ericsson.se














































Ericsson UtvecklLiansgtscAhBange: cosNotification  1.0.2              5



