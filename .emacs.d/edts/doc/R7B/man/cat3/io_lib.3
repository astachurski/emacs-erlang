


io_lib(3)           ERLANG MODULE DEFINITION            io_lib(3)



MODULE
     io_lib - IO Library Functions

DESCRIPTION
     This module contains functions for converting  to  and  from
     strings  (lists of characters). They are used for implement-
     ing the functions in the _i_o module. There  is  no  guarantee
     that the character lists returned from some of the functions
     are flat, they can be deep lists.  _l_i_s_t_s:_f_l_a_t_t_e_n/_1  is  used
     for generating flat lists.


EXPORTS
     nl()

          Returns a character list which represents  a  new  line
          character.

     write(Term)
     write(Term, Depth)

          Returns a character list  which  represents  _T_e_r_m.  The
          _D_e_p_t_h  (-1)  argument  controls the depth of the struc-
          tures written. When the  specified  depth  is  reached,
          everything  below  this level is replaced by "...". For
          example:

          > lists:flatten(io_lib:write({1,[2],[3],[4,5],6,7,8,9})).
          "{1,[2],[3],[4,5],6,7,8,9}"
          > lists:flatten(io_lib:write({1,[2],[3],[4,5],6,7,8,9}, 5)).
          "{1,[2],[3],[4|...],6|...}"

     print(Term)
     print(Term, Column, LineLength, Depth)

          Also returns a  list  of  characters  which  represents
          _T_e_r_m,  but breaks representations which are longer than
          one line into many lines and indents each  line  sensi-
          bly. It also tries to detect and output lists of print-
          able characters as  strings.  _C_o_l_u_m_n  is  the  starting
          column  (1),  _L_i_n_e_L_e_n_g_t_h  the maximum line length (80),
          and _D_e_p_t_h the maximum print depth.

     fwrite(Format, Data)
     format(Format, Data)

          Returns a character list which represents _D_a_t_a  format-
          ted  in  accordance  with  _F_o_r_m_a_t.  Refer  to  io for a
          detailed  description  of  the   available   formatting
          options.  A  fault is generated if there is an error in
          the format string or argument list.




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  1






io_lib(3)           ERLANG MODULE DEFINITION            io_lib(3)



     fread(Format, String)

          Tries to read _S_t_r_i_n_g in  accordance  with  the  control
          sequences  in  _F_o_r_m_a_t.  Refer  to  io  for  a  detailed
          description of the available formatting options. It  is
          assumed that _S_t_r_i_n_g contains whole lines. It returns:

            {_o_k, _I_n_p_u_t_L_i_s_t, _L_e_f_t_O_v_e_r_C_h_a_r_s}:
                The string was read. _I_n_p_u_t_L_i_s_t  is  the  list  of
                successfully  matched  and read items, and _L_e_f_t_O_-
                _v_e_r_C_h_a_r_s are the input characters not used.

            {_m_o_r_e, _R_e_s_t_F_o_r_m_a_t, _N_c_h_a_r_s, _I_n_p_u_t_S_t_a_c_k}:
                The string was read, but more input is needed  in
                order  to  complete  the  original format string.
                _R_e_s_t_F_o_r_m_a_t is the remaining format string, _N_C_h_a_r_s
                the  number of characters scanned, and _I_n_p_u_t_S_t_a_c_k
                is the reversed list of inputs matched up to that
                point.

            {_e_r_r_o_r, _W_h_a_t}:
                An error occurred which can be formatted with the
                call _f_o_r_m_a_t__e_r_r_o_r/_1.

          Example:

          > io_lib:fread("~f~f~f", "15.6 17.3e-6 24.5").
          {ok, [15.6000, 1.73000e-5, 24.5000], []}

     fread(Continuation, CharList, Format)

          This is the re-entrant formatted reader. It returns:

            {_d_o_n_e, _R_e_s_u_l_t, _L_e_f_t_O_v_e_r_C_h_a_r_s}:
                The input is complete. The result is one  of  the
                following:

                  {_o_k, _I_n_p_u_t_L_i_s_t}:
                      The string was read. _I_n_p_u_t_L_i_s_t is the  list
                      of successfully matched and read items, and
                      _L_e_f_t_O_v_e_r_C_h_a_r_s are the remaining characters.

                  _e_o_f:
                      End of file has been encountered. _L_e_f_t_O_v_e_r_-
                      _C_h_a_r_s are the input characters not used.

                  {_e_r_r_o_r, _W_h_a_t}:
                      An error occurred, which can  be  formatted
                      with the call _f_o_r_m_a_t__e_r_r_o_r/_1.

            {_m_o_r_e, _C_o_n_t_i_n_u_a_t_i_o_n}:
                More  data  is  required   to   build   a   term.



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  2






io_lib(3)           ERLANG MODULE DEFINITION            io_lib(3)



                _C_o_n_t_i_n_u_a_t_i_o_n  must  be passed to <_c>_f_r_e_a_d/_3, when
                more data becomes available.

     write_atom(Atom)

          Returns the list of characters needed to print the atom
          _A_t_o_m.

     write_string(String)

          Returns the list of characters needed to  print  _S_t_r_i_n_g
          as a string.

     write_char(Integer)

          Returns the list of characters needed to print a  char-
          acter constant.

     indentation(String, StartIndent)

          Returns the indentation if  _S_t_r_i_n_g  has  been  printed,
          starting at _I_n_d_e_n_t_a_t_i_o_n.

     char_list(CharList) -> bool()

          Returns _t_r_u_e if CharList is a list of characters,  oth-
          erwise it returns _f_a_l_s_e.

     deep_char_list(CharList)

          Returns _t_r_u_e if CharList is a deep list of  characters,
          otherwise it returns _f_a_l_s_e.

     printable_list(CharList)

          Returns _t_r_u_e if CharList is a list of printable charac-
          ters, otherwise it returns _f_a_l_s_e.

Notes
     The module _i_o__l_i_b also uses the extra modules _i_o__l_i_b__f_o_r_m_a_t,
     _i_o__l_i_b__f_r_e_a_d,  and  _i_o__l_i_b__p_r_e_t_t_y.  All  external interfaces
     exist in _i_o__l_i_b.

     _U_s_e_r_s _a_r_e _s_t_r_o_n_g_l_y _a_d_v_i_s_e_d _n_o_t _t_o _a_c_c_e_s_s _t_h_e  _o_t_h_e_r  _m_o_d_u_l_e_s
     _d_i_r_e_c_t_l_y.

  Note:
     Any undocumented functions in _i_o__l_i_b should not be used.


     The continuation of the first call to the  re-entrant  input
     functions must be []. Refer to Armstrong, Virding, Williams,



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  3






io_lib(3)           ERLANG MODULE DEFINITION            io_lib(3)



     'Concurrent Programming in Erlang', Chapter 13  for  a  com-
     plete description of how the re-entrant input scheme works

AUTHOR
     Robert Virding - support@erlang.ericsson.se


















































Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  4



