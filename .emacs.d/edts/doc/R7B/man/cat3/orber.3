


orber(3)            ERLANG MODULE DEFINITION             orber(3)



MODULE
     orber - The main module of the Orber application

DESCRIPTION
     This module contains the functions for starting and stopping
     the  application.  It also has some utility functions to get
     some of the configuration information from running  applica-
     tion.


EXPORTS
     start() -> ok

          Starts the Orber application (it also starts mnesia  if
          it is not running).

     start_lightweight() -> ok

          Starts the Orber application as lightweight.

          Preconditions:

            * Erlang started on the node using the option  -orber
              lightweight,    e.g.,    erl   -orber   lightweight
              Addresses.

            * The _A_d_d_r_e_s_s_e_s must be a  list  of  _R_e_m_o_t_e_M_o_d_i_f_i_e_r_s,
              equal                     to                    the
              _o_r_b_e_r:_r_e_s_o_l_v_e__i_n_i_t_i_a_l__r_e_f_e_r_e_n_c_e_s__r_e_m_o_t_e/_2 argument.
              The  list  must  contain  Orber nodes addresses, to
              which we have access and are not started as  light-
              weight.

     start_lightweight(Addresses) -> ok

          Types
               Addresses = [Address]
               Address =
               RetVal = ok | exit()

          Starts the Orber application as lightweight.

          Preconditions:

            * If Erlang is started using the configuration param-
              eter  -orber  lightweight,  e.g., erl -orber light-
              weight Address, the argument supplied to this func-
              tion  will  override  the  configuration parameter.
              Hence, this function must be used carefully.

            * The _A_d_d_r_e_s_s_e_s must be a  list  of  _R_e_m_o_t_e_M_o_d_i_f_i_e_r_s,
              equal                     to                    the



Ericsson UtvecklingsLAaBst change: orber  3.1.8                   1






orber(3)            ERLANG MODULE DEFINITION             orber(3)



              _o_r_b_e_r:_r_e_s_o_l_v_e__i_n_i_t_i_a_l__r_e_f_e_r_e_n_c_e_s__r_e_m_o_t_e/_2 argument.
              The  list  must  contain  Orber nodes addresses, to
              which we have access and are not started as  light-
              weight.

     stop() -> ok

          Stops the Orber application.

     is_lightweight() -> boolean()

          This function returns the true if Orber is  started  as
          lightweight, false otherwise.

     get_lightweight_nodes() -> RemoteModifierList | false

          This function returns false if Orber is not started  as
          lightweight, otherwise a list of Remote Modifiers.

     get_ORBInitRef() -> string() | undefined

          This function returns  undefined  if  we  will  resolve
          references locally, otherwise a string describing which
          host  we   will   contact   if   the   Key   given   to
          _c_o_r_b_a:_r_e_s_o_l_v_e__i_n_i_t_i_a_l__r_e_f_e_r_e_n_c_e_s/_1  matches the Key set
          in this configuration variable.  For  more  information
          see the user's guide.

     get_ORBDefaultInitRef() -> string() | undefined

          This function returns  undefined  if  we  will  resolve
          references locally, otherwise a string describing which
          host, or hosts, from which we will try to  resolve  the
          Key  given  to  _c_o_r_b_a:_r_e_s_o_l_v_e__i_n_i_t_i_a_l__r_e_f_e_r_e_n_c_e_s/_1. For
          more information see the user's guide.

     domain() -> string()

          This function returns the domain name  of  the  current
          Orber domain as a string.

     iiop_port() -> int()

          This function returns the port-number, which is used by
          the  IIOP protocol. It can be configured by setting the
          application variable _i_i_o_p__p_o_r_t, if it  is  not  set  it
          will have the default number 4001.

     iiop_ssl_port() -> int()

          This function returns the port-number, which is used by
          the  secure  IIOP  protocol.  It  can  be configured by



Ericsson UtvecklingsLAaBst change: orber  3.1.8                   2






orber(3)            ERLANG MODULE DEFINITION             orber(3)



          setting the application variable _i_i_o_p__s_s_l__p_o_r_t,  if  it
          is  not  set  it  will  have the default number 4002 if
          Orber is to configured to run in secure mode. Otherwise
          it returns -1.

     iiop_timeout() -> int() (milliseconds)

          This function returns the  timeout  value  after  which
          outgoing  IIOP requests terminate. It can be configured
          by  setting  the  application   variable   _i_i_o_p__t_i_m_e_o_u_t
          _T_i_m_e_V_a_l  (_s_e_c_o_n_d_s),  if  it is not set it will have the
          default value  _i_n_f_i_n_i_t_y.  If  a  request  times  out  a
          _C_O_M_M__F_A_I_L_U_R_E exception is raised.

          Note:   the   iiop_timeout   configuration    parameter
          (TimeVal) may only range between 0 and 1000000 seconds.
          Otherwise, the default value is used.

          Note: IC  supply  the  compile  option  _i_c:_g_e_n(_I_d_l_F_i_l_e,
          [{_t_i_m_e_o_u_t, "_m_o_d_u_l_e::_i_n_t_e_r_f_a_c_e"}]), which allow the user
          to   add   an   extra    timeout    parameter,    e.g.,
          _m_o_d_u_l_e__i_n_t_e_r_f_a_c_e(_O_b_j_R_e_f,  _T_i_m_e_o_u_t,  ... _A_r_g_u_m_e_n_t_s ...),
          instead of _m_o_d_u_l_e__i_n_t_e_r_f_a_c_e(_O_b_j_R_e_f, ... _A_r_g_u_m_e_n_t_s ...).
          If,  a  stub  is  compiled with the timeout option, the
          extra Timeout argument will override the  configuration
          parameter _i_i_o_p__t_i_m_e_o_u_t. It is, however, not possible to
          use _i_n_f_i_n_i_t_y to override  the  Timeout  parameter.  The
          Timeout  option is also valid for objects which resides
          within the same Orber domain.

     iiop_connection_timeout() -> int() (milliseconds)

          This function returns the  timeout  value  after  which
          outgoing  IIOP connections terminate. It can be config-
          ured    by    setting    the    application    variable
          _i_i_o_p__c_o_n_n_e_c_t_i_o_n__t_i_m_e_o_u_t _T_i_m_e_V_a_l (_s_e_c_o_n_d_s), if it is not
          set it will have the default value _i_n_f_i_n_i_t_y.  The  con-
          nection  will  not  be  terminated if there are pending
          requests.

          Note: the iiop_connection_timeout configuration parame-
          ter  (TimeVal)  may  only  range  between 0 and 1000000
          seconds. Otherwise, the default value is used.

     secure() -> no | ssl

          This function returns the security mode Orber  is  run-
          ning in, which is either no if it is an insecure domain
          or the type of security mechanism used. For the  moment
          the  only security mechanism is ssl. This is configured
          by setting the application variable _s_e_c_u_r_e.




Ericsson UtvecklingsLAaBst change: orber  3.1.8                   3






orber(3)            ERLANG MODULE DEFINITION             orber(3)



     ssl_server_certfile() -> string()

          This function returns a path to  a  file  containing  a
          chain  of PEM encoded certificates for the Orber domain
          as server. This is configured by setting  the  applica-
          tion variable _s_s_l__s_e_r_v_e_r__c_e_r_t_f_i_l_e.

     ssl_client_certfile() -> string()

          This function returns a path to  a  file  containing  a
          chain  of  PEM  encoded  certificates  used in outgoing
          calls in the current process. The default value is con-
          figured    by    setting   the   application   variable
          _s_s_l__c_l_i_e_n_t__c_e_r_t_f_i_l_e.

     set_ssl_client_certfile(Path) -> ok

          Types
               Path = string()

          This function takes a path to a file containing a chain
          of  PEM  encoded  certificates as parameter and sets it
          for the current process.

     ssl_server_verify() -> 0 | 1 | 2

          This function returns the type of verification used  by
          SSL  during authentication of the other peer for incom-
          ing calls. It is configured by setting the  application
          variable _s_s_l__s_e_r_v_e_r__v_e_r_i_f_y.

     ssl_client_verify() -> 0 | 1 | 2

          This function returns the type of verification used  by
          SSL  during authentication of the other peer for outgo-
          ing calls. The default value is configured  by  setting
          the application variable _s_s_l__c_l_i_e_n_t__v_e_r_i_f_y.

     set_ssl_client_verify(Value) -> ok

          Types
               Value = 0 | 1 | 2

          This function sets the SSL verification  type  for  the
          other peer of outgoing calls.

     ssl_server_depth() -> int()

          This function returns the SSL  verification  depth  for
          incoming  calls. It is configured by setting the appli-
          cation variable _s_s_l__s_e_r_v_e_r__d_e_p_t_h.




Ericsson UtvecklingsLAaBst change: orber  3.1.8                   4






orber(3)            ERLANG MODULE DEFINITION             orber(3)



     ssl_client_depth() -> int()

          This function returns the SSL  verification  depth  for
          outgoing calls. The default value is configured by set-
          ting the application variable _s_s_l__c_l_i_e_n_t__d_e_p_t_h.

     set_ssl_client_depth(Depth) -> ok

          Types
               Depth = int()

          This function sets the SSL verification depth  for  the
          other peer of outgoing calls.

     objectkeys_gc_time() -> int() (seconds)

          This function returns the  timeout  value  after  which
          after  which terminated object keys, related to servers
          started with the configuration  parameter  {_p_e_r_s_i_s_t_e_n_t,
          _t_r_u_e}, will be removed. It can be configured by setting
          the  application  variable  _o_b_j_e_c_t_k_e_y_s__g_c__t_i_m_e  _T_i_m_e_V_a_l
          (_s_e_c_o_n_d_s),  if  it  is not set it will have the default
          value _i_n_f_i_n_i_t_y.

          Objects terminating with reason _n_o_r_m_a_l or _s_h_u_t_d_o_w_n  are
          removed automatically.

          Note: the  objectkeys_gc_time  configuration  parameter
          (TimeVal) may only range between 0 and 1000000 seconds.
          Otherwise, the default value is used.

     bootstrap_port() -> int()

          This function returns the port-number, which is used by
          the CORBA bootstrapping protocol. This protocol is used
          to fetch an initial reference from another ORB. It  can
          be  configured  by  setting  the  application  variable
          _b_o_o_t_s_t_r_a_p__p_o_r_t, if it is not set it will use  the  iiop
          port.

          Note: In the future it will use the port  number  which
          is set in the standard (the suggestion is 900). Because
          the standard is not ready in this area we in the  mean-
          time uses a port number, which do not require root per-
          missions in Unix.

     orber_nodes() -> RetVal

          Types
               RetVal = [node()]





Ericsson UtvecklingsLAaBst change: orber  3.1.8                   5






orber(3)            ERLANG MODULE DEFINITION             orber(3)



          This function returns the list of node names that  this
          orber domain consists of.

     install(NodeList) -> ok
     install(NodeList, Options) -> ok

          Types
               NodeList = [node()]
               Options = [Option]
                Option    =    {install_timeout,    Timeout}    |
               {ifr_storage_type, TableType}
                Timeout = infinity | integer()
                TableType = disc_copies | ram_copies

          This function installs all the necessary mnesia  tables
          and  load  default data in some of them. If one or more
          Orber tables already exists the installation fails. The
          function _u_n_i_n_s_t_a_l_l may be used, if it is safe, i.e., no
          other application is running Orber.

          Preconditions:

            * a mnesia schema must exist before the installation

            * mnesia is running on the other  nodes  if  the  new
              installation shall be a multi node domain

          Mnesia will be started by the function  if  it  is  not
          already  running on the installation node and if it was
          started it will be stopped afterwards.

          The options that can be sent to the  installation  pro-
          gram is:

            * {_i_n_s_t_a_l_l__t_i_m_e_o_u_t, _T_i_m_e_o_u_t} - this  timeout  is  how
              long we will wait for the tables to be created. The
              Timeout value can be _i_n_f_i_n_i_t_y or an integer  number
              in milliseconds. Default is infinity.

            * {_i_f_r__s_t_o_r_a_g_e__t_y_p_e, _T_a_b_l_e_T_y_p_e} -  this  option  sets
              the  type  of tables used for the interface reposi-
              tory.  The  TableType   can   be   disc_copies   or
              ram_copies.  Default  is  disc_copies.  (All  other
              tables in Orber are ram copies).

     uninstall() -> ok

          This function stops the Orber  application,  terminates
          all server objects and removes all Orber related mnesia
          tables.





Ericsson UtvecklingsLAaBst change: orber  3.1.8                   6






orber(3)            ERLANG MODULE DEFINITION             orber(3)



          Note: Since other applications may be  running  on  the
          same  node  using  mnesia  _u_n_i_n_s_t_a_l_l  will not stop the
          mnesia application.

     add_node(Node, StorageType) -> RetVal

          Types
               Node = node()
               StorageType = disc_copies | ram_copies
               RetVal = ok | exit()

          This function add given node to a existing  Orber  node
          group  and starts Orber on the new node. _o_r_b_e_r:_a_d_d__n_o_d_e
          is called from a member in the Orber node group.

          Preconditions for new node:

            * Erlang started on the new  node  using  the  option
              -_m_n_e_s_i_a    _e_x_t_r_a__d_b__n_o_d_e_s,    e.g.,    _e_r_l   -_s_n_a_m_e
              _n_e_w__n_o_d_e__n_a_m_e        -_m_n_e_s_i_a         _e_x_t_r_a__d_b__n_o_d_e_s
              _C_o_n_n_e_c_t_T_o_N_o_d_e_s__L_i_s_t

            * Mnesia is running on the new node  (no  new  schema
              created).

            * If the new node will  use  _d_i_s_c__c_o_p_i_e_s  the  schema
              type       must       be       changed       using:
              _m_n_e_s_i_a:_c_h_a_n_g_e__t_a_b_l_e__c_o_p_y__t_y_p_e(_s_c_h_e_m_a,       _n_o_d_e(),
              _d_i_s_c__c_o_p_i_e_s)

          Orber will be started by the function on the new node.

          Fails if:

            * Orber already installed on given node

            * Mnesia not started as described above  on  the  new
              node

            * Impossible to copy data in Mnesia tables to the new
              node

            * Not able to start Orber on the new node.

          The function do not remove already copied tables  after
          a   failure.  Use  _o_r_b_e_r:_r_e_m_o_v_e__n_o_d_e  to  remove  these
          tables.

     remove_node(Node) -> RetVal

          Types
               Node = node()



Ericsson UtvecklingsLAaBst change: orber  3.1.8                   7






orber(3)            ERLANG MODULE DEFINITION             orber(3)



               RetVal = ok | exit()

          This function removes given  node  from  a  Orber  node
          group. The Mnesia application is not stopped.

AUTHOR
     Lars Thorsen - support@erlang.ericsson.se
















































Ericsson UtvecklingsLAaBst change: orber  3.1.8                   8



