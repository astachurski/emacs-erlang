


erl_error(3)           C LIBRARY FUNCTIONS           erl_error(3)



NAME
     erl_error - Error Print Routines

DESCRIPTION
     This module contains some error printing routines taken from
     _A_d_v_a_n_c_e_d  _P_r_o_g_r_a_m_m_i_n_g  _i_n _t_h_e _U_N_I_X _E_n_v_i_r_o_n_m_e_n_t by W. Richard
     Stevens.

     These functions  are  all  called  in  the  same  manner  as
     _p_r_i_n_t_f(),  i.e.  with  a string containing format specifiers
     followed by a list of corresponding  arguments.  All  output
     from these functions is to _s_t_d_e_r_r.


EXPORTS
     void erl_err_msg(FormatStr, ... )

          Types
               const char *FormatStr;

          The message provided by the  caller  is  printed.  This
          function is simply a wrapper for _f_p_r_i_n_t_f().

     void erl_err_quit(FormatStr, ... )

          Types
               const char *FormatStr;

          Use this function when a fatal error has occurred  that
          is  not  due  to a system call. The message provided by
          the caller is printed and the process  terminates  with
          an exit value of 1. The function does not return.

     void erl_err_ret(FormatStr, ... )

          Types
               const char *FormatStr;

          Use this function after a failed system call. The  mes-
          sage  provided  by  the caller is printed followed by a
          string describing the reason for failure.

     void erl_err_sys(FormatStr, ... )

          Types
               const char *FormatStr;

          Use this function after a failed system call. The  mes-
          sage  provided  by  the caller is printed followed by a
          string describing the reason for failure, and the  pro-
          cess  terminates  with an exit value of 1. The function
          does not return.



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               1






erl_error(3)           C LIBRARY FUNCTIONS           erl_error(3)



Error Reporting
     Most functions  in  erl_interface  report  failures  to  the
     caller  by returning some otherwise meaningless value (typi-
     cally _N_U_L_L or a negative number). As  this  only  tells  you
     that  things  did  not go well, you will have to examine the
     error code in _e_r_l__e_r_r_n_o if you want to find out  more  about
     the failure.

EXPORTS
     volatile int erl_errno

          _e_r_l__e_r_r_n_o is initially (at program startup) zero and is
          then  set by many erl_interface functions on failure to
          a non-zero error code to indicate what kind of error it
          encountered.  A  successful  function call might change
          _e_r_l__e_r_r_n_o (by calling some other function that  fails),
          but  no  function  will ever set it to zero. This means
          that you cannot use _e_r_l__e_r_r_n_o to see _i_f a function call
          failed.  Instead,  each function reports failure in its
          own way (usually by  returning  a  negative  number  or
          _N_U_L_L),  in  which  case  you  can examine _e_r_l__e_r_r_n_o for
          details.

          _e_r_l__e_r_r_n_o uses the error codes defined in your system's
          <_e_r_r_n_o._h>.

  Note:
     Actually, _e_r_l__e_r_r_n_o is a "modifiable lvalue" (just like  ISO
     C defines _e_r_r_n_o to be) rather than a variable. This means it
     might  be  implemented  as  a  macro  (expanding  to,  e.g.,
     *__e_r_l__e_r_r_n_o()).  For  reasons  of  thread- (or task-)safety,
     this is exactly what we do on most platforms.


AUTHOR
     T.Tornkvist - support@erlang.ericsson.se



















Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               2



