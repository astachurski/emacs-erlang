


snmp_index(3)       ERLANG MODULE DEFINITION        snmp_index(3)



MODULE
     snmp_index - Abstract Data Type for SNMP Indexing

DESCRIPTION
     The module _s_n_m_p__i_n_d_e_x implements an Abstract Data Type (ADT)
     for  an  SNMP  index structure for SNMP tables. It is imple-
     mented as an ets table of the ordered_set  data-type,  which
     means  that  all  operations are O(log n). In the table, the
     key is an ASN.1 OBJECT IDENTIFIER.

     This index is used to separate  the  implementation  of  the
     SNMP  ordering  from the actual implementation of the table.
     The SNMP ordering, that is implementation of  GET  NEXT,  is
     implemented in this module.

     For example, suppose there is an SNMP table, which  is  best
     implemented  in  Erlang  as  one process per SNMP table row.
     Suppose further that the INDEX in the SNMP table is an OCTET
     STRING. The index structure would be created as follows:

     snmp_index:new(string)

     For each new process we create, we  insert  an  item  in  an
     _s_n_m_p__i_n_d_e_x structure:

     new_process(Name, SnmpIndex) ->
       Pid = start_process(),
       NewSnmpIndex =
         snmp_index:insert(SnmpIndex, Name, Pid),
       <...>

     With this structure, we can now map an OBJECT IDENTIFIER  in
     e.g. a GET NEXT request, to the correct process:

     get_next_pid(Oid, SnmpIndex) ->
       {ok, {_, Pid}} = snmp_index:get_next(SnmpIndex, Oid),
       Pid.


Common data types
     The following data types are used in the functions below:

       * _i_n_d_e_x()

       * _o_i_d() = [_b_y_t_e()]

       * _k_e_y__t_y_p_e_s =  _t_y_p_e__s_p_e_c()  |  {_t_y_p_e__s_p_e_c(),  _t_y_p_e__s_p_e_c(),
         ...}

       * _t_y_p_e__s_p_e_c() = _f_i_x__s_t_r_i_n_g | _s_t_r_i_n_g | _i_n_t_e_g_e_r

       * _k_e_y() = _k_e_y__s_p_e_c() | {_k_e_y__s_p_e_c(), _k_e_y__s_p_e_c(), ...}



Ericsson Utvecklings ALBast change: snmp  3.2.1                   1






snmp_index(3)       ERLANG MODULE DEFINITION        snmp_index(3)



       * _k_e_y__s_p_e_c() = _s_t_r_i_n_g() | _i_n_t_e_g_e_r()

     The _i_n_d_e_x() type denotes an snmp index structure.

     The _o_i_d() type is used to represent an ASN.1 OBJECT IDENTIF-
     IER.

     The _k_e_y__t_y_p_e_s() type is used when creating the index  struc-
     ture, and the _k_e_y() type is used when inserting and deleting
     items from the structure.

     The _k_e_y__t_y_p_e_s() type defines the types  of  the  SNMP  INDEX
     columns  for  the  table.  If the table has one single INDEX
     column, this type should be a single atom, but if the  table
     has multiple INDEX columns, it should be a tuple with atoms.

     If the INDEX column is of  type  INTEGER,  or  derived  from
     INTEGER,  the corresponding type should be _i_n_t_e_g_e_r. If it is
     a  variable  length  type  (e.g.  OBJECT  IDENTIFIER,  OCTET
     STRING),  the  corresponding type should be _s_t_r_i_n_g. Finally,
     if the type is of variable length, but  with  a  fixed  size
     restriction  (e.g. IpAddress), the corresponding type should
     be _f_i_x__s_t_r_i_n_g.

     For example, if the SNMP table has two  INDEX  columns,  the
     first one an OCTET STRING with size 2, and the second one an
     OBJECT  IDENTIFER,  the  corresponding  _k_e_y__t_y_p_e_s  parameter
     would be {_f_i_x__s_t_r_i_n_g, _s_t_r_i_n_g}.

     The _k_e_y() type correlates to the _k_e_y__t_y_p_e_s()  type.  If  the
     _k_e_y__t_y_p_e_s()  is  a single atom, the corresponding _k_e_y() is a
     single type as well, but if the _k_e_y__t_y_p_e_s() is a tuple,  _k_e_y
     must be a tuple of the same size.

     In the example above, valid _k_e_y_s could be {"_h_i", "_m_o_m"}  and
     {"_n_o",  "_t_h_a_n_k_s"},  whereas  "_h_i",  {"_h_i", _4_2} and {"_h_e_l_l_o",
     "_t_h_e_r_e"} would be invalid.

  Warning:
     All API functions that update the index  return  a  _N_e_w_I_n_d_e_x
     term.  This  is  for  backward compatibility with a previous
     implementation that used a B+ tree written purely in  Erlang
     for the index. The _N_e_w_I_n_d_e_x return value can now be ignored.
     The return value is now the unchanged table  identifier  for
     the ets table.

     The implementation using ets tables  introduces  a  semantic
     incompatibility  with  older implementations. In those older
     implementations, using pure Erlang terms, the index was gar-
     bage  collected  like any other Erlang term and did not have
     to be deleted when discarded. An ets table is  deleted  only
     when  the  process creating it explicitly deletes it or when



Ericsson Utvecklings ALBast change: snmp  3.2.1                   2






snmp_index(3)       ERLANG MODULE DEFINITION        snmp_index(3)



     the creating process terminates.

     A new interface _d_e_l_e_t_e/_1 is now added  to  handle  the  case
     when  a  process  wants  to  discard an index table (i.e. to
     build a completely new).  Any  application  using  transient
     snmp indexes has to be modified to handle this.

     As an snmp adaption usually keeps the index for the whole of
     the systems lifetime, this is rarely a problem.


EXPORTS
     delete(Index) -> true

          Types
               Index = NewIndex = index()
               Key = key()

          Deletes a complete index structure (i.e. the ets  table
          holding  the  index). The index can no longer be refer-
          enced after this call. See the warning note above.

     delete(Index, Key) -> NewIndex

          Types
               Index = NewIndex = index()
               Key = key()

          Deletes a key and its value from the  index  structure.
          Returns a new structure.

     get(Index, KeyOid) -> {ok, {KeyOid, Value}} | undefined

          Types
               Index = index()
               KeyOid = oid()
               Value = term()

          Gets the item with  key  _K_e_y_O_i_d.  Could  be  used  from
          within an SNMP instrumentation function.

     get_last(Index) -> {ok, {KeyOid, Value}} | undefined

          Types
               Index = index()
               KeyOid = oid()
               Value = term()

          Gets the last item in the index structure.

     get_next(Index, KeyOid) -> {ok, {NextKeyOid, Value}} | unde-
     fined



Ericsson Utvecklings ALBast change: snmp  3.2.1                   3






snmp_index(3)       ERLANG MODULE DEFINITION        snmp_index(3)



          Types
               Index = index()
               KeyOid = NextKeyOid = oid()
               Value = term()

          Gets the next item in the SNMP lexicographic  ordering,
          after  _K_e_y_O_i_d  in  the index structure. _K_e_y_O_i_d does not
          have to refer to an existing item in the index.

     insert(Index, Key, Value) -> NewIndex

          Types
               Index = NewIndex = index()
               Key = key()
               Value = term()

          Inserts a new key value tuple into the index structure.
          If  an  item  with the same key already exists, the new
          _V_a_l_u_e overwrites the old value.

     key_to_oid(Index, Key) -> KeyOid

          Types
               Index = index()
               Key = key()
               KeyOid = NextKeyOid = oid()

          Converts _K_e_y to an OBJECT IDENTIFIER.

     new(KeyTypes)

          Types
               KeyTypes = key_types()

          Creates a new snmp  index  structure.  The  _k_e_y__t_y_p_e_s()
          type is described above.

AUTHOR
     Martin Bjorklund - support@erlang.ericsson.se
















Ericsson Utvecklings ALBast change: snmp  3.2.1                   4



