


snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



MODULE
     snmp - Interface Functions to the SNMP toolkit

DESCRIPTION
     The module _s_n_m_p contains interface  functions  to  the  SNMP
     toolkit.  Some  functions  are off-line functions (e.g. _c to
     compile a MIB), and some are functions called by  instrumen-
     tation functions in a target system (e.g. _c_u_r_r_e_n_t__a_d_d_r_e_s_s).


Common data types
     The following datatypes are used in the functions below:

       * _o_i_d() = [_b_y_t_e()]

     The _o_i_d() type is used to represent an ASN.1 OBJECT IDENTIF-
     IER.

EXPORTS
     add_agent_caps(SysORID, SysORDescr) -> SysORIndex

          Types
               SysORID = oid()
               SysORDescr = string()
               SysORIndex = integer()

          This function can be used to  add  an  AGENT-CAPABILITY
          statement  to the sysORTable in the agent. The table is
          defined in the SNMPv2-MIB.

     c(File)
     c(File,Options) -> {ok, BinFileName} | {error, Reason}

          Types
               File = string()
               Options = [opt()]
               opt() =  {db,  volatile|persistent|mnesia}  |  {i,
               [dir()]}  |  {il,  [dir()]}  |  {outdir,  dir()} |
               {warnings,  bool()}  |  {group_check,  bool()}   |
               {deprecated, bool()} | {description, bool()}
               dir() = string()
               BinFileName = string()

          Compiles the specified MIB file  <_F_i_l_e>._m_i_b.  The  com-
          piled file _B_i_n_F_i_l_e_N_a_m_e is called <_F_i_l_e>._b_i_n.

            * The option _d_b specifies which  database  should  be
              used  for  the  default instrumentation. Default is
              _v_o_l_a_t_i_l_e.

            * The option _i  specifies  the  path  to  search  for
              imported  (compiled)  MIB  files.  The  directories



Ericsson Utvecklings ALBast change: snmp  3.2.1                   1






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



              should be strings with a trailing directory  delim-
              iter. Default is ["./"].

            * The option _i_l (include_lib) also specifies  a  list
              of  directories  to  search  for  imported MIBs. It
              assumes that the first  element  in  the  directory
              name  corresponds  to  an OTP application. The com-
              piler will find the current installed version.  For
              example,  the value ["snmp/mibs/"] will be replaced
              by ["snmp-3.1.1/mibs/"] (or what the  current  ver-
              sion  may  be in the system). The current directory
              and the <_s_n_m_p-_h_o_m_e>/_p_r_i_v/_m_i_b_s/  are  always  listed
              last in the include path.

            * The option _w_a_r_n_i_n_g_s specifies whether warning  mes-
              sages should be shown. Default is _t_r_u_e.

            * The option _g_r_o_u_p__c_h_e_c_k specifies  whether  the  mib
              compiler  should  check  the OBJECT-GROUP macro for
              correctness or not. Default is _t_r_u_e.

            * The option _d_e_p_r_e_c_a_t_e_d  specifies  if  a  deprecated
              definition  should be ignored or not. If the option
              is true will the MIB-compilator ignore  all  depre-
              cated definitions. Default is _f_a_l_s_e.

            * The option _d_e_s_c_r_i_p_t_i_o_n specifies if the text of the
              DESCRIPTION  field will be included or not. Default
              is _f_a_l_s_e, in which case  the  description  will  be
              replaced by the atom _u_n_d_e_f_i_n_e_d.

          The MIB compiler understands both SMIv1 and SMIv2 MIBs.
          It  uses  the _M_O_D_U_L_E-_I_D_E_N_T_I_T_Y statement to determine if
          the MIB is version 1 or 2.

          The MIB compiler can be invoked  from  the  OS  command
          line  by  using  the  command _e_r_l_c. _e_r_l_c recognises the
          extension ._m_i_b, and invokes the SNMP MIB  compiler  for
          files  with that extension. The options _d_b, _g_r_o_u_p__c_h_e_c_k
          and _d_e_p_r_e_c_a_t_e_d have to be specified to _e_r_l_c  using  the
          syntax +_t_e_r_m. See _e_r_l_c(_1) for details.

     change_log_size(NewSize) -> ok | {error, Reason}

          Types
               NewSize = {MaxBytes, MaxFiles}
               MaxBytes = integer()
               MaxFiles = integer()

          Changes the log size of the Audit Trail Log. The appli-
          cation  must  be  configured to use the audit trail log
          function.  Please  refer  to  disk_log(3)   in   Kernel



Ericsson Utvecklings ALBast change: snmp  3.2.1                   2






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



          Reference Manual for a description of how to change the
          log size.

          The change is permanent, as long  as  the  log  is  not
          deleted.  That  means, the log size is remebered across
          reboots.

     config() -> ok | {error, Reason}

          A simple interactive  SNMP  agent  configuration  tool.
          Simple  configuration  files can be generated, but more
          complex configurations still have to  be  edited  manu-
          ally.

          The tool is a textual based tool that asks  some  ques-
          tions and generates _s_y_s._c_o_n_f_i_g and *._c_o_n_f files.

     current_address() -> {value, {IP, UDP}} | false

          Types
               IP = [int(), int(), int(), int()]
               UDP = int()

          Retrieves the IP  address  of  the  management  station
          sending  the  request.  It must be called from the same
          process that  is  handling  the  request  (normally  an
          instrumentation function).

          Returns _f_a_l_s_e if no request is currently handled.

     current_community() -> {value, Community} | false

          Types
               Community = string()

          Retrieves the community  referred  to  in  the  current
          request.  It  must be called from the same process that
          is handling the request  (normally  an  instrumentation
          function).

          Returns _f_a_l_s_e if no request is currently handled.

          NOTE: This function should only be used  if  the  agent
          speaks   SNMPv1   or   SNMPv2c   only.  Otherwise,  use
          _c_u_r_r_e_n_t__c_o_n_t_e_x_t/_0.

     current_context() -> {value, ContextName} | false

          Types
               ContextName = string()





Ericsson Utvecklings ALBast change: snmp  3.2.1                   3






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



          Retrieves  the  context  referred  to  in  the  current
          request.  It  must be called from the same process that
          is handling the request  (normally  an  instrumentation
          function).

          Returns _f_a_l_s_e if no request is currently handled.

     current_net_if_data() -> {value, NetIfData} | false

          Types
               NetIfData = term()

          Retrieves the Net_if data for  the  current  pdu  being
          handled.  This  data  is defined in the Net_if process,
          and can be used to forward information about the packet
          to  the  instrumentation  functions.  With  the default
          Net_if implementation, it is nil.  It  must  be  called
          from  the  same  process that handles the request (nor-
          mally an instrumentation function).

          Returns _f_a_l_s_e if no request is currently handled.

     current_request_id() -> {value, RequestId} | false

          Types
               RequestId = int()

          Retrieves the request Id of  the  current  request.  It
          must  be  called from the same process that is handling
          the request (normally an instrumentation function).

          Returns _f_a_l_s_e if no request is currently handled.

     date_and_time() -> DateAndTime

          Types
               DateAndTime = [int()]

          Returns current date and time as the data type DateAnd-
          Time, as specified in RFC1903. This is an OCTET STRING.

     date_and_time_to_universal_time(DateAndTime) -> UTC

          Types
               DateAndTime = [int()]
               UTC = {{Y, Mo, D}, {H, M, S}}

          Converts a DateAndTime  list  to  universal  time.  The
          unversal  time  value  on the same format as defined in
          calendar(3).





Ericsson Utvecklings ALBast change: snmp  3.2.1                   4






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



     date_and_time_to_string(DateAndTime) -> string()

          Types
               DateAndTime = [int()]

          Converts a DateAndTime  list  to  a  printable  string,
          according to the DISPLAY-HINT definition in RFC1903.

     debug(Agent,Bool) -> void()

          Types
               Agent = pid() | atom()
               Bool = bool()

          Turns debugging of the agent on/off. Debug  information
          is  printed  whenever  an  instrumentation  function is
          called, and when a packet is  received  or  sent.  This
          actually  sets  verbosity  to  _l_o_g  or  _s_i_l_e_n_c_e for the
          snmp_master_agent and snmp_net_if.

     del_agent_caps(SysORIndex) -> void()

          Types
               SysORIndex = integer()

          This function can be used to delete an AGENT-CAPABILITY
          statement to the sysORTable in the agent. This table is
          defined in the SNMPv2-MIB.

     enum_to_int(Name,Enum) -> {value, Int} | false

          Types
               Name = atom()
               Enum = atom()
               Int = int()

          Converts the symbolic value _E_n_u_m to  the  corresponding
          integer of the enumerated object or type _N_a_m_e in a MIB.
          The MIB must be loaded.

          _f_a_l_s_e is returned if the object or type is not  defined
          in  any  loaded  MIB, or if it does not define the sym-
          bolic value as enumerated.

     get(Agent,Vars) -> Values | {error, Reason}

          Types
               Agent = pid() | atom()
               Vars = [oid()]
               Values = [term()]
               Reason = {atom(), oid()}




Ericsson Utvecklings ALBast change: snmp  3.2.1                   5






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



          Performs a GET operation on the agent. All  loaded  MIB
          objects  are visible in this operation. The agent calls
          the corresponding instrumentation functions just as  if
          it  was  a  GET request coming from a manager. That the
          request     specific      parameters      (such      as
          _s_n_m_p:_c_u_r_r_e_n_t__r_e_q_u_e_s_t__i_d/_0  are  not  accessible for the
          instrumentation functions if this function is used.

     get_agent_caps()  ->  [[SysORIndex,   SysORID,   SysORDescr,
     SysORUpTime]]

          Types
               SysORIndex = integer()
               SysORId = oid()
               SysORDescr = string()
               SysORUpTime = integer()

          Returns all AGENT-CAPABILITY statements in the  sysORT-
          able  in  the  agent.  This  table  is  defined  in the
          SNMPv2-MIB.

     info(Agent) -> [{Key, Value}]

          Types
               Agent = pid() | atom()

          Returns a list (a  dictionary)  containing  information
          about  the  agent.  Information  includes  loaded MIBs,
          registered subagents, some information about the memory
          allocation.

     int_to_enum(Name,Int) -> {value, Enum} | false

          Types
               Name = atom()
               Int = int()
               Enum = atom()

          Converts the integer _I_n_t to the corresponding  symbolic
          value  of  the enumerated object or type _N_a_m_e in a MIB.
          The MIB must be loaded.

          _f_a_l_s_e is returned if the object or type is not  defined
          in  any  loaded  MIB, or if it does not define the sym-
          bolic value as enumerated.

     is_consistent(Mibs) -> ok | {error, Reason}

          Types
               Mibs = [MibName]
               MibName = string()




Ericsson Utvecklings ALBast change: snmp  3.2.1                   6






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



          Checks for multiple usage  of  object  identifiers  and
          traps between MIBs.

     load_mibs(Agent,Mibs) -> ok | {error, Reason}

          Types
               Agent = pid() | atom()
               Mibs = [MibName]
               MibName = string()

          Loads _M_i_b_s into an agent. If the agent cannot load  all
          MIBs,  it  will indicate where loading was aborted. The
          _M_i_b_N_a_m_e is the name of the Mib, including the  path  to
          where the compiled mib is found. For example,

                    Dir = code:priv_dir(my_app) ++ "/mibs/",
                    snmp:load_mibs(snmp_master_agent, [Dir ++ "MY-MIB"]).

     local_time_to_date_and_time(Local) -> DateAndTime

          Types
               Local = {{Y, Mo, D}, {H, M, S}}
               DateAndTime = [int()]

          Converts a local time value to a DateAndTime list.  The
          local  time  value  on  the  same  format as defined in
          calendar(3).

     log_to_txt(LogDir, Mibs)
     log_to_txt(LogDir, Mibs, OutFile) -> ok | {error, Reason}
     log_to_txt(LogDir, Mibs, OutFile, LogName) -> ok  |  {error,
     Reason}
     log_to_txt(LogDir, Mibs, OutFile, LogName, LogFile) -> ok  |
     {error, Reason}
     log_to_txt(LogDir, Mibs, OutFile, LogName,  LogFile,  Start)
     -> ok | {error, Reason}
     log_to_txt(LogDir, Mibs, OutFile, LogName,  LogFile,  Start,
     Stop) -> ok | {error, Reason}

          Types
               LogDir = string()
               Mibs = [MibName]
               OutFile = string()
               MibName = string()
               LogName = string()
               LogFile = string()
               Start = Stop = null |  datetime()  |  {local_time,
               datetime()} | {universal_time, datetime()}

          Converts an Audit Trail Log to a  readable  text  file,
          where  each  item has a trailing TAB character, and any
          TAB character in the body of an item has been  replaced



Ericsson Utvecklings ALBast change: snmp  3.2.1                   7






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



          by ESC TAB.

          The function can be used on a  running  system,  or  by
          copying the entire log directory and calling this func-
          tion. SNMP must be running  in  order  to  provide  MIB
          information.

          _L_o_g_D_i_r is the name of the  directory  where  the  audit
          trail log is stored. _M_i_b_s is a list of Mibs to be used.
          The function uses the information in the Mibs  to  con-
          vert  for  example object identifiers to their symbolic
          name. _O_u_t_F_i_l_e is the name of the generated textfile. It
          defaults  to  "./_s_n_m_p__l_o_g._t_x_t".  _L_o_g_N_a_m_e is the name of
          the log (default is "_s_n_m_p _l_o_g"), _L_o_g_F_i_l_e is the name of
          the  log  file  (default  is  "_s_n_m_p._l_o_g"). _S_t_a_r_t is the
          start (first) date and time from which log events  will
          be  converted and _S_t_o_p is the stop (last) date and time
          to which log events will be converted.

          The format of an audit trail log text item is  as  fol-
          lows:

          _T_a_g _A_d_d_r - _C_o_m_m_u_n_i_t_y [_T_i_m_e_S_t_a_m_p] _V_s_n
          _P_D_U

          where _T_a_g is _r_e_q_u_e_s_t, _r_e_s_p_o_n_s_e, _r_e_p_o_r_t, _t_r_a_p or _i_n_f_o_r_m;
          Addr  is  _I_P:_P_o_r_t  (or  comma  space  separated list of
          such); _C_o_m_m_u_n_i_t_y is the community parameter (SNMP  ver-
          sion  v1 and v2), or _S_e_c_L_e_v_e_l:"_A_u_t_h_E_n_g_i_n_e_I_D":"_U_s_e_r_N_a_m_e"
          (SNMP v3); _T_i_m_e_S_t_a_m_p is a date and time stamp, and  _V_s_n
          is  the  SNMP  version. _P_D_U is a textual version of the
          protocol data unit. There is a new line between _V_s_n and
          _P_D_U.

     mib_to_hrl(MibName) -> ok | {error, Reason}

          Types
               MibName = string()

          Generates a ._h_r_l file with definitions of  Erlang  con-
          stants  for  the  objects  in the MIB. The ._h_r_l file is
          called <_M_i_b_N_a_m_e>._h_r_l. The MIB  must  be  compiled,  and
          present in the current directory.

          The _m_i_b__t_o__h_r_l generator can be  invoked  from  the  OS
          command line by using the command _e_r_l_c. _e_r_l_c recognises
          the extension ._b_i_n, and invokes this function for files
          with that extension.

     name_to_oid(Name) -> {value, oid()} | false

          Types



Ericsson Utvecklings ALBast change: snmp  3.2.1                   8






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



               Name = atom()

          Looks up the OBJECT IDENTIFIER of a MIB  object,  given
          the symbolic name. Note, the OBJECT IDENTIFIER is given
          for the object, not for an instance.

          _f_a_l_s_e is returned if the object is not defined  in  any
          loaded MIB.

     oid_to_name(OID) -> {value, Name} | false

          Types
               OID = oid()
               Name = atom()

          Looks up the symbolic  name  of  a  MIB  object,  given
          OBJECT IDENTIFIER.

          _f_a_l_s_e is returned if the object is not defined  in  any
          loaded MIB.

     register_subagent(Agent,SubTreeOid,Subagent) -> ok | {error,
     Reason}

          Types
               Agent = pid() | atom()
               SubTreeOid = oid()
               SubAgent = pid()

          Registers a subagent under a subtree of another agent.

          It is easy to make mistakes when registering  subagents
          and  this  activity should be done carefully. For exam-
          ple, a strange behaviour would result from the  follow-
          ing configuration:

          snmp_agent:register_subagent(MAPid,[1,2,3,4],SA1),
          snmp_agent:register_subagent(SA1,[1,2,3], SA2).

          _S_A_2 will not get requests starting with object identif-
          ier [_1, _2, _3] since _S_A_1 does not.

     send_notification(Agent,Notification,Receiver)
     send_notification(Agent,Notification,Receiver,Varbinds)
     send_notification(Agent,Notification,Receiver,
     NotifyName,Varbinds)
     send_notification(Agent,Notification,Receiver,
     NotifyName,ContextName,Varbinds) -> void()

          Types
               Agent = pid() | atom()
               Notification = atom()



Ericsson Utvecklings ALBast change: snmp  3.2.1                   9






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



               Receiver = no_receiver | {Tag, Recv}
               Tag = term()
               Recv = pid() | atom() | {M, F, A}
               NotifyName = string()
               ContextName = string()
               Varbinds = [Varbind]
               Varbind = {Variable, Value} |  {Column,  RowIndex,
               Value} | {OID, Value}
               Variable = atom()
               Column = atom()
               OID = oid()
               Value = term()
               RowIndex = [int()]

          Sends the notification _N_o_t_i_f_i_c_a_t_i_o_n to  the  management
          targets  defined  for _N_o_t_i_f_y_N_a_m_e in the _s_n_m_p_N_o_t_i_f_y_T_a_b_l_e
          in SNMP-NOTIFICATION-MIB from the specified context. If
          no _N_o_t_i_f_y_N_a_m_e is specified (or if it is ""), the notif-
          ication is sent to all management targets. If  no  _C_o_n_-
          _t_e_x_t_N_a_m_e is specified, the default "" context is used.

          The  parameter  _R_e_c_e_i_v_e_r  specifies  where  information
          about  delivery  of Inform-Requests should be sent. The
          agent sends Inform-Requests and waits for  acknowledge-
          ments  from  the managers. If the _R_e_c_e_i_v_e_r is specified
          as _n_o__r_e_c_e_i_v_e_r,  nothing  is  sent.  Otherwise,  it  is
          specified  as  {_T_a_g,  _R_e_c_v}. The receiver (_R_e_c_v) gets a
          message:

            * {_s_n_m_p__t_a_r_g_e_t_s, _T_a_g, _A_d_d_r_e_s_s_e_s}

          _A_d_d_r_e_s_s_e_s is a list of management target addresses.  If
          UDP  over  IP is used, this is a 2-tuple {_I_P, _U_D_P_p_o_r_t},
          where _I_P is a 4-tuple with the IP address, and  _U_D_P_p_o_r_t
          is  an  integer. The notification is sent as an Inform-
          Request to each target address in _A_d_d_r_e_s_s_e_s.  If  there
          are  no  targets  for  which an Inform-Request is sent,
          _A_d_d_r_e_s_s_e_s is the empty list [].

          For each such _A_d_d_r_e_s_s is the _A_d_d_r_e_s_s_e_s list, one of the
          following two messages is sent to _R_e_c_v:

            * {_s_n_m_p__n_o_t_i_f_i_c_a_t_i_o_n, _T_a_g, {_g_o_t__r_e_s_p_o_n_s_e, _A_d_d_r_e_s_s}}

            * {_s_n_m_p__n_o_t_i_f_i_c_a_t_i_o_n, _T_a_g, {_n_o__r_e_s_p_o_n_s_e, _A_d_d_r_e_s_s}}

          The optional argument _V_a_r_b_i_n_d_s defines values  for  the
          objects  in  the notification. If no value is given for
          an  object,  the  _A_g_e_n_t  performs  a  get-operation  to
          retrieve the value.





Ericsson Utvecklings ALBast change: snmp  3.2.1                  10






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



          _V_a_r_b_i_n_d_s is a list of _V_a_r_b_i_n_d, where  each  _V_a_r_b_i_n_d  is
          one of:

            * {_V_a_r_i_a_b_l_e, _V_a_l_u_e}, where _V_a_r_i_a_b_l_e is  the  symbolic
              name of a scalar variable referred to in the notif-
              ication specification.

            * {_C_o_l_u_m_n, _R_o_w_I_n_d_e_x, _V_a_l_u_e}, where _C_o_l_u_m_n is the sym-
              bolic name of a column variable. _R_o_w_I_n_d_e_x is a list
              of indices for the specified element.  If  this  is
              the case, the OBJECT IDENTIFIER sent in the notifi-
              cation is the _R_o_w_I_n_d_e_x appended to the OBJECT IDEN-
              TIFIER  for  the  table  column. This is the OBJECT
              IDENTIFIER which specifies the element.

            * {_O_I_D, _V_a_l_u_e}, where _O_I_D is  the  OBJECT  IDENTIFIER
              for  an  instance of an object, scalar variable, or
              column variable.

          For example, to specify that  _s_y_s_L_o_c_a_t_i_o_n  should  have
          the  value "_u_p_s_t_a_i_r_s" in the notification, we could use
          one of:

            * {_s_y_s_L_o_c_a_t_i_o_n, "_u_p_s_t_a_i_r_s"} or

            * {[_1, _3, _6, _1, _2, _1, _1, _6, _0], "_u_p_s_t_a_i_r_s"} or

            * {?_s_y_s_L_o_c_a_t_i_o_n__i_n_s_t_a_n_c_e, "_u_p_s_t_a_i_r_s"} (provided  that
              the generated ._h_r_l file is included)

          If a variable in the notification is a  table  element,
          the  _R_o_w_I_n_d_e_x for the element must be given in the _V_a_r_-
          _b_i_n_d_s list. In this case, the OBJECT IDENTIFIER sent in
          the  notification is the OBJECT IDENTIFIER that identi-
          fies this element. This OBJECT IDENTIFIER could be used
          in a get operation later.

          This function is asynchronous, and does not return  any
          information.  If an error occurs, _s_n_m_p__e_r_r_o_r:_u_s_e_r__e_r_r/_2
          is called and the notification is discarded.

     send_trap(Agent,Trap,Community)
     send_trap(Agent,Trap,Community,Varbinds) -> void()

          Types
               Agent = pid() | atom()
               Trap = atom()
               Community = string()
               Varbinds = [Varbind]
               Varbind = {Variable, Value} |  {Column,  RowIndex,
               Value} | {OID, Value}
               Variable = atom()



Ericsson Utvecklings ALBast change: snmp  3.2.1                  11






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



               Column = atom()
               OID = oid()
               Value = term()
               RowIndex = [int()]

          Note! This function is only kept for backwards compati-
          bility reasons. Use _s_e_n_d__n_o_t_i_f_i_c_a_t_i_o_n instead.

          Sends the trap _T_r_a_p to the managers defined for _C_o_m_m_u_n_-
          _i_t_y  in  the  _i_n_t_T_r_a_p_D_e_s_t_T_a_b_l_e  in  OTP-SNMPEA-MIB. The
          optional  argument  _V_a_r_b_i_n_d_s  defines  values  for  the
          objects  in  the  trap.  If  no  value  is given for an
          object, the _A_g_e_n_t performs a get-operation to  retrieve
          the value.

          _V_a_r_b_i_n_d_s is a list of _V_a_r_b_i_n_d, where  each  _V_a_r_b_i_n_d  is
          one of:

            * {_V_a_r_i_a_b_l_e, _V_a_l_u_e}, where _V_a_r_i_a_b_l_e is  the  symbolic
              name  of  a scalar variable referred to in the trap
              specification.

            * {_C_o_l_u_m_n, _R_o_w_I_n_d_e_x, _V_a_l_u_e}, where _C_o_l_u_m_n is the sym-
              bolic name of a column variable. _R_o_w_I_n_d_e_x is a list
              of indices for the specified element.  If  this  is
              the case, the OBJECT IDENTIFIER sent in the trap is
              the _R_o_w_I_n_d_e_x appended to the OBJECT IDENTIFIER  for
              the  table  column.  This  is the OBJECT IDENTIFIER
              which specifies the element.

            * {_O_I_D, _V_a_l_u_e}, where _O_I_D is  the  OBJECT  IDENTIFIER
              for  an  instance of an object, scalar variable, or
              column variable.

          For example, to specify that  _s_y_s_L_o_c_a_t_i_o_n  should  have
          the value "_u_p_s_t_a_i_r_s" in the trap, we could use one of:

            * {_s_y_s_L_o_c_a_t_i_o_n, "_u_p_s_t_a_i_r_s"} or

            * {[_1, _3, _6, _1, _2, _1, _1, _6, _0], "_u_p_s_t_a_i_r_s"} or

            * {?_s_y_s_L_o_c_a_t_i_o_n__i_n_s_t_a_n_c_e, "_u_p_s_t_a_i_r_s"} (provided  that
              the generated ._h_r_l file is included)

          If a variable in the  trap  is  a  table  element,  the
          _R_o_w_I_n_d_e_x  for the element must be given in the _V_a_r_b_i_n_d_s
          list. In this case, the OBJECT IDENTIFIER sent  in  the
          trap is the OBJECT IDENTIFIER that identifies this ele-
          ment. This OBJECT IDENTIFIER could be  used  in  a  get
          operation later.





Ericsson Utvecklings ALBast change: snmp  3.2.1                  12






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



          This function is asynchronous, and does not return  any
          information.  If an error occurs, _s_n_m_p__e_r_r_o_r:_u_s_e_r__e_r_r/_2
          is called and the trap is discarded.

     universal_time_to_date_and_time(UTC) -> DateAndTime

          Types
               UTC = {{Y, Mo, D}, {H, M, S}}
               DateAndTime = [int()]

          Converts a universal time value to a DateAndTime  list.
          The  unversal  time value on the same format as defined
          in calendar(3).

     unload_mibs(Agent,Mibs) -> ok | {error, Reason}

          Types
               Agent = pid() | atom()
               Mibs = [MibName]
               MibName = string()

          Unloads MIBs into an agent. If  it  cannot  unload  all
          MIBs, it will indicate where unloading was aborted.

     unregister_subagent(Agent,SubagentOidOrPid)  ->  ok  |  {ok,
     SubAgentPid} | {error, Reason}

          Types
               Agent = pid() | atom()
               SubTreeOidorPid = oid() | pid()

          Unregisters a subagent. If the  second  argument  is  a
          pid,  then  that subagent will be unregistered from all
          trees in _A_g_e_n_t.

     validate_date_and_time(DateAndTime) bool()

          Types
               DateAndTime = term()

          Checks if _D_a_t_e_A_n_d_T_i_m_e is a correct  DateAndTime  value,
          as  specified  in RFC1903. This function can be used in
          instrumentation functions  to  validate  a  DateAndTime
          value.

     verbosity(Ref,Verbosity) -> void()

          Types
               Ref = pid() | snmp_master_agent  |  snmp_net_if  |
               snmp_mib | snmp_symbolic_store | snmp_note_store |
               snmp_local_db
               Verbosity = silence | info | log | debug | trace



Ericsson Utvecklings ALBast change: snmp  3.2.1                  13






snmp(3)             ERLANG MODULE DEFINITION              snmp(3)



          Sets verbosity for  the  designated  process.  For  the
          lowest  verbosity  _s_i_l_e_n_c_e,  nothing  is  printed.  The
          higher the verbosity, the more is printed.

SEE ALSO
     calendar(3), erlc(1)

AUTHORS
     Martin Bjorklund - support@erlang.ericsson.se
     Klas Eriksson - support@erlang.ericsson.se













































Ericsson Utvecklings ALBast change: snmp  3.2.1                  14



