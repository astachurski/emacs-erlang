


ets(3)              ERLANG MODULE DEFINITION               ets(3)



MODULE
     ets - Built-in Term Storage

DESCRIPTION
     This module acts as an interface to the Erlang built-in term
     storage  BIFs. The module provides the ability to store very
     large quantities of data in an Erlang runtime system, and to
     have  _c_o_n_s_t_a_n_t  access  time to this data (or in the case of
     the _o_r_d_e_r_e_d__s_e_t data-type access time  proportional  to  the
     logarithm  of  the number of elements in the table). Data is
     organized as a set of dynamic tables. Each table is  created
     by  a  process.  When  the  process terminates, the table is
     automatically destroyed. A table  can  store  tuples.  Every
     table has access rights set at creation.

     The number of tables stored on one Erlang node  is  limited.
     The  current default limit is approximately 1400 tables. The
     upper limit can be  increased  by  setting  the  environment
     variable  _E_R_L__M_A_X__E_T_S__T_A_B_L_E_S before starting the Erlang run-
     time system (i.e. with the -_e_n_v  option  to  _e_r_l/_w_e_r_l).  The
     actual  limit may be slightly higher than the one specified,
     but never lower.

     Tables  are  divided  into  four   different   types,   _s_e_t,
     _o_r_d_e_r_e_d__s_e_t,  _b_a_g  and  _d_u_p_l_i_c_a_t_e__b_a_g.  A _s_e_t or _o_r_d_e_r_e_d__s_e_t
     table can only have one tuple associated with  each  key,  a
     _b_a_g  table can have multiple tuples associated with a single
     key whereas a _d_u_p_l_i_c_a_t_e__b_a_g table can have multiple  identi-
     cal objects in the same table.

     In the  current  implementation,  every  object  insert  and
     look-up operation results in one copy of the object.

     This module provides very  limited  support  for  concurrent
     updates.  No  locking  is available, but the _s_a_f_e__f_i_x_t_a_b_l_e/_2
     function can be used to guarantee that a sequence of _f_i_r_s_t/_1
     and _n_e_x_t/_2 calls will traverse the table without errors even
     if another process  (or  the  same  process)  simultaneously
     deletes or inserts elements in the table.

     If desired, locking and transactions must be implemented  on
     top  of these functions. This is done by the mnesia database
     system.

     There is no automatic garbage  collection  for  tables.  The
     table  is not destroyed automatically if there are no refer-
     ences to it from a process. The table has  to  be  destroyed
     explicitly  at user level. It is destroyed if the owner ter-
     minates, or with _d_e_l_e_t_e/_1.

     '$_e_n_d__o_f__t_a_b_l_e' should not be used as a key since this  atom
     is used to mark the end of the table when using first/next.



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  1






ets(3)              ERLANG MODULE DEFINITION               ets(3)



     In general, the functions will exit with  reason  _b_a_d_a_r_g  if
     any  argument  is of the wrong format, or if the table ID is
     invalid.


EXPORTS
     new(Name, Type)

          Creates a new table  and  returns  a  table  identifier
          which  can be used in subsequent operations. This table
          ID can also be sent to other processes so that a  table
          can be shared between processes. It is completely loca-
          tion transparent and can be sent to processes at  other
          nodes. Accordingly, the table identifier can be used as
          a location transparent store. Large amounts of data can
          be distributed to locations where it can be stored.

          The parameter _T_y_p_e is a list which  defaults  to  [_s_e_t,
          _p_r_o_t_e_c_t_e_d] if [] is specified. The list may contain the
          following atoms:

            * _s_e_t The table is a _s_e_t table - one key, one object,
              no order among elements.

            * _o_r_d_e_r_e_d__s_e_t The table is a _o_r_d_e_r_e_d__s_e_t table -  one
              key,  one  object,  ordered  in  Erlang term order,
              which is the order implied by the <  and  >  opera-
              tors.  Tables  of  this  type  behave slightly dif-
              ferently in some situations. Each API  function  of
              concern notes this different behaviour.

            * _b_a_g The table is a _b_a_g table which can have  multi-
              ple objects per key.

            * _d_u_p_l_i_c_a_t_e__b_a_g The table is  a  _d_u_p_l_i_c_a_t_e__b_a_g  table
              which can have multiple copies of the same object.

            * _p_u_b_l_i_c The table is open to  both  read  and  write
              operations.  Any  process  may read or write to the
              table. If this option is used, the _e_t_s table can be
              seen  as a shared memory segment which is shared by
              all Erlang processes.

            * _p_r_o_t_e_c_t_e_d The owner  can  read  and  write  to  the
              table. Other processes can only read the table.

            * _p_r_i_v_a_t_e Only the owner process can read or write to
              the table.

            * _n_a_m_e_d__t_a_b_l_e If this option is  present,  the  table
              can  be  accessed  by name. With this option, it is
              possible to have globally accessible tables without



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  2






ets(3)              ERLANG MODULE DEFINITION               ets(3)



              passing the table identifier around.

            * {_k_e_y_p_o_s, _P_o_s} By default, the first element of each
              tuple inserted in a table is the key. However, this
              might not always be appropriate. In particular,  we
              do  not  want the first element to be the key if we
              want to insert Erlang  records  in  a  table.  When
              creating  a  table, it is possible to specify which
              tuple position is the key.

  Warning:
     Do not assume anything about the datatype of the table iden-
     tifier.


     insert(Tab, Object)

          Inserts _O_b_j_e_c_t into the table _T_a_b. The object must be a
          tuple  with a size equal to or greater than one. If the
          table was created with the _k_e_y_p_o_s option, the size  can
          also  be  supplied there. By default, the first element
          of the object is the key of the object. Returns _t_r_u_e.

     lookup(Tab, Key)

          Searches the table _T_a_b for object(s) with the  key  _K_e_y
          and  returns  a list of the found object(s). Insert and
          look-up  times  in  tables  of  type   _s_e_t,   _b_a_g   and
          _d_u_p_l_i_c_a_t_e__b_a_g  are  constant, regardless of the size of
          the table. For the _o_r_d_e_r_e_d__s_e_t data-type,  the  look-up
          time  is  proportional to the (binary) logarithm of the
          number of elements (it is implemented as a tree).

          The following example illustrates:

          1>T=ets:new(mytab, [bag, public]).
          {6, <0.19.0>}
          2>ets:insert(T, {a, 2, xx, yy}).
          true
          3>ets:insert(T, {a, 2, {peter, pan}, 77}).
          true
          4>ets:lookup(T, a).
          [{a, 2, xx, yy}, {a, 2, {peter, pan}, 77}]
          5>ets:insert(T, {b, 123, {peter,  pan}, 77}).
          true
          6>ets:lookup(T, b).
          [{b, 123, {peter, pan}, 77}]

          If the table is of type _s_e_t or _o_r_d_e_r_e_d__s_e_t,  the  func-
          tion  returns either [], or a list of maximum length of
          one (there can be only be one object with a single  key
          in a set).



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  3






ets(3)              ERLANG MODULE DEFINITION               ets(3)



          If the table is of type _b_a_g or _d_u_p_l_i_c_a_t_e__b_a_g , a  look-
          up  returns  a  list  of  arbitrary  length. It is also
          worthwhile to note that _b_a_g tables have  the  following
          two properties.

            * The same object cannot  occur  twice  in  the  same
              table (no duplicates).

            * The time order of object insertions  is  preserved.
              If  object{_x,  _X} is inserted before object {_x, _Y},
              the call _e_t_s:_l_o_o_k_u_p(_T, _x) is guaranteed  to  return
              the  list  [{_x, _X}, {_x, _Y}], as opposed to the list
              [{_x, _Y}, {_x, _X}]

     lookup_element(Tab, Key, Pos)

          This function looks up the Pos'th element of the object
          in  table  _T_a_b, with key _K_e_y. If no such object exists,
          the function exists with reason _b_a_d_a_r_g. If the table is
          of type _b_a_g or _d_u_p_l_i_c_a_t_e__b_a_g, a list of the elements is
          returned.

     delete(Tab, Key) -> true

          Deletes object(s) with the key _K_e_y in  the  table  _T_a_b.
          Returns _t_r_u_e, or exits with reason _b_a_d_a_r_g if _T_a_b is not
          a valid Table.

     delete(Tab)

          Deletes the table _T_a_b. Returns _t_r_u_e, or exits with rea-
          son _b_a_d_a_r_g if _T_a_b is not a valid Table.

     update_counter(Tab, Key, Incr)

          In a table of type _s_e_t or _o_r_d_e_r_e_d__s_e_t, an efficient way
          of  managing  counters  is to use an object with one or
          more integers to associate one or  more  counters  with
          _K_e_y.   The   function   _u_p_d_a_t_e__c_o_u_n_t_e_r/_3  destructively
          changes the object with key _K_e_y by adding  the  integer
          value  _I_n_c_r to the counter. The return value is the new
          value of the counter. _I_n_c_r can be either:

            * An integer that is added to the  (integer)  element
              directly  following  the  key in the tuple (i.e. at
              position <keypos> + 1)

            * A tuple {_P_o_s, _I_n_c_r_e_m_e_n_t} where _P_o_s is the  position
              of  the  counter element in the tuple and _I_n_c_r_e_m_e_n_t
              is the integer value to be added to that element.





Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  4






ets(3)              ERLANG MODULE DEFINITION               ets(3)



          This function fails with _b_a_d_a_r_g if:

            * no object with the right key exists

            * the object  in  the  counter  position  is  not  an
              integer

            * the table is of type _d_u_p_l_i_c_a_t_e__b_a_g or _b_a_g

            * the object in the table has the wrong arity.

     first(Tab)

          Returns the 'first' _K_e_y in the table _T_a_b. There  is  no
          apparent  order  among  the  objects in tables of other
          types than _o_r_d_e_r_e_d__s_e_t, but there is always an internal
          order  known  only  by the table itself. In the case of
          the _o_r_d_e_r_e_d__s_e_t table type, the  first  key  in  Erlang
          term  order  is  returned.  Returns  '$_e_n_d__o_f__t_a_b_l_e' if
          there is no first key (the table is empty).

     next(Tab, Key)

          Returns the 'next' table key after _K_e_y. '$_e_n_d__o_f__t_a_b_l_e'
          is  returned  if  the object associated with _K_e_y is the
          'last' object in the table. As with  _f_i_r_s_t/_1  the  only
          table   type   where   the   order  has  a  meaning  is
          _o_r_d_e_r_e_d__s_e_t.  For  the  table  types   _s_e_t,   _b_a_g   and
          _d_u_p_l_i_c_a_t_e__b_a_g  the  function fails with _b_a_d_a_r_g if there
          is no object with the key _K_e_y, except for the case when
          the  object  with  the  associated key has been deleted
          from a (still) _f_i_x_e_d table (see _s_a_f_e__f_i_x_t_a_b_l_e/_2 below).
          If  the  table  is  of  type  _o_r_d_e_r_e_d__s_e_t  the function
          returns the next object in order, disregarding the fact
          that the key _K_e_y may or may not exist.

     last(Tab)

          Works exactly as _f_i_r_s_t/_1 but returns the last object in
          Erlang  term  order for the _o_r_d_e_r_e_d__s_e_t table type. For
          all other table types, _f_i_r_s_t/_1 and _l_a_s_t/_1 are synonyms.

     prev(Tab, Key)

          Returns the previous table key, which only has  meaning
          for  the  _o_r_d_e_r_e_d__s_e_t  table  type. For all other table
          types, _n_e_x_t/_2  and  _p_r_e_v/_2  are  synonyms,  one  cannot
          backup  to  an  'object  passed  earlier' in a table of
          other type than _o_r_d_e_r_e_d__s_e_t.

     slot(Tab, I)




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  5






ets(3)              ERLANG MODULE DEFINITION               ets(3)



          This is another way of traversing a  table.  The  first
          _s_l_o_t  of  a  table  is 0 and the table can be traversed
          with consecutive calls to _s_l_o_t/_2. Each call  returns  a
          list  of  objects. '$_e_n_d__o_f__t_a_b_l_e' is returned when the
          end of the table is reached. This function  fails  with
          _b_a_d_a_r_g if the _I argument is out of range.

          While consecutive calls to _s_l_o_t may look  like  a  safe
          way  to  traverse  a  table  even if it is concurrently
          updated by another process, it _i_s _n_o_t _s_o. A sequence of
          calls  to  _s_l_o_t/_2  may result in unexpected _b_a_d_a_r_g's if
          the table is internally resized as an effect of deletes
          made  from  another  process (or the traversing process
          itself). By using _s_a_f_e__f_i_x_t_a_b_l_e/_2, the table  will  not
          resize, but then again a sequence of _f_i_r_s_t/_1 and _n_e_x_t/_2
          can be used safely on a _f_i_x_e_d table,  so  _s_l_o_t  is  not
          safer than _f_i_r_s_t/_1 and _n_e_x_t/_2.

          For the _o_r_d_e_r_e_d__s_e_t data-type, this function  has  even
          more  limited  usage.  It will return a list containing
          the _I:th element in the table (in Erlang  term  order).
          Concurrent   updates   can   make  a  traversal  of  an
          _o_r_d_e_r_e_d__s_e_t  using  _s_l_o_t/_2  behave  very  unexpectedly.
          Calls  to  _s_l_o_t/_2 on _o_r_d_e_r_e_d__s_e_t's with the index given
          (_I) equal to the number of objects in  the  table  will
          return  the  atom  '$end_of_table'.  Calls with indexes
          larger than the number of elements  will  result  in  a
          _b_a_d_a_r_g exit.

          Do not use this function. It may be removed in a future
          release.

     fixtable(Tab, true|false)

          This function toggles the  table  ability  to  "rehash"
          itself.  It  is  primarily  used  by the Mnesia DBMS to
          implement functions which allow write operations  in  a
          table,  although  the  table is in the process of being
          copied to disk or to another node.

          The function keeps no track of when and how tables  are
          fixed,  it is actually more to be regarded as an inter-
          nal interface used from the  _s_a_f_e__f_i_x_t_a_b_l_e/_2  function.
          It  is  retained  _o_n_l_y  for backward compatibility, use
          _s_a_f_e__f_i_x_t_a_b_l_e/_2 instead.

     safe_fixtable(Tab, true|false)

          This function implements  limited  concurrency  support
          for  tables  of  the  _s_e_t,  _b_a_g and _d_u_p_l_i_c_a_t_e__b_a_g table
          types. When a process 'fixes' a table, it remains _f_i_x_e_d
          until  that  process either 'releases' the table or the



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  6






ets(3)              ERLANG MODULE DEFINITION               ets(3)



          process dies. If several processes 'fixes' a table, the
          table  will  be released when the _l_a_s_t process releases
          it (or exits). A reference counter is also  kept  on  a
          per  process basis, so _N consecutive 'fixes' of a table
          requires _N 'releases' to actually release the table.

          When a table is 'fixed',  a  sequence  of  _f_i_r_s_t/_1  and
          _n_e_x_t/_2 calls are guaranteed to succeed, that is without
          generating exits due to deleted keys used in the _n_e_x_t/_2
          call. An example follows:

                    clean_all_with_value(Tab, X) ->
                      safe_fixtable(Tab, true), % Make sure the table is
                                                % not rehashed.
                      clean_all_with_value(Tab,X,ets:first(Tab)),
                      safe_fixtable(Tab,false).

                    clean_all_with_value(Tab,X,'$end_of_table') ->
                      true;
                    clean_all_with_value(Tab,X,Key) ->
                      case ets:lookup(Tab,Key) of
                        [{Key,X}] ->
                          ets:delete(Tab,Key);
                        _ -> % This may be either [{Key,_}] or [] due to
                             % concurrent updates
                          true
                      end,
                      clean_all_with_value(Tab,X,ets:next(Tab,Key)).

          The above example would have generated a _b_a_d_a_r_g exit if
          the   table  had  not  been  'fixed'  before  the  loop
          _c_l_e_a_n__a_l_l__w_i_t_h__v_a_l_u_e/_3.

          Note that a table which is 'fixed'  does  not  actually
          remove  the  elements deleted until it is 'released' by
          all processes  that  have  'fixed'  it.  If  a  process
          'fixes'  the  table  and  _n_e_v_e_r releases it, the memory
          used by the deleted objects will never  be  freed.  The
          performance  of  operations  on  the  table  will  also
          degrade significantly.

          By  using  calls  to  _i_n_f_o/_2,  one  can  inspect  which
          processes  are 'fixing' the table and when it was first
          'fixed'. A system where a lot of processes are 'fixing'
          tables  may  need  a process that monitors those tables
          and sends alarms when tables have been 'fixed'  for  to
          long.

          For tables of the _o_r_d_e_r_e_d__s_e_t  type,  'fixing'  has  no
          usage,  consecutive  calls  to  _f_i_r_s_t/_1 and _n_e_x_t/_2 will
          always succeed, regardless of if the table  is  'fixed'
          or not.



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  7






ets(3)              ERLANG MODULE DEFINITION               ets(3)



     all()

          Returns a list of all tables on this node.

     match(Tab, Pattern)

          Tries to match the object(s) in table _T_a_b with the pat-
          tern  _P_a_t_t_e_r_n.  _P_a_t_t_e_r_n may contain '_' , which matches
          any object, bound parts, and variables.  Pattern  vari-
          ables  have the form of atoms beginning with a '$' sign
          and followed by a number, e.g., '$_0' or '$_3_1'. If  suc-
          cessful,  the  result of the call is a list of variable
          bindings. The reason for providing a matching  function
          is  to  scan large portions of a table, searching for a
          particular object without having  to  copy  the  entire
          table from the table space to the user space.

          The following interaction with the Erlang shell  illus-
          trates how to use the _m_a_t_c_h/_2 function:

          7>ets:match(T, {a, 2, '$1', '$2'}).
           [[{peter, pan}, 77], [xx, yy]]

          The call to _m_a_t_c_h/_2 returned an  ordered  list  of  the
          variable  bindings  which  is  the  first  object  that
          matched the pattern, bound the variable $_1  to  {_p_e_t_e_r,
          _p_a_n},  and  the  variable  $_2  to _7_7. The second object
          which matched the pattern bound the variable $_1 to  _x_x,
          and  the variable $_2 to _y_y. The pattern '_' can be used
          as a wild-card. It matches everything, but it does  not
          bind any variables.

          8>ets:match(T, {a, 2, '$1', '_'}).
           [[{peter, pan}], [xx]]

          [] is returned if no match is found.

          The first part of the objects are used as keys  in  the
          tables  and  a match request with the first part of the
          bound pattern - not a variable or an  underscore  -  is
          very efficient. However, if the key part of the pattern
          is a variable, the entire table must be  searched.  The
          search  time  can  be  substantial if the table is very
          large.

          The special case where the pattern is a single variable
          will collect the entire table.

          9>ets:match(T, '$1').
           [[{a, 2, {peter, pan}, 77}], [{a, 2, xx, yy}],
            [{b, 123, {peter, pan}, 77}]]




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  8






ets(3)              ERLANG MODULE DEFINITION               ets(3)



          On tables of the _o_r_d_e_r_e_d__s_e_t data-type, the  result  is
          in the same order as in a _f_i_r_s_t/_1, _n_e_x_t/_2 sequence.

     match_object(Tab, Pattern)

          Tries to match the object(s) in table _T_a_b with the pat-
          tern  _P_a_t_t_e_r_n.  _P_a_t_t_e_r_n may contain '_' , which matches
          any object, bound parts, and variables.  Pattern  vari-
          ables  have the form of atoms beginning with a '$' sign
          and followed by a number,  e.g.,  '$_0'  or  '$_3_1'.  The
          result  is  a  list  of  matching objects (i.e complete
          table objects). This function differs from  _m_a_t_c_h/_2  in
          that  it  returns  complete objects and does not return
          any variable bindings. It is thus not  very  meaningful
          to use pattern variables, it will have exactly the same
          effect as using '_'.

          The following interaction with the Erlang shell  illus-
          trates how to use the _m_a_t_c_h__o_b_j_e_c_t/_2 function:

          7>ets:match_object(T, {a, 2, '_', '_'}).
           [{a, 2, peter, pan}, {a, 2, captain, hook}]

          The call to _m_a_t_c_h__o_b_j_e_c_t/_2 returned an ordered list  of
          objects that matched the pattern,

          [] is returned if no match is found.

          The first part of the objects are used as keys  in  the
          tables  and  a match request with the first part of the
          bound pattern - not a variable or an  underscore  -  is
          very efficient. However, if the key part of the pattern
          is a variable, the entire table must be  searched.  The
          search  time  can  be  substantial if the table is very
          large.

          The special case where the pattern is a single variable
          or '_' will collect the entire table.

          On tables of the _o_r_d_e_r_e_d__s_e_t data-type, the  result  is
          in the same order as in a _f_i_r_s_t/_1, _n_e_x_t/_2 sequence.

     match_delete(Tab, Pattern)

          Deletes object(s) which match _P_a_t_t_e_r_n in the table _T_a_b.
          This  can  be especially useful in combination with _b_a_g
          type tables. If the first element of _P_a_t_t_e_r_n is a vari-
          able, the entire table must be searched. Returns _t_r_u_e.

     rename(Tab,NewName)





Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  9






ets(3)              ERLANG MODULE DEFINITION               ets(3)



          Renames a (preferably) named table to the name _N_e_w_N_a_m_e.
          _N_e_w_N_a_m_e has to be an atom. Renaming a table that is not
          named will succeed, but is of course quite useless. The
          old  name  of  a  named  table can no longer be used to
          access it after it is renamed.

     info(Tab)

          Returns a tagged structure which  describes  the  table
          with the following tags:

            * _m_e_m_o_r_y The number of words allocated to the table.

            * _o_w_n_e_r The Pid of the owner of the table.

            * _s_i_z_e The number of objects inserted in the table.

            * _t_y_p_e Type _b_a_g, _d_u_p_l_i_c_a_t_e__b_a_g or type _s_e_t.

            * _p_r_o_t_e_c_t_i_o_n Public, protected, or private.

            * _n_o_d_e The name of the node  where  _T_a_b  is  actually
              stored.

            * _n_a_m_e The name of the table, as given to _n_e_w/_2.

            * _n_a_m_e_d__t_a_b_l_e true or false.

            * _k_e_y_p_o_s The position of the tuples which are the key
              position. The default is 1.

          _i_n_f_o/_1 returns _u_n_d_e_f_i_n_e_d if the table does not exist.

     info(Tab, Item)

          Same as above, but only for  the  information  that  is
          associated with _I_t_e_m.

          Except for the items mentioned above,  these  to  items
          can be specified in calls to _i_n_f_o/_2:

            * _f_i_x_e_d Returns _t_r_u_e if the table  is  fixed  by  any
              process,  otherwise  _f_a_l_s_e. If the table identifier
              is no longer valid (deleted) the atom _u_n_d_e_f_i_n_e_d  is
              returned.

            * _s_a_f_e__f_i_x_e_d  If  the  table  is  'fixed'  using  the
              _s_a_f_e__f_i_x_t_a_b_l_e  interface, the call returns a tuple:
              {_F_i_x_e_d_N_o_w_T_i_m_e, [{_P_i_d, _R_e_f_C_o_u_n_t}]}, where  _F_i_x_e_d_N_o_w_-
              _T_i_m_e  is  the  time when the table was fixed by the
              first  process  (which  may  not  be  one  of   the
              processes fixing it now), _P_i_d is a process 'fixing'



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                 10






ets(3)              ERLANG MODULE DEFINITION               ets(3)



              the table right now and _R_e_f_C_o_u_n_t is  the  reference
              counter for 'fixes' done by that process. There may
              be any number of processes in the list.

              In _a_l_l other cases, the atom _f_a_l_s_e is returned.

              One can use this to write  a  monitor  for  'fixed'
              tables if desired.

     tab2file(Tab, Filename)

          Dumps a table in the Erlang external term format to the
          file  called  _F_i_l_e_n_a_m_e. Returns _o_k, or {_e_r_r_o_r, _R_e_a_s_o_n}.
          The function may crash if bad arguments are  specified.
          The implementation of this function is not efficient.

     file2tab(Filename)

          Reads a file produced by the  _t_a_b_2_f_i_l_e/_2  function  and
          returns  {_o_k,  _T_a_b}  if the operation is successful, or
          {_e_r_r_o_r, _R_e_a_s_o_n} if it fails.

          The error {_e_r_r_o_r, _n_o_f_i_l_e} is returned whenever the file
          cannot be read. This will be changed in future releases
          so that {_e_r_r_o_r, _n_o_f_i_l_e} is only returned when the  file
          really  does  not  exist,  otherwise another error code
          will be returned. For applications that want to differ-
          ence  between  errors,  using  the routines in the _f_i_l_e
          module to detect if the file is nonexistent or inacces-
          sible  is  to  be  preferred  until  this  interface is
          changed.

     tab2list(Tab)

          Returns a list of all objects in the table.

     i()

          Displays a list of all local _e_t_s tables on the tty.

     i(Item)

          Browses an _e_t_s table on the tty. The _I_t_e_m  argument  is
          the  identifier displayed in the left most field by the
          _i() function.

AUTHOR
      Claes Wikstrom, Tony Rogvall, Patrik Nyblom - support@erlang.ericsson.se







Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                 11



