


erl_lint(3)         ERLANG MODULE DEFINITION          erl_lint(3)



MODULE
     erl_lint - The Erlang Code Linter

DESCRIPTION
     This module is used to check Erlang code for illegal  syntax
     and other bugs. It also warns against coding practices which
     are not recommended.

     The errors detected include:

       * redefined and undefined functions

       * unbound and unsafe variables

       * illegal record usage.

     Warnings include:

       * unused functions and imports

       * variables imported into matches

       * variables exported from _i_f/_c_a_s_e/_r_e_c_e_i_v_e

       * variables shadowed in lambdas and list comprehensions.

     Some of the warnings are optional, and can be turned  on  by
     giving the appropriate option, described below.

     The functions in this module are  invoked  automatically  by
     the  Erlang  compiler and there is no reason to invoke these
     functions separately unless you have written your own Erlang
     compiler.


EXPORTS
     module(AbsForms) -> {ok,Warnings} | {error,Errors,Warnings}
     module(AbsForms,    FileName)     ->     {ok,Warnings}     |
     {error,Errors,Warnings}
     module(AbsForms, FileName, CompileOptions) ->  {ok,Warnings}
     | {error,Errors,Warnings}

          Types
               AbsForms = [term()]
               FileName = FileName2 = atom() | string()
               Warnings = Errors = [{Filename2, [ErrorInfo]}]
               ErrorInfo = see separate description below.
               CompileOptions = [term()]

          This function checks all the  forms  in  a  module  for
          errors. It returns:




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  1






erl_lint(3)         ERLANG MODULE DEFINITION          erl_lint(3)



            {_o_k, _W_a_r_n_i_n_g_s}:
                There were no errors in the module.

            {_e_r_r_o_r, _E_r_r_o_r_s, _W_a_r_n_i_n_g_s}:
                There were errors in the module.

          The elements of _O_p_t_i_o_n_s selecting optional warnings are
          as follows:

            {_f_o_r_m_a_t, _V_e_r_b_o_s_i_t_y}:
                Causes warnings to be emitted for malformed  for-
                mat strings as arguments to _i_o:_f_o_r_m_a_t and similar
                functions. _V_e_r_b_o_s_i_t_y selects the amount of  warn-
                ings:  0  = no warnings; 1 = warnings for invalid
                format strings; 2 = warnings also when the  vali-
                dity  could not be checked (for example, when the
                format string argument is a variable).

            _u_n_u_s_e_d__v_a_r_s:
                Causes warnings to be emitted for variables which
                are  not  used,  with  the exception of variables
                beginning with an underscore ("Prolog style warn-
                ings").

          The _A_b_s_F_o_r_m_s of a module which comes from a  file  that
          is read through _e_p_p, the Erlang pre-processor, can come
          from many files. This  means  that  any  references  to
          errors  must  include the file name (see epp, or parser
          erl_parse The warnings and  errors  returned  have  the
          following format:

              [{FileName2,[ErrorInfo]}]

          The errors and warnings are  listed  in  the  order  in
          which  they  are  encountered  in the forms. This means
          that the errors from one file may be  split  into  dif-
          ferent entries in the list of errors.

     is_guard_test(Expr) -> bool()

          Types
               Expr = term()

          This function tests if _E_x_p_r is a legal guard test. _E_x_p_r
          is  an  Erlang  term representing the abstract form for
          the expression.  _e_r_l__p_a_r_s_e:_p_a_r_s_e__e_x_p_r_s(_T_o_k_e_n_s)  can  be
          used to generate a list of _E_x_p_r.

     format_error(ErrorDescriptor) -> string()

          Types
               ErrorDescriptor = errordesc()



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  2






erl_lint(3)         ERLANG MODULE DEFINITION          erl_lint(3)



          Takes an _E_r_r_o_r_D_e_s_c_r_i_p_t_o_r and  returns  a  string  which
          describes  the  error or warning. This function is usu-
          ally called implicitly  when  processing  an  _E_r_r_o_r_I_n_f_o
          structure (see below).

Error Information
     The _E_r_r_o_r_I_n_f_o mentioned  above  is  the  standard  _E_r_r_o_r_I_n_f_o
     structure  which is returned from all IO modules. It has the
     following format:

         {ErrorLine, Module, ErrorDescriptor}

     A string which describes the error is obtained with the fol-
     lowing call:

     apply(Module, format_error, ErrorDescriptor)

See Also
     erl_parse, epp

AUTHOR
     Robert Virding - support@erlang.ericsson.se

































Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  3



