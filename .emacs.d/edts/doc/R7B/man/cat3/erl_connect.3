


erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



NAME
     erl_connect - Communicate with Distributed Erlang

DESCRIPTION
     This module provides support for communication between  dis-
     tributed Erlang nodes and C nodes, in a manner that is tran-
     sparent to Erlang processes.

     A C node appears to Erlang as a _h_i_d_d_e_n _n_o_d_e. That is, Erlang
     processes  that know the name of the C node are able to com-
     municate with it in a normal manner, but the node name  will
     not  appear  in  the listing provided by the Erlang function
     _n_o_d_e_s/_0.


EXPORTS
     int erl_connect_init(number, cookie, creation)
     int erl_connect_xinit(host, alive, node, addr, cookie, crea-
     tion)

          Types
               int number;
               char *cookie;
               short creation;
               char *host, *alive, *node;
               struct in_addr *addr;

          These functions initialize the _e_r_l__c_o_n_n_e_c_t  module.  In
          particular,  they  are used to identify the name of the
          C-node from which they are called. One of  these  func-
          tions  must be called before any of the other functions
          in the erl_connect module are used.

          _e_r_l__c_o_n_n_e_c_t__x_i_n_i_t() stores for  later  use  information
          about the node's host name _h_o_s_t, alive name _a_l_i_v_e, node
          name _n_o_d_e, IP address _a_d_d_r, cookie _c_o_o_k_i_e, and creation
          number  _c_r_e_a_t_i_o_n. _e_r_l__c_o_n_n_e_c_t__i_n_i_t() provides an alter-
          native interface which does not require as much  infor-
          mation  from  the  caller.  Instead, _e_r_l__c_o_n_n_e_c_t__i_n_i_t()
          uses _g_e_t_h_o_s_t_b_y_n_a_m_e() to obtain default values.

          If you use _e_r_l__c_o_n_n_e_c_t__i_n_i_t() your  node  will  have  a
          short  name,  i.e.,  it will not be fully qualified. If
          you need to use fully qualified  (a.k.a.  long)  names,
          use _e_r_l__c_o_n_n_e_c_t__x_i_n_i_t() instead.

          _h_o_s_t is the name of the host on which the node is  run-
          ning.

          _a_l_i_v_e is the alivename of the node.





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               1






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



          _n_o_d_e is the name of the node. The nodename should be of
          the form _a_l_i_v_e_n_a_m_e@_h_o_s_t_n_a_m_e.

          _a_d_d_r is the 32-bit IP address of _h_o_s_t.

          _c_o_o_k_i_e is the authorization string required for  access
          to  the  remote node. Refer to the _a_u_t_h module for more
          details.

          _c_r_e_a_t_i_o_n helps identify a particular instance  of  a  C
          node.  In  particular,  it  can  help  prevent  us from
          receiving messages sent to an earlier process with  the
          same registered name.

          A C node acting as a server will be assigned a creation
          number when it calls _e_r_l__p_u_b_l_i_s_h() or _e_r_l__x_p_u_b_l_i_s_h().

          _n_u_m_b_e_r is used by _e_r_l__c_o_n_n_e_c_t__i_n_i_t() to  construct  the
          actual  node  name.  In the second example shown below,
          "_c_1_7@_a._D_N_S._n_a_m_e" will be the resulting node name.

          Example 1:

          struct in_addr addr;
          addr = inet_addr("150.236.14.75");
          if (!erl_connect_xinit("chivas",
                                 "madonna",
                                 "madonna@chivas.du.etx.ericsson.se",
                                 &addr;
                                 "samplecookiestring..."),
                                 0)
            erl_err_quit("<ERROR> when initializing !");

          Example 2:

          if (!erl_connect_init(17, "samplecookiestring...", 0))
            erl_err_quit("<ERROR> when initializing !");

     int erl_connect(node)
     int erl_xconnect(addr, alive)

          Types
               char *node, *alive;
               struct in_addr *addr;

          These functions set up a connection to an Erlang node.

          _e_r_l__x_c_o_n_n_e_c_t() requires the IP address  of  the  remote
          host and the alive name of the remote node to be speci-
          fied. _e_r_l__c_o_n_n_e_c_t() provides an alternative  interface,
          and  determines the information from the node name pro-
          vided.



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               2






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



          _a_d_d_r is the 32-bit IP address of the remote host.

          _a_l_i_v_e is the alivename of the remote node.

          _n_o_d_e is the name of the remote node.

          These functions return an open file descriptor on  suc-
          cess,  or  a  negative  value  indicating that an error
          occurred --- in which case they will set  _e_r_l__e_r_r_n_o  to
          one of:

            _E_H_O_S_T_U_N_R_E_A_C_H:
                The remote host _n_o_d_e is unreachable

            _E_N_O_M_E_M:
                No more memory available.

            _E_I_O:
                I/O error.

          Additionally, _e_r_r_n_o  values  from  _s_o_c_k_e_t(_2)  and  _c_o_n_-
          _n_e_c_t(_2) system calls may be propagated into _e_r_l__e_r_r_n_o.

          #define NODE   "madonna@chivas.du.etx.ericsson.se"
          #define ALIVE  "madonna"
          #define IP_ADDR "150.236.14.75"

          /*** Variant 1 ***/
          erl_connect( NODE );

          /*** Variant 2 ***/
          struct in_addr addr;
          addr = inet_addr(IP_ADDR);
          erl_xconnect( &addr , ALIVE );

     int erl_close_connection(fd)

          Types
               int fd;

          This function closes an open connection  to  an  Erlang
          node.

          _F_d is a file descriptor obtained from _e_r_l__c_o_n_n_e_c_t()  or
          _e_r_l__x_c_o_n_n_e_c_t().

          On success, 0 is returned. If the call  fails,  a  non-
          zero  value  is  returned, and the reason for the error
          can be obtained with the appropriate platform-dependent
          call.





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               3






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



     int erl_receive(fd, bufp, bufsize)

          Types
               int fd;
               char *bufp;
               int bufsize;

          This  function  receives  a  message  consisting  of  a
          sequence of bytes in the Erlang external format.

          _f_d is an open descriptor to an Erlang connection.

          _b_u_f_p is a buffer large enough to hold the expected mes-
          sage.

          _b_u_f_s_i_z_e indicates the size of _b_u_f_p.

          If a _t_i_c_k occurs, i.e., the Erlang node  on  the  other
          end of the connection has polled this node to see if it
          is still alive, the function will return  _E_R_L__T_I_C_K  and
          no   message  will  be  placed  in  the  buffer.  Also,
          _e_r_l__e_r_r_n_o will be set to _E_A_G_A_I_N.

          On success, the message  is  placed  in  the  specified
          buffer  and  the  function  returns the number of bytes
          actually read. On failure, the function returns a nega-
          tive value and will set _e_r_l__e_r_r_n_o to one of:

            _E_A_G_A_I_N:
                Temporary error: Try again.

            _E_M_S_G_S_I_Z_E:
                Buffer too small.

            _E_I_O:
                I/O error.

     int erl_receive_msg(fd, bufp, bufsize, emsg)

          Types
               int fd;
               unsigned char *bufp;
               int bufsize;
               ErlMessage *emsg;

          This function receives the message into  the  specified
          buffer, and decodes into the (_E_r_l_M_e_s_s_a_g_e *) _e_m_s_g.

          _f_d is an open descriptor to an Erlang connection.

          _b_u_f_p is a buffer large enough to hold the expected mes-
          sage.



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               4






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



          _b_u_f_s_i_z_e indicates the size of _b_u_f_p.

          _e_m_s_g is a pointer  to  an  _E_r_l_M_e_s_s_a_g_e  structure,  into
          which  the  message  will  be  decoded.  _E_r_l_M_e_s_s_a_g_e  is
          defined as follows:

          typedef struct {
            int type;
            ETERM *msg;
            ETERM *to;
            ETERM *from;
            char to_name[MAXREGLEN];
          } ErlMessage;

  Note:
     The definition of _E_r_l_M_e_s_s_a_g_e has changed since earlier  ver-
     sions of Erl_Interface.


     _t_y_p_e identifies  the  type  of  message,  one  of  _E_R_L__S_E_N_D,
     _E_R_L__R_E_G__S_E_N_D, _E_R_L__L_I_N_K, _E_R_L__U_N_L_I_N_K and _E_R_L__E_X_I_T.

     If _t_y_p_e contains _E_R_L__S_E_N_D this indicates  that  an  ordinary
     send  operation  has  taken place, and _e_m_s_g->_t_o contains the
     Pid of the recipient. If _t_y_p_e contains _E_R_L__R_E_G__S_E_N_D  then  a
     registered  send  operation  took place, and _e_m_s_g->_f_r_o_m con-
     tains the Pid of the sender. In both cases, the actual  mes-
     sage will be in _e_m_s_g->_m_s_g.

     If _t_y_p_e contains one of _E_R_L__L_I_N_K or _E_R_L__U_N_L_I_N_K,  then  _e_m_s_g-
     >_t_o  and  _e_m_s_g->_f_r_o_m  contain  the  pids  of  the sender and
     receipient of the link or unlink. _e_m_s_g->_m_s_g is not  used  in
     these cases.

     If _t_y_p_e contains _E_R_L__E_X_I_T, then this indicates that  a  link
     has  been broken. In this case, _e_m_s_g->_t_o and _e_m_s_g->_f_r_o_m con-
     tain the pids of the linked processes,  and  _e_m_s_g->_m_s_g  con-
     tains the reason for the exit.

  Note:
     It is the caller's  responsibility  to  release  the  memory
     pointed to by _e_m_s_g->_m_s_g, _e_m_s_g->_t_o and _e_m_s_g->_f_r_o_m.


     If a _t_i_c_k occurs, i.e., the Erlang node on the other end  of
     the  connection  has  polled this node to see if it is still
     alive, the function will return _E_R_L__T_I_C_K indicating that the
     tick has been received and responded to, but no message will
     be placed in the  buffer.  In  this  case  you  should  call
     _e_r_l__r_e_c_e_i_v_e__m_s_g() again.





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               5






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



     On success, the function returns _E_R_L__M_S_G and the _E_m_s_g struct
     will  be  initialized  as  described  above, or _E_R_L__T_I_C_K, in
     which case no message is returned. On failure, the  function
     returns _E_R_L__E_R_R_O_R and will set _e_r_l__e_r_r_n_o to one of:

       _E_M_S_G_S_I_Z_E:
           Buffer too small.

       _E_N_O_M_E_M:
           No more memory available.

       _E_I_O:
           I/O error.

     int erl_xreceive_msg(fd, bufpp, bufsizep, emsg)

          Types
               int fd;
               unsigned char **bufpp;
               int *bufsizep;
               ErlMessage *emsg;

          This  function  is  similar  to  _e_r_l__r_e_c_e_i_v_e__m_s_g.   The
          difference  is that _e_r_l__x_r_e_c_e_i_v_e__m_s_g expects the buffer
          to have been allocated by _m_a_l_l_o_c, and reallocates it if
          the  received  message  does  not fit into the original
          buffer. For that reason, both buffer and buffer  length
          are  given as pointers - their values may change by the
          call.

          On success, the function returns _E_R_L__M_S_G and  the  _E_m_s_g
          struct  will  be  initialized  as  described  above, or
          _E_R_L__T_I_C_K, in which case  no  message  is  returned.  On
          failure,  the  function  returns _E_R_L__E_R_R_O_R and will set
          _e_r_l__e_r_r_n_o to one of:

            _E_M_S_G_S_I_Z_E:
                Buffer too small.

            _E_N_O_M_E_M:
                No more memory available.

            _E_I_O:
                I/O error.

     int erl_send(fd, to, msg)

          Types
               int fd;
               ETERM *to, *msg;





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               6






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



          This function sends an Erlang term to a process.

          _f_d is an open descriptor to an Erlang connection.

          _t_o is an Erlang term containing the Pid of the intended
          recipient of the message.

          _m_s_g is the Erlang term to be sent.

          The function returns 1 if successful, otherwise  0  ---
          in which case it will set _e_r_l__e_r_r_n_o to one of:

            _E_I_N_V_A_L:
                Invalid argument: _t_o is not a valid Erlang pid.

            _E_N_O_M_E_M:
                No more memory available.

            _E_I_O:
                I/O error.

     int erl_reg_send(fd, to, msg)

          Types
               int fd;
               char *to;
               ETERM *msg;

          This function sends an Erlang term to a registered pro-
          cess.

          _f_d is an open descriptor to an Erlang connection.

          _t_o is a string containing the registered  name  of  the
          intended recipient of the message.

          _m_s_g is the Erlang term to be sent.

          The function returns 1 if successful, otherwise  0  ---
          in which case it will set _e_r_l__e_r_r_n_o to one of:

            _E_N_O_M_E_M:
                No more memory available.

            _E_I_O:
                I/O error.

     ETERM *erl_rpc(fd, mod, fun, args)
     int erl_rpc_to(fd, mod, fun, args)
     int erl_rpc_from(fd, timeout, emsg)

          Types



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               7






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



               int fd, timeout;
               char *mod, *fun;
               ETERM *args;
               ErlMessage *emsg;

          These functions support  calling  Erlang  functions  on
          remote  nodes.  _e_r_l__r_p_c__t_o()  sends an rpc request to a
          remote node and _e_r_l__r_p_c__f_r_o_m() receives the results  of
          such  a  call.  _e_r_l__r_p_c() combines the functionality of
          these two functions by sending an rpc request and wait-
          ing for the results. See also _r_p_c:_c_a_l_l/_4.

          _f_d is an open descriptor to an Erlang connection.

          _t_i_m_e_o_u_t is  the  maximum  time  (in  ms)  to  wait  for
          results.  Specify  _E_R_L__N_O__T_I_M_E_O_U_T to wait forever. When
          erl_rpc() calls erl_rpc_from(),  the  call  will  never
          timeout.

          _m_o_d is the name of the module containing  the  function
          to be run on the remote node.

          _f_u_n is the name of the function to run.

          _a_r_g_s is an Erlang list, containing the arguments to  be
          passed to the function.

          _e_m_s_g is a message containing the result of the function
          call.

          The actual message returned by the rpc server is  a  2-
          tuple  {_r_e_x, _R_e_p_l_y}. If you are using _e_r_l__r_p_c__f_r_o_m() in
          your code then this is the message  you  will  need  to
          parse. If you are using _e_r_l__r_p_c() then the tuple itself
          is parsed for you, and the  message  returned  to  your
          program  is  the  erlang  term  containing  _R_e_p_l_y only.
          Replies to rpc requests are always ERL_SEND messages.

  Note:
     It is the caller's responsibility to free the returned _E_T_E_R_M
     structure  as well as the memory pointed to by _e_m_s_g->_m_s_g and
     _e_m_s_g->_t_o.


     _e_r_l__r_p_c() returns the remote  function's  return  value  (or
     _N_U_L_L if it failed). _e_r_l__r_p_c__t_o() returns 0 on success, and a
     negative number on failure. _e_r_l__r_c_p__f_r_o_m()  returns  _E_R_L__M_S_G
     when  successful (with _E_m_s_g now containing the reply tuple),
     and one of _E_R_L__T_I_C_K, _E_R_L__T_I_M_E_O_U_T  and  _E_R_L__E_R_R_O_R  otherwise.
     When failing, all three functions set _e_r_l__e_r_r_n_o to one of:

       _E_N_O_M_E_M:



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               8






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



           No more memory available.

       _E_I_O:
           I/O error.

       _E_T_I_M_E_D_O_U_T:
           Timeout expired.

       _E_A_G_A_I_N:
           Temporary error: Try again.

     int erl_publish(port)
     int erl_xpublish(port, addr)

          Types
               int port;
               struct in_addr *addr;

          These functions are used by a server process to  regis-
          ter  with  the local name server _e_p_m_d, thereby allowing
          other  processes  to  send  messages   by   using   the
          registered  name.  Before calling either of these func-
          tions,  the  process  should  have  called  _b_i_n_d()  and
          _l_i_s_t_e_n() on an open socket.

  Note:
     The use  of  _e_r_l__x_p_u_b_l_i_s_h  is  deprecated.  Use  erl_publish
     instead.


     _p_o_r_t is the local name to register, and should be  the  same
     as the port number that was previously bound to the socket.

     _a_d_d_r is the 32-bit IP address of the local host.

     To unregister with epmd, simply close the returned  descrip-
     tor. See also _e_r_l__u_n_p_u_b_l_i_s_h().

     On success, the functions return a descriptor connecting the
     calling  process to epmd. On failure, they return -1 and set
     _e_r_l__e_r_r_n_o to:

       _E_I_O:
           I/O error

     Additionally, _e_r_r_n_o values  from  _s_o_c_k_e_t(_2)  and  _c_o_n_n_e_c_t(_2)
     system calls may be propagated into _e_r_l__e_r_r_n_o.

     int erl_accept(listensock, conp)

          Types
               int listensock;



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               9






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



               ErlConnect *conp;

          This function is used by a server process to  accept  a
          connection from a client process.

          _l_i_s_t_e_n_s_o_c_k  is  an  open  socket  descriptor  on  which
          _l_i_s_t_e_n() has previously been called.

          _c_o_n_p is a pointer to an _E_r_l_C_o_n_n_e_c_t struct, described as
          follows:

          typedef struct {
            char ipadr[4];
            char nodename[MAXNODELEN];
          } ErlConnect;

          On success, _c_o_n_p is filled in with the address and node
          name  of the connecting client and a file descriptor is
          returned.  On  failure,  _E_R_L__E_R_R_O_R  is   returned   and
          _e_r_l__e_r_r_n_o is set to _E_I_O.

     const char *erl_thiscookie()
     const char *erl_thisnodename()
     const char *erl_thishostname()
     const char *erl_thisalivename()
     short erl_thiscreation()

          These functions can be  used  to  retrieve  information
          about  the  C Node. These values are initially set with
          _e_r_l__c_o_n_n_e_c_t__i_n_i_t() or _e_r_l__c_o_n_n_e_c_t__x_i_n_i_t().

     int erl_unpublish(alive)

          Types
               char *alive;

          This function can be called by a process to  unregister
          a  specified node name from epmd on the localhost. This
          may be useful, for example, when epmd has not  detected
          the  failure  of a node, and will not allow the name to
          be reused. If you use this function to unregister  your
          own  process, be sure to also close the descriptor that
          was returned by _e_r_l__p_u_b_l_i_s_h().

  Note:
     Careless  use  of  this  function  may  have   unpredictable
     results, if the registered node is in fact still running.


     _a_l_i_v_e is the name of the node to unregister, i.e., the first
     component of the nodename, without the @_h_o_s_t_n_a_m_e.




Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3              10






erl_connect(3)         C LIBRARY FUNCTIONS         erl_connect(3)



     If the node was successfully  unregistered  from  epmd,  the
     function  returns  0.  Otherwise,  it  returns  -1  and sets
     _e_r_l__e_r_r_n_o is to _E_I_O.

Debug Information
     If a connection attempt fails, the following can be checked:

       * _e_r_l__e_r_r_n_o

       * that the right cookie was used

       * that _e_p_m_d is running

       * the remote Erlang node on the other side is running  the
         same version of Erlang as the _e_r_l__i_n_t_e_r_f_a_c_e library.

AUTHORS
     T.Tornkvist - support@erlang.ericsson.se
     Gordon Beaton - support@erlang.ericsson.se




































Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3              11



