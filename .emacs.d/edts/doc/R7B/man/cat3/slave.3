


slave(3)            ERLANG MODULE DEFINITION             slave(3)



MODULE
     slave - Functions to Starting and Controlling Slave Nodes

DESCRIPTION
     This module provides functions  for  starting  Erlang  slave
     nodes.  All  slave  nodes which are started by a master will
     terminate automatically when the master terminates. All  TTY
     output produced at the slave will be sent back to the master
     node. File I/O is done via the master.

     Slave nodes on other hosts than the current one are  started
     with the program _r_s_h. The user must be allowed to _r_s_h to the
     remote hosts without being prompted for a password. This can
     be arranged in a number of ways (refer to the _r_s_h documenta-
     tion for details). A slave node started on the same host  as
     the master inherits certain environment values from the mas-
     ter, such as the current directory and the environment vari-
     ables.  For what can be assumed about the environment when a
     slave is started on another host, read the documentation for
     the _r_s_h program.

     An alternative to the _r_s_h program can be  specified  on  the
     command line to _e_r_l as follows:-_r_s_h _P_r_o_g_r_a_m.

     The slave node should use the same file system at  the  mas-
     ter.  At  least,  Erlang/OTP should be installed in the same
     place on both computers  and  the  same  version  of  Erlang
     should be used.

     Currently, a node running on Windows NT can only start slave
     nodes on the host on which it is running.

     The master node must be alive.


EXPORTS
     start(Host)

          Starts a slave node on the host _H_o_s_t. Host  names  need
          not  necessarily be specified as fully qualified names;
          short names can also be used. This is the  same  condi-
          tion that applies to names of distributed Erlang nodes.
          The name of the started node will be the  same  as  the
          node which executes the call, with the exception of the
          host name part of the node name.

          Return value: see _s_t_a_r_t/_3.

     start_link(Host)

          Starts a slave node on the host _H_o_s_t in the same way as
          the  _s_t_a_r_t/_1,  except  that the slave node is linked to



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  1






slave(3)            ERLANG MODULE DEFINITION             slave(3)



          the currently executing process. If  the  process  ter-
          minates, the slave node also terminates.

          Return value: see _s_t_a_r_t/_3.

     start(Host, Name)

          Starts a slave node on the  host  _H_o_s_t  with  the  name
          _N_a_m_e@_H_o_s_t.

          Return value: see _s_t_a_r_t/_3.

     start_link(Host, Name)

          Starts a slave node on the host _H_o_s_t in the same way as
          _s_t_a_r_t/_2,  except  that  the slave node is linked to the
          currently  executing  process.  If  that  process  ter-
          minates, the slave node also terminates.

          Return value: see _s_t_a_r_t/_3.

     start(Host, Name, Args) -> {ok, Node} | {error, ErrorInfo}

          Starts a slave node with the name _N_a_m_e@_H_o_s_t on _H_o_s_t and
          passes the argument string _A_r_g_s to the new node.

          The slave node resets its _u_s_e_r process so that all ter-
          minal  I/O  which is produced at the slave is automati-
          cally relayed to the master.  Also,  the  file  process
          will be relayed to the master.

          The _A_r_g_s argument can be used for  a  variety  of  pur-
          poses.  See  erl(1). For example, the following command
          line arguments can be passed to the slave:

            * to set some environment variable on the slave

            * to run some specific program on the slave

            * to set some specific code path on the slave node.

          As an example, suppose that we want to  start  a  slave
          node  at  host _H with the node name _N_a_m_e@_H, and we also
          want the slave node to have the following properties:

            * directory _D_i_r should be added to the code path;

            * the Mnesia directory should be set to _M;

            * the unix DISPLAY environment variable should be set
              to the display of the master node.




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  2






slave(3)            ERLANG MODULE DEFINITION             slave(3)



          The following code is executed to achieve this:

          E = " -env DISPLAY " ++ net_adm:localhost() ++ ":0 ",
          Arg = "-mnesia_dir " ++ M ++ " -pa " ++ Dir ++ E,
          slave:start(H, Name, Arg).

          The _s_t_a_r_t/_3 call returns {_o_k, _N_a_m_e@_H_o_s_t} if successful,
          otherwise {_e_r_r_o_r, _R_e_a_s_o_n}. _R_e_a_s_o_n can be one of:

            _t_i_m_e_o_u_t:
                The master node failed to get in contact with the
                slave  node.  This can happen in a number of cir-
                cumstances:

                  * Erlang/OTP is not  installed  on  the  remote
                    host

                  * the file system on the other host has a  dif-
                    ferent structure to the the master

                  * the Erlang nodes have different cookies.

            _n_o__r_s_h:
                There is no _r_s_h program on the computer.

            {_a_l_r_e_a_d_y__r_u_n_n_i_n_g, _N_a_m_e@_H_o_s_t}:
                A node with the name _N_a_m_e@_H_o_s_t already exists.

     start_link(Host, Name, Args)

          Starts a slave node on the host _H_o_s_t in the same way as
          the  _s_t_a_r_t/_3,  except  that the slave node is linked to
          the currently executing process. If that  process  ter-
          minates, the slave node also terminates.

          Return value: see _s_t_a_r_t/_3.

     stop(Node)

          Stops (kills) a node.

     pseudo([Master | ServerList])

          Calls _p_s_e_u_d_o(_M_a_s_t_e_r, _S_e_r_v_e_r_L_i_s_t). If we want to start a
          node  from  the  command  line  and  set up a number of
          pseudo servers, an Erlang runtime system can be started
          as follows:

          % erl -name abc -s slave pseudo klacke@super x --

     pseudo(Master, ServerList)




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  3






slave(3)            ERLANG MODULE DEFINITION             slave(3)



          Starts a number of pseudo servers. A pseudo server is a
          server  with  a  registered  name which does absolutely
          nothing but pass on all  message  to  the  real  server
          which  executes at a master node. A pseudo server is an
          intermediary which only has the same registered name as
          the real server.

          For example, if we have started a slave node _N and want
          to execute _p_x_w graphics code on this node, we can start
          the server _p_x_w__s_e_r_v_e_r as a psudo server  at  the  slave
          node. The following code illustrates:

          rpc:call(N, slave, pseudo, [node(), [pxw_server]]).

     relay(Pid)

          Runs a pseudo server. This function never  returns  any
          value  and the process which executes the function will
          receive messages. All messages received will simply  be
          passed on to _P_i_d.

AUTHORS
      Claes Wikstrom - support@erlang.ericsson.se
     Bjorn Gustavsson - support@erlang.ericsson.se































Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  4



