


crypto(3)           ERLANG MODULE DEFINITION            crypto(3)



MODULE
     crypto - Crypto Functions

DESCRIPTION
     This module provides a set of cryptographic functions.

     References:

       * md5: The MD5 Message Digest Algorithm (RFC 1321)

       * sha: Secure Hash Standard (FIPS 180-1)

       * hmac:  Keyed-Hashing  for  Message  Authentication  (RFC
         2104)

       * des: Data Encryption Standard (FIPS 46-2)

       * ecb, cbc, cfb, ofb: DES modes of operation (FIPS 81).

     _T_y_p_e_s

     byte() = 0 ... 255
     ioelem() = byte() | binary() | iolist()
     iolist() = [ioelem()]

EXPORTS
     start() -> ok

          Starts the crypto server.

     stop() -> ok

          Stops the crypto server.

     info() -> [atom()]

          Stops the crypto server.

     md5(Data) -> Digest

          Types
               Data = iolist() | binary()
               Digest = binary()

          Computes an _M_D_5 message digest  from  _D_a_t_a,  where  the
          length of the digest is 128 bits (16 bytes).

     md5_init() -> Context

          Types
               Context = binary()




Ericsson UtvecklingsLAaBst change: crypto  1.1.2                  1






crypto(3)           ERLANG MODULE DEFINITION            crypto(3)



          Creates an MD5 context, to be used in subsequent  calls
          to _m_d_5__u_p_d_a_t_e/_2.

     md5_update(Context, Data) -> NewContext

          Types
               Data = iolist() | binary()
               Context = NewContext = binary()

          Updates an MD5 _C_o_n_t_e_x_t with _D_a_t_a, and returns a _N_e_w_C_o_n_-
          _t_e_x_t.

     md5_final(Context) -> Digest

          Types
               Context = Digest = binary()

          Finishes the update of an MD5 _C_o_n_t_e_x_t and  returns  the
          computed _M_D_5 message digest.

     sha(Data) -> Digest

          Types
               Data = iolist() | binary()
               Digest = binary()

          Computes an _S_H_A message digest  from  _D_a_t_a,  where  the
          length of the digest is 160 bits (20 bytes).

     sha_init() -> Context

          Types
               Context = binary()

          Creates an SHA context, to be used in subsequent  calls
          to _s_h_a__u_p_d_a_t_e/_2.

     sha_update(Context, Data) -> NewContext

          Types
               Data = iolist() | binary()
               Context = NewContext = binary()

          Updates an SHA _C_o_n_t_e_x_t with _D_a_t_a, and returns a _N_e_w_C_o_n_-
          _t_e_x_t.

     sha_final(Context) -> Digest

          Types
               Context = Digest = binary()





Ericsson UtvecklingsLAaBst change: crypto  1.1.2                  2






crypto(3)           ERLANG MODULE DEFINITION            crypto(3)



          Finishes the update of an SHA _C_o_n_t_e_x_t and  returns  the
          computed _S_H_A message digest.

     md5_mac(Key, Data) -> Mac

          Types
               Key = Data = iolist() | binary()
               Mac = binary()

          Computes an _M_D_5 _M_A_C message authentification code  from
          _K_e_y  and  _D_a_t_a,  where the the length of the Mac is 128
          bits (16 bytes).

     md5_mac_96(Key, Data) -> Mac

          Types
               Key = Data = iolist() | binary()
               Mac = binary()

          Computes an _M_D_5 _M_A_C message authentification code  from
          _K_e_y  and  _D_a_t_a,  where the length of the Mac is 96 bits
          (12 bytes).

     sha_mac(Key, Data) -> Mac

          Types
               Key = Data = iolist() | binary()
               Mac = binary()

          Computes an _S_H_A _M_A_C message authentification code  from
          _K_e_y  and  _D_a_t_a, where the length of the Mac is 160 bits
          (20 bytes).

     sha_mac_96(Key, Data) -> Mac

          Types
               Key = Data = iolist() | binary()
               Mac = binary()

          Computes an _S_H_A _M_A_C message authentification code  from
          _K_e_y  and  _D_a_t_a,  where the length of the Mac is 96 bits
          (12 bytes).

     des_cbc_encrypt(Key, IVec, Text) -> Cipher

          Types
               Key = Text = iolist() | binary()
               IVec = Cipher = binary()

          Encrypts _T_e_x_t according to DES in CBC mode.  _T_e_x_t  must
          be a multiple of 64 bits (8 bytes). _K_e_y is the DES key,
          and _I_V_e_c  is  an  arbitrary  initializing  vector.  The



Ericsson UtvecklingsLAaBst change: crypto  1.1.2                  3






crypto(3)           ERLANG MODULE DEFINITION            crypto(3)



          lengths of _K_e_y and _I_V_e_c must be 64 bits (8 bytes).

     des_cbc_decrypt(Key, IVec, Cipher) -> Text

          Types
               Key = Cipher = iolist() | binary()
               IVec = Text = binary()

          Decrypts _C_i_p_h_e_r according to DES in CBC  mode.  _K_e_y  is
          the DES key, and _I_V_e_c is an arbitrary initializing vec-
          tor. _K_e_y and _I_V_e_c must have the same  values  as  those
          used  when  encrypting. _C_i_p_h_e_r must be a multiple of 64
          bits (8 bytes). The lengths of _K_e_y and _I_V_e_c must be  64
          bits (8 bytes).

DES in CBC mode
     The Data Encryption Standard (DES) defines an  algoritm  for
     encrypting and decrypting an 8 byte quantity using an 8 byte
     key (actually only 56 bits of the key is used).

     When it comes to encrypting and decrypting blocks  that  are
     multiples  of  8  bytes various modes are defined (FIPS 81).
     One of those modes is the Cipher Block Chaining (CBC)  mode,
     where the encryption of an 8 byte segment depend not only of
     the contents of the segment itself, but also on  the  result
     of  encrypting  the  previous segment: the encryption of the
     previous segment becomes  the  initializing  vector  of  the
     encryption of the current segment.

     Thus the encryption of every segment depends on the  encryp-
     tion  key (which is secret) and the encryption of the previ-
     ous segment, except the first segment which has to  be  pro-
     vided with a first initializing vector. That vector could be
     chosen at random, or be counter of some kind.  It  does  not
     have to be secret.

     The following example is drawn from the  FIPS  81  standard,
     where  both  the plain text and the resulting cipher text is
     settled. We  use  the  Erlang  bitsyntax  to  define  binary
     literals. The following Erlang code fragment returns `true'.

           Key = <<16#01,16#23,16#45,16#67,16#89,16#ab,16#cd,16#ef>>,
           IVec = <<16#12,16#34,16#56,16#78,16#90,16#ab,16#cd,16#ef>>,
           P = "Now is the time for all ",
           C = crypto:des_cbc_encrypt(K, I, P),
           C == <<16#e5,16#c7,16#cd,16#de,16#87,16#2b,16#f2,16#7c,
                  16#43,16#e9,16#34,16#00,16#8c,16#38,16#9c,16#0f,
                  16#68,16#37,16#88,16#49,16#9a,16#7c,16#05,16#f6>>,
           <<"Now is the time for all ">> == crypto:des_cbc_decrypt(Key,IVec,C).

     The following is true for the DES CBC mode. For all decompo-
     sitions  _P_1  ++  _P_2 = _P of a plain text message _P (where the



Ericsson UtvecklingsLAaBst change: crypto  1.1.2                  4






crypto(3)           ERLANG MODULE DEFINITION            crypto(3)



     length of all quantities are  multiples  of  8  bytes),  the
     encryption _C of _P is equal to _C_1 ++ _C_2, where _C_1 is obtained
     by encrypting _P_1 with _K_e_y and the initializing vector  _I_V_e_c,
     and  where  _C_2 is obtained by encrypting _P_2 with _K_e_y and the
     initializing vector _l(_C_1), where _l(_B)  denotes  the  last  8
     bytes of the binary _B.

     Similarly, for all decompositions _C_1 ++ _C_2 = _C of  a  cipher
     text  message _C (where the length of all quantities are mul-
     tiples of 8 bytes), the decryption _P of _C is equal to _P_1  ++
     _P_2,  where  _P_1 is obtained by decrypting _C_1 with _K_e_y and the
     initializing vector  _I_V_e_c,  and  where  _P_2  is  obtained  by
     decrypting  _C_2  with  _K_e_y and the initializing vector _l(_C_1),
     where _l(.) is as above.

AUTHOR
     Peter Hogfeldt - support@erlang.ericsson.se






































Ericsson UtvecklingsLAaBst change: crypto  1.1.2                  5



