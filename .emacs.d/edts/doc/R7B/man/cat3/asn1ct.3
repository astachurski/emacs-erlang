


asn1ct(3)           ERLANG MODULE DEFINITION            asn1ct(3)



MODULE
     asn1ct - ASN.1 compiler and compile-time support functions

DESCRIPTION
     The ASN.1 compiler  takes  an  ASN.1  module  as  input  and
     genarates a corresponding Erlang module which can encode and
     decode the datatypes specified. There are also some  generic
     functions  which can be used in during development of appli-
     cations which handles ASN.1 data (encoded as BER or PER).


EXPORTS
     compile(Asn1module) -> ok | {error,Reason}
     compile(Asn1module , Options) -> ok | {error,Reason}

          Types
               Asn1module = atom() | string()
               Options = [Option]
               Option =  ber|per|noobj|{outdir,  Dir}|{i,  Inclu-
               deDir}
               Reason = term()

          Compiles the ASN.1 module _A_s_n_1_m_o_d_u_l_e and  generates  an
          Erlang  module  _A_s_n_1_m_o_d_u_l_e._e_r_l with encode decode func-
          tions for the types defined  in  _A_s_n_1_m_o_d_u_l_e.  For  each
          ASN.1  value  defined  in the module an Erlang function
          which returns the value  in  Erlang  representation  is
          generated.

          If _A_s_n_1_m_o_d_u_l_e is a  filename  without  extension  first
          "._a_s_n" is assumed and then "._p_y" (to be compatible with
          the old ASN.1 compiler). Of course _A_s_n_1_m_o_d_u_l_e can be  a
          full pathname (relative or absolute) including filename
          with (or without) extension.

          _O_p_t_i_o_n_s is a list with some of the following  available
          options:

            _b_e_r | _p_e_r:
                The encoding rule to be used. EncodingRule is _b_e_r
                or  _p_e_r.  If  this  option  is omitted _b_e_r is the
                default. The _p_e_r option means the  aligned  vari-
                ant,  the  unaligned  variant  of PER is not sup-
                ported in this version of the compiler. The  gen-
                erated Erlang module always gets the same name as
                the ASN.1 module and as a consequnce of this only
                one encoding rule per ASN.1 module can be used at
                runtime.

            {_i, _I_n_c_l_u_d_e_D_i_r}:
                Adds _I_n_c_l_u_d_e_D_i_r to the  search-path  for  ._a_s_n_1_d_b
                files.  The compiler tries to open a ._a_s_n_1_d_b file



Ericsson UtvecklingsLAaBst change: asn1  1.2.9.3                  1






asn1ct(3)           ERLANG MODULE DEFINITION            asn1ct(3)



                when a module imports  definitions  from  another
                ASN.1  module.  Several  {_i,  _I_n_c_l_u_d_e_D_i_r}  can be
                given.

            _n_o_o_b_j:
                Do not compile (i.e do not produce  object  code)
                the  generated ._e_r_l file. If this option is omit-
                ted the generated Erlang module will be compiled.

            {_o_u_t__d_i_r, _D_i_r}:
                Specifies the directory _D_i_r where  all  generated
                files  shall  be placed. If omitted the files are
                placed in the current directory.

          The compiler generates the following files:

            * _A_s_n_1_m_o_d_u_l_e._h_r_l (if any SET or SEQUENCE is defined)

            * _A_s_n_1_m_o_d_u_l_e._e_r_l  the  Erlang  module  with   encode,
              decode and value functions.

            * _A_s_n_1_m_o_d_u_l_e._a_s_n_1_d_b intermediate format used  by  the
              compiler when modules IMPORTS definitions from each
              other.

     encode(Module,{Type,Value})-> {ok,Bytes}| {error,Reason}
     encode(Module,Type,Value)-> {ok,Bytes} | {error,Reason}

          Types
               Module = Type = atom()
               Value = term()
               Bytes = [Int] when integer(Int), Int >= 0, Int  =<
               255
               Reason = term()

          Encodes _V_a_l_u_e of  _T_y_p_e  defined  in  the  ASN.1  module
          _M_o_d_u_l_e.  Returns  a list of bytes if successful. To get
          as fast execution as possible the encode function  only
          performs  rudimentary  tests  that the input _V_a_l_u_e is a
          correct instance of _T_y_p_e. The length of strings is  for
          example not always checked. Returns {_o_k, _B_y_t_e_s} if suc-
          cessful or {_e_r_r_o_r, _R_e_a_s_o_n} if an error occured.

     decode(Module,Type,Bytes) -> {ok,Value}|{error,Reason}

          Types
               Module = Type = atom()
               Value = Reason = term()
               Bytes = [Int] when integer(Int), Int >= 0, Int  =<
               255





Ericsson UtvecklingsLAaBst change: asn1  1.2.9.3                  2






asn1ct(3)           ERLANG MODULE DEFINITION            asn1ct(3)



          Decodes _T_y_p_e from _M_o_d_u_l_e from the list of bytes  _B_y_t_e_s.
          Returns {_o_k, _V_a_l_u_e} if successful.

     validate(Module,{Type,Value}) -> ok | {error,Reason}
     validate(Module,Type,Value) -> ok | {error,Reason}

          Types
               Module = Type = atom()
               Value = term()

          Validates that _V_a_l_u_e conforms to _T_y_p_e from _M_o_d_u_l_e.  _N_o_t
          _i_m_p_l_e_m_e_n_t_e_d _i_n _t_h_i_s _v_e_r_s_i_o_n _o_f _t_h_e _A_S_N._1 _a_p_p_l_i_c_a_t_i_o_n.

     start(IncludePaths) -> ok | already_started

          Types
               IncludePaths = [IncludeDirectory]
               IncludeDirectory = string()

          Starts the ASN.1 database server and initiates it  with
          _I_n_c_l_u_d_e_P_a_t_h_s.  _I_n_c_l_u_d_e_P_a_t_h_s  is  a  list of directories
          where the data base server should  search  for  ._a_s_n_1_d_b
          files when a new module should be loaded into the data-
          base.

     stop() -> void

          Stops the ASN.1 database server. The database server is
          only used by the compile-time functions.

     value(Module ,Type) -> {ok,Value} | {error,Reason}

          Types
               Module = Type = atom()
               Value = term()
               Reason = term()

          Returns an Erlang term which is an example of  a  valid
          Erlang  representation  of  a  value  of the ASN.1 type
          _T_y_p_e. The value is a random value and subsequent  calls
          to  this  function will for most types return different
          values.

     test(Module) -> ok | {error,Reason}
     test(Module,Type) -> ok | {error,Reason}
     test(Module,Type,Value) -> ok | {error,Reason}

          Performs a test of encode and decode of  all  types  in
          _M_o_d_u_l_e.  The  generated  functions  are  called by this
          function. This function is useful during test to secure
          that  the generated encode and decode functions and the
          general runtime support work as expected.



Ericsson UtvecklingsLAaBst change: asn1  1.2.9.3                  3






asn1ct(3)           ERLANG MODULE DEFINITION            asn1ct(3)



           _t_e_s_t/_1 iterates over all types in _M_o_d_u_l_e.
           _t_e_s_t/_2 tests type _T_y_p_e with a random value.
           _t_e_s_t/_3 _t_e_s_t_s _t_y_p_e <_c>_T_y_p_e with _V_a_l_u_e.
           Schematically the following happens for each  type  in
          the module.

          {ok,Value} = asn1ct:value(Module,Type),
          {ok,Bytes} = asn1ct:encode(Module,Type,Value),
          {ok,Value} = asn1:decode(Module,Type,Bytes).

AUTHOR
     Kenneth Lundin - support@erlang.ericsson.se











































Ericsson UtvecklingsLAaBst change: asn1  1.2.9.3                  4



