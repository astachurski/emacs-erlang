


rpc(3)              ERLANG MODULE DEFINITION               rpc(3)



MODULE
     rpc -  Remote Procedure Call Services

DESCRIPTION
     This module contains services which are  similar  to  remote
     procedure  calls.  It also contains broadcast facilities and
     parallel evaluators. A remote procedure call is a method  to
     call  a function on a remote node and collect the answer. It
     is used for collecting information on a remote node, or  for
     running  a  function  with some specific side effects on the
     remote node.


EXPORTS
     start()

          Starts the _r_p_c server. Normally, this is not  necessary
          because the _r_p_c server is started automatically.

     stop()

          Stops the _r_p_c server.

     call(Node, Module, Function, Args)

          Evaluates _a_p_p_l_y(_M_o_d, _F_u_n, _A_r_g_s) on the  node  _N_o_d_e  and
          returns a value, or {_b_a_d_r_p_c, _R_e_a_s_o_n} if the call fails.

     cast(Node, Module, Function, Args)

          Causes the  expression  _a_p_p_l_y(_M_o_d,  _F_u_n,  _A_r_g_s)  to  be
          evaluated  on  _N_o_d_e.  No  response is delivered and the
          process which makes the call is not suspended until the
          evaluation is complete, as is the case with _c_a_l_l/_4. The
          function immediately returns _t_r_u_e. Example:

          > rpc:cast(Node, erlang, halt, [])

          This function shuts down the node _N_o_d_e.

          The following function also shuts down  the  node,  but
          the call returns the tuple {_b_a_d_r_p_c, _n_o_c_o_n_n_e_c_t_i_o_n}

          > rpc:call(Node, erlang, halt, [])

     block_call(Node, Mod, Fun, Args)

          The _c_a_l_l/_4 function causes the server at _N_o_d_e to create
          a new process for each request. This means that several
          RPCs can be active concurrently. The _r_p_c server is  not
          affected  if  a  request  does not return a value. This
          function can be used if the intention of the call is to



Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  1






rpc(3)              ERLANG MODULE DEFINITION               rpc(3)



          block  the  _r_p_c server from any other incoming requests
          until the request has been handled.  The  function  can
          also  be  used  for  efficiency reasons when very small
          fast functions are evaluated, for example BIFs that are
          guaranteed not to suspend.

          > rpc:block_call(Node, erlang, whereis, [file_server]),

          Returns the Pid of the file server at _N_o_d_e.

     server_call(Node, Name, ReplyWrapper, Msg)

          This function is used when interacting  with  a  server
          called _N_a_m_e at node _N_o_d_e. It is assumed that the server
          receives messages in the  format  {_F_r_o_m,  _R_e_q_u_e_s_t}  and
          replies  in  the  format  _F_r_o_m ! {_R_e_p_l_y_W_r_a_p_p_e_r, _n_o_d_e(),
          _R_e_p_l_y}. This function makes  such  a  server  call  and
          ensures  that  the entire call is packed into an atomic
          transaction which either succeeds or  fails.  It  never
          hangs, unless the server itself hangs.

          The function returns {_e_r_r_o_r, _R_e_a_s_o_n}, or the answer  as
          produced by the server _N_a_m_e.

     abcast(Name, Mess)

          Broadcasts  the  message  _M_e_s_s  asynchronously  to  the
          registered  process  _N_a_m_e  on  all nodes, including the
          current node.

     abcast(Nodes, Name, Mess)

          The same as _a_b_c_a_s_t/_2, but only to the nodes _N_o_d_e_s.

     sbcast(Name, Msg)

          Broadcasts to all nodes  synchronously  and  returns  a
          list  of  the  nodes  which  have  _N_a_m_e as a registered
          server. Returns {_G_o_o_d_n_o_d_e_s, _B_a_d_n_o_d_e_s}.

          It is synchronous in the sense that it  is  known  that
          all  servers  have  received the message when we return
          from the call. It is not  possible  to  know  that  the
          servers have actually processed the message.

          Any further messages sent to the  servers,  after  this
          function  has returned, will be received by all servers
          after this message .

     sbcast(Nodes, Name, Msg)





Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  2






rpc(3)              ERLANG MODULE DEFINITION               rpc(3)



          As _s_b_c_a_s_t/_2 but only to the nodes in _N_o_d_e_s.

     eval_everywhere(Mod, Fun, Args)

          Evaluates the expression _a_p_p_l_y(_M_o_d, _F_u_n, _A_r_g_s)  on  all
          nodes. No answers are collected.

     eval_everywhere(Nodes, Mod, Fun, Args)

          Evaluates the expression _a_p_p_l_y(_M_o_d, _F_u_n, _A_r_g_s)  on  the
          nodes _N_o_d_e_s.

     multicall(M, F, A)

          In contrast to an RPC, a multicall is an RPC  which  is
          sent  concurrently from one client to multiple servers.
          This is useful for collecting some information  from  a
          set  of  nodes,  or  for calling a function on a set of
          nodes to achieve some side effects. It is  semantically
          the  same as iteratively making a series of RPCs on all
          the nodes, but the  multicall  is  faster  as  all  the
          requests  are  sent  at the same time and are collected
          one by one as they come back.

          The  function  _m_u_l_t_i_c_a_l_l/_3  evaluates  the   expression
          _a_p_p_l_y(_M,  _F,  _A) on all nodes and collects the answers.
          It returns {_R_e_p_l_i_e_s, _B_a_d_n_o_d_e_s},  where  _B_a_d_n_o_d_e_s  is  a
          list  of  the  nodes that terminated during computation
          and _R_e_p_l_i_e_s is a list of the  return  values.  This  is
          useful  when  new  object  code  is to be loaded on all
          nodes in the network.

          %% Find object code for module Mod
          {Mod, File, Bin} = code:get_object_code(Mod),

          %% and load it on all nodes including this one
          {Replies, _} = rpc:multicall(code, load_binary, [Mod, File, Bin]),

          %% and then maybe check the Replies list.

          This is an example of the side  effects  the  RPCs  may
          produce.

     multicall(Nodes, M, F, A)

          Executes the multicall only on the nodes _N_o_d_e_s.

     multi_server_call(Name, Msg)

          The function sends _M_s_g to _N_a_m_e on all nodes,  and  col-
          lects  the  answers.  It  returns  {_R_e_p_l_i_e_s, _B_a_d_n_o_d_e_s},
          where _B_a_d_n_o_d_e_s is a list  of  the  nodes  which  failed



Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  3






rpc(3)              ERLANG MODULE DEFINITION               rpc(3)



          during  the  call.  This  function  assumes  that  if a
          request sent  to  a  server  called  _N_a_m_e,  the  server
          replies  in  the form {_N_a_m_e, _n_o_d_e(), _R_e_p_l_y}. Otherwise,
          the function will hang. It also assumes that the server
          receives  messages  in  the  form {_F_r_o_m, _M_s_g}, and then
          replies as _F_r_o_m ! {_N_a_m_e, _n_o_d_e(), _R_e_p_l_y}.

          If any of the  nodes  or  servers  does  not  exist  or
          crashes  during  the  call, they appear in the _B_a_d_n_o_d_e_s
          list.

  Warning:
     If any of the nodes are of an older release of  Erlang,  the
     server  cannot  be monitored, and this function hangs if the
     server does not exist.


     If  all  nodes  are  of  the  current  release  of   Erlang,
     _s_a_f_e__m_u_l_t_i__s_e_r_v_e_r__c_a_l_l/_2,  _3  is  now obsolete and much more
     inefficient than _m_u_l_t_i__s_e_r_v_e_r__c_a_l_l/_2, _3.

     The replies are not ordered in any particular way.

     multi_server_call(Nodes, Name, Msg)

          The same as above, but _M_s_g is only sent to _N_o_d_e_s.

     safe_multi_server_call(Name, Msg)

          The same as the _m_u_l_t_i__s_e_r_v_e_r__c_a_l_l/_2, except  that  this
          function handles the case where the remote node exists,
          but no server called _N_a_m_e exists there, and the  remote
          node  is  of  an  older release of Erlang. This call is
          also slightly slower than _m_u_l_t_i__s_e_r_v_e_r__c_a_l_l/_2 since all
          request go via the _r_p_c server at the remote sites.

     safe_multi_server_call(Nodes, Name, Msg)

          The same as above, but only on the nodes _N_o_d_e_s.

     async_call(Node, Mod, Fun, Args)

          _C_a_l_l _s_t_r_e_a_m_s _w_i_t_h _p_r_o_m_i_s_e_s is a type of _r_p_c which  does
          not  suspend  the  caller until the result is finished.
          They return a _K_e_y which can be used at a later stage to
          collect  the  value. The key can be viewed as a promise
          to deliver the answer. The expression  _a_p_p_l_y(_M_o_d,  _F_u_n,
          _A_r_g_s)  is  evaluated for this function on _N_o_d_e. Returns
          _K_e_y which can be used  in  a  subsequent  _y_i_e_l_d/_1  (see
          below).





Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  4






rpc(3)              ERLANG MODULE DEFINITION               rpc(3)



     yield(Key)

          Delivers the promised answer from a previous _a_s_y_n_c__c_a_l_l
          operation.  If  the answer is available, it is returned
          immediately.  Otherwise,  the  caller  of  _y_i_e_l_d/_1   is
          suspended until the answer arrives from _N_o_d_e.

     nb_yield(Key, Timeout)

          This is a non-blocking version of _y_i_e_l_d. It returns the
          tuple  {_v_a_l_u_e, _V} when the computation has finished, or
          the atom _t_i_m_e_o_u_t when _T_i_m_e_o_u_t elapses.

          _T_i_m_e_o_u_t is either a non-negative integer  or  the  atom
          _i_n_f_i_n_i_t_y.

     nb_yield(Key)

          Same as _n_b__y_i_e_l_d(_K_e_y, _0).

     parallel_eval(ListOfTuples)

          Evaluates the list of size 3 tuples _L_i_s_t_O_f_T_u_p_l_e_s.  Each
          tuple  must be of the type {_M_o_d, _F_u_n, _A_r_g_s}. Each tuple
          is sent for evaluation to neighboring  nodes,  and  the
          replies are collected and returned as a list of indivi-
          dual values. The return values  are  presented  in  the
          same order as the original list _L_i_s_t_O_f_T_u_p_l_e_s.

     pmap({M, F}, Extraargs, List)

          Takes exactly the  same  arguments  and  has  the  same
          return  value  as the _l_i_s_t_s:_m_a_p/_3 function, except that
          everything is evaluated in parallel on different nodes.

     pinfo(Pid)

          Location transparent version of _p_r_o_c_e_s_s__i_n_f_o/_1.

     pinfo(Pid, Item)

          Location transparent version of _p_r_o_c_e_s_s__i_n_f_o/_2.

AUTHOR
      Claes Wikstrom - support@erlang.ericsson.se










Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  5



