


sys(3)              ERLANG MODULE DEFINITION               sys(3)



MODULE
     sys - A Functional Interface to System Messages

DESCRIPTION
     This module contains functions for sending  system  messages
     used by programs, and messaged used for debugging purposes.

     Functions used for implementation of processes  should  also
     understand  system  messages  such as debugging messages and
     code change. These functions must be used to  implement  the
     use  of  system  messages for a process; either directly, or
     through standard behaviours, such as _g_e_n__s_e_r_v_e_r.

     The following types are used in the functions defined below:

       * _N_a_m_e = _p_i_d() | _a_t_o_m() | {_g_l_o_b_a_l, _a_t_o_m()}

       * _T_i_m_e_o_u_t = _i_n_t() >= _0 | _i_n_f_i_n_i_t_y

       * _s_y_s_t_e_m__e_v_e_n_t() = {_i_n, _M_s_g} | {_i_n,  _M_s_g,  _F_r_o_m}  |  {_o_u_t,
         _M_s_g, _T_o} | _t_e_r_m()

     The default timeout is 5000 ms, unless otherwise  specified.
     The  _t_i_m_e_o_u_t defines the time period to wait for the process
     to respond to a request. If the process  does  not  respond,
     the function evaluates _e_x_i_t({_t_i_m_e_o_u_t, {_M, _F, _A}}).

     The functions make reference to a debug structure. The debug
     structure  is  a list of _d_b_g__o_p_t(). _d_b_g__o_p_t() is an internal
     data type  used  by  the  _h_a_n_d_l_e__s_y_s_t_e_m__m_s_g/_6  function.  No
     debugging is performed if it is an empty list.


System Messages
     Processes which are not implemented as one of  the  standard
     behaviours  must still understand system messages. There are
     three different messages which must be understood:

       * Plain system messages. These are  received  as  {_s_y_s_t_e_m,
         _F_r_o_m,  _M_s_g}. The content and meaning of this message are
         not interpreted by the receiving process module. When  a
         system   message   has   been   received,  the  function
         _s_y_s:_h_a_n_d_l_e__s_y_s_t_e_m__m_s_g/_6 is called in order to handle the
         request.

       * Shutdown messages. If the process traps exits,  it  must
         be  able to handle an shut-down request from its parent,
         the supervisor. The  message  {'_E_X_I_T',  _P_a_r_e_n_t,  _R_e_a_s_o_n}
         from  the  parent  is an order to terminate. The process
         must terminate when this message is  received,  normally
         with the same _R_e_a_s_o_n as _P_a_r_e_n_t.




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  1






sys(3)              ERLANG MODULE DEFINITION               sys(3)



       * There is one more message which the process must  under-
         stand  if  the  modules  used  to  implement the process
         change dynamically during runtime. An example of such  a
         process  is  the  _g_e_n__e_v_e_n_t  processes.  This message is
         {_g_e_t__m_o_d_u_l_e_s, _F_r_o_m}. The reply to this message is _F_r_o_m !
         {_m_o_d_u_l_e_s,  _M_o_d_u_l_e_s},  where  _M_o_d_u_l_e_s  is  a  list of the
         currently active modules in the process.

         This message is used by  the  release  handler  to  find
         which  processes  execute  a certain module. The process
         may at a later time be suspended and ordered to  perform
         a code change for one of its modules.

System Events
     When debugging a process with the functions of this  module,
     the  process  generates _s_y_s_t_e_m__e_v_e_n_t_s which are then treated
     in the debug function. For example, _t_r_a_c_e formats the system
     events to the tty.

     There are three predefined system events which are used when
     a  process receives or sends a message. The process can also
     define its own system events. It is always up to the process
     itself to format these events.

EXPORTS
     log(Name,Flag)
     log(Name,Flag,Timeout) -> ok | {ok, [system_event()]}

          Types
               Flag = true | {true, N} | false | get | print
               N = integer() > 0

          Turns the logging of system events On or Off. If On,  a
          maximum  of  _N  events  are kept in the debug structure
          (the default is 10). If _F_l_a_g is  _g_e_t,  a  list  of  all
          logged events is returned. If _F_l_a_g is _p_r_i_n_t, the logged
          events are printed to _s_t_a_n_d_a_r_d__i_o. The events are  for-
          matted  with  a function that is defined by the process
          that   generated   the   event   (with   a   call    to
          _s_y_s:_h_a_n_d_l_e__d_e_b_u_g/_4).

     log_to_file(Name,Flag)
     log_to_file(Name,Flag,Timeout) -> ok | {error, open_file}

          Types
               Flag = FileName | false
               FileName = string()

          Enables or disables the logging of all system events in
          textual  format  to  the file. The events are formatted
          with a function that is defined  by  the  process  that
          generated     the     event    (with    a    call    to



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  2






sys(3)              ERLANG MODULE DEFINITION               sys(3)



          _s_y_s:_h_a_n_d_l_e__d_e_b_u_g/_4).

     statistics(Name,Flag)
     statistics(Name,Flag,Timeout) -> ok | {ok, Statistics}

          Types
               Flag = true | false | get
               Statistics  =   [{start_time,   {Date1,   Time1}},
               {current_time,    {Date,   Time2}},   {reductions,
               integer()},       {messages_in,        integer()},
               {messages_out, integer()}]
               Date1 = Date2 = {Year, Month, Day}
               Time1 = Time2 = {Hour, Min, Sec}

          Enables or disables the collection  of  statistics.  If
          _F_l_a_g is _g_e_t, the statistical collection is returned.

     trace(Name,Flag)
     trace(Name,Flag,Timeout) -> void()

          Types
               Flag = boolean()

          Prints all system events on _s_t_a_n_d_a_r_d__i_o. The events are
          formatted  with  a function that is defined by the pro-
          cess  that  generated  the  event  (with  a   call   to
          _s_y_s:_h_a_n_d_l_e__d_e_b_u_g/_4).

     no_debug(Name)
     no_debug(Name,Timeout) -> void()

          Turns off all debugging for the process. This  includes
          functions  that have been installed explicitly with the
          _i_n_s_t_a_l_l function, for example triggers.

     suspend(Name)
     suspend(Name,Timeout) -> void()

          Suspends the process. When the process is suspended, it
          will  only  respond  to  other system messages, but not
          other messages.

     resume(Name)
     resume(Name,Timeout) -> void()

          Resumes a suspended process.

     change_code(Name, OldVsn, Module, Extra)
     change_code(Name, OldVsn, Module, Extra, Timeout)  ->  ok  |
     {error, Reason}

          Types



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  3






sys(3)              ERLANG MODULE DEFINITION               sys(3)



               OldVsn = undefined | term()
               Module = atom()
               Extra = term()

          Tells the process to change code. The process  must  be
          suspended to handle this message. The _E_x_t_r_a argument is
          reserved for each process to use as its own. The  func-
          tion  _M_o_d:_s_y_s_t_e_m__c_o_d_e__c_h_a_n_g_e/_4 is called. _O_l_d_V_s_n is the
          old version of the _M_o_d_u_l_e.

     get_status(Name)
     get_status(Name,Timeout) ->  {status,  Pid,  {module,  Mod},
     [PDict, SysState, Parent, Dbg, Misc]}

          Types
               PDict = [{Key, Value}]
               SysState = running | suspended
               Parent = pid()
               Dbg = [dbg_opt()]
               Misc = term()

          Gets the status of the process.

     install(Name,{Func,FuncState})
     install(Name,{Func,FuncState},Timeout)

          Types
               Func = dbg_fun()
               dbg_fun() = fun(FuncState,  Event,  ProcState)  ->
               done | NewFuncState
               FuncState = term()
               Event = system_event()
               ProcState = term()
               NewFuncState = term()

          This function makes it possible to install other  debug
          functions  than  the  ones defined above. An example of
          such a function is a trigger, a function that waits for
          some  special  event  and performs some action when the
          event is generated. This could, for example, be turning
          on low level tracing.

          _F_u_n_c is called whenever a system  event  is  generated.
          This  function should return _d_o_n_e, or a new func state.
          In the first case,  the  function  is  removed.  It  is
          removed if the function fails.

     remove(Name,Func)
     remove(Name,Func,Timeout) -> void()

          Types
               Func = dbg_fun()



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  4






sys(3)              ERLANG MODULE DEFINITION               sys(3)



          Removes a previously installed debug function from  the
          process. _F_u_n_c must be the same as previously installed.

Process Implementation Functions
     The following functions are used when implementing a special
     process.  This  is  an ordinary process which does not use a
     standard behaviour, but  a  process  which  understands  the
     standard system messages.

EXPORTS
     debug_options(Options) -> [dbg_opt()]

          Types
               Options = [Opt]
               Opt = trace | log  |  statistics  |  {log_to_file,
               FileName} | {install, {Func, FuncState}}
               Func = dbg_fun()
               FuncState = term()

          This function can be used by a process that initiates a
          debug  structure  from a list of options. The values of
          the _O_p_t argument are  the  same  as  the  corresponding
          functions.

     get_debug(Item,Debug,Default) -> term()

          Types
               Item = log | statistics
               Debug = [dbg_opt()]
               Default = term()

          This function gets the data  associated  with  a  debug
          option.  _D_e_f_a_u_l_t  is returned if the _I_t_e_m is not found.
          Can be used by the process to retrieve debug  data  for
          printing before it terminates.

     handle_debug([dbg_opt()],FormFunc,Extra,Event)            ->
     [dbg_opt()]

          Types
               FormFunc = dbg_fun()
               Extra = term()
               Event = system_event()

          This function is called by a process when it  generates
          a system event. _F_o_r_m_F_u_n_c is a formatting function which
          is called as _F_o_r_m_F_u_n_c(_D_e_v_i_c_e, _E_v_e_n_t, _E_x_t_r_a) in order to
          print  the  events,  which  is  necessary if tracing is
          activated. _E_x_t_r_a is any  extra  information  which  the
          process  needs  in the format function, for example the
          name of the process.




Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  5






sys(3)              ERLANG MODULE DEFINITION               sys(3)



     handle_system_msg(Msg,From,Parent,Module,Debug,Misc)

          Types
               Msg = term()
               From = pid()
               Parent = pid()
               Module = atom()
               Debug = [dbg_opt()]
               Misc = term()

          This function is used by a process module  that  wishes
          to take care of system messages. The process receives a
          {_s_y_s_t_e_m, _F_r_o_m, _M_s_g} message and passes the _M_s_g and _F_r_o_m
          to this function.

          This function _n_e_v_e_r  returns.  It  calls  the  function
          _M_o_d_u_l_e:_s_y_s_t_e_m__c_o_n_t_i_n_u_e(_P_a_r_e_n_t,  _N_D_e_b_u_g, _M_i_s_c) where the
          process      continues      the      execution,      or
          _M_o_d_u_l_e:_s_y_s_t_e_m__t_e_r_m_i_n_a_t_e(_R_e_a_s_o_n, _P_a_r_e_n_t, _D_e_b_u_g, _M_i_s_c) if
          the process should terminate. The  _M_o_d_u_l_e  must  export
          _s_y_s_t_e_m__c_o_n_t_i_n_u_e/_3,        _s_y_s_t_e_m__t_e_r_m_i_n_a_t_e/_4,       and
          _s_y_s_t_e_m__c_o_d_e__c_h_a_n_g_e/_4 (see below).

          The _M_i_s_c argument can be used to save internal data  in
          a  process,  for  example  its  state.  It  is  sent to
          _M_o_d_u_l_e:_s_y_s_t_e_m__c_o_n_t_i_n_u_e/_3 or _M_o_d_u_l_e:_s_y_s_t_e_m__t_e_r_m_i_n_a_t_e/_4

     print_log(Debug) -> void()

          Types
               Debug = [dbg_opt()]

          Prints the logged system events in the debug  structure
          using  _F_o_r_m_F_u_n_c as defined when the event was generated
          by a call to _h_a_n_d_l_e__d_e_b_u_g/_4.

     Mod:system_continue(Parent, Debug, Misc)

          Types
               Parent = pid()
               Debug = [dbg_opt()]
               Misc = term()

          This function is  called  from  _s_y_s:_h_a_n_d_l_e__s_y_s_t_e_m__m_s_g/_6
          when  the  process  should  continue its execution (for
          example after it has  been  suspended).  This  function
          never returns.

     Mod:system_terminate(Reason, Parent, Debug, Misc)

          Types
               Reason = term()



Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  6






sys(3)              ERLANG MODULE DEFINITION               sys(3)



               Parent = pid()
               Debug = [dbg_opt()]
               Misc = term()

          This function is  called  from  _s_y_s:_h_a_n_d_l_e__s_y_s_t_e_m__m_s_g/_6
          when  the  process  should terminate. For example, this
          function is called when the process  is  suspended  and
          its  parent  orders  shut-down.  It gives the process a
          chance to do a clean-up. This function never returns.

     Mod:system_code_change(Misc, Module, OldVsn, Extra) ->  {ok,
     NMisc}

          Types
               Misc = term()
               OldVsn = undefined | term()
               Module = atom()
               Extra = term()
               NMisc = term()

          Called from _s_y_s:_h_a_n_d_l_e__s_y_s_t_e_m__m_s_g/_6  when  the  process
          should  perform  a code change. The code change is used
          when the internal  data  structure  has  changed.  This
          function  converts  the  _M_i_s_c  argument to the new data
          structure. _O_l_d_V_s_n is the _v_s_n attribute of the old  ver-
          sion  of  the _M_o_d_u_l_e. If no such attribute was defined,
          the atom _u_n_d_e_f_i_n_e_d is sent.

AUTHORS
     Martin Bjorklund - support@erlang.ericsson.se
     Magnus Froberg - support@erlang.ericsson.se
























Ericsson UtvecklingsLAaBst change: stdlib  1.9.1                  7



