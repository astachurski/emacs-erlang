


seq_trace(3)        ERLANG MODULE DEFINITION         seq_trace(3)



MODULE
     seq_trace - Sequential Tracing of Messages.

DESCRIPTION
     Sequential tracing makes it possible to trace  all  messages
     resulting  from  one  initial message. Sequential tracing is
     completely independent of the ordinary  tracing  in  Erlang,
     which  is  controlled  by  the  _e_r_l_a_n_g:_t_r_a_c_e/_3  BIF. See the
     chapter "What is Sequential Trace" below for  more  informa-
     tion  about  what  sequential  tracing  is and how it can be
     used.

     _s_e_q__t_r_a_c_e provides functions which control  all  aspects  of
     sequential  tracing.  There  are  functions  for activation,
     deactivation, inspection and for  collection  of  the  trace
     output.

  Note:
     The implementation of sequential tracing is in beta  status.
     This  means  that  the  programming  interface  still  might
     undergo minor adjustments (possibly incompatible)  based  on
     feedback from users.



EXPORTS
     set_token(Component,  ComponentValue)  ->  {Component,  Pre-
     viousValue}

          Types
               Component = label | serial | Flag
               Flag = send | 'receive' | print | timestamp
               ComponentValue = FlagValue | LabelValue |  Serial-
               Value
               FlagValue = bool() (for Flag)
               LabelValue = integer() (for label)
               SerialValue = {Previous, Current}
               Previous = Current = integer()

          Sets the individual _C_o_m_p_o_n_e_n_t of  the  trace  token  to
          _C_o_m_p_o_n_e_n_t_V_a_l_u_e. Returns the previous value of the trace
          token _C_o_m_p_o_n_e_n_t. The  valid  _C_o_m_p_o_n_e_n_t,  _C_o_m_p_o_n_e_n_t_V_a_l_u_e
          combinations are:

            _l_a_b_e_l, _i_n_t_e_g_e_r():
                The _l_a_b_e_l component is an integer  which  identi-
                fies  all events belonging to the same sequential
                trace. If several sequential traces can be active
                simultaneously  _l_a_b_e_l  is  used  to  identify the
                separate traces. Default is 0.

            _s_e_n_d, _b_o_o_l():



Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  1






seq_trace(3)        ERLANG MODULE DEFINITION         seq_trace(3)



                A  trace  token  flag  (_t_r_u_e   |   _f_a_l_s_e)   which
                enables/disables   tracing  on  message  sending.
                Default is _f_a_l_s_e.

            '_r_e_c_e_i_v_e', _b_o_o_l():
                A  trace  token  flag  (_t_r_u_e   |   _f_a_l_s_e)   which
                enables/disables  tracing  on  message reception.
                Default is _f_a_l_s_e.

            _p_r_i_n_t, _b_o_o_l():
                A  trace  token  flag  (_t_r_u_e   |   _f_a_l_s_e)   which
                enables/disables  tracing  on  explicit  calls to
                _s_e_q__t_r_a_c_e:_p_r_i_n_t/_1. Default is _f_a_l_s_e.

            _t_i_m_e_s_t_a_m_p, _b_o_o_l():
                A  trace  token  flag  (_t_r_u_e   |   _f_a_l_s_e)   which
                enables/disables  a _t_i_m_e_s_t_a_m_p to be generated for
                each traced event. Default is _f_a_l_s_e.

            _s_e_r_i_a_l, _S_e_r_i_a_l_V_a_l_u_e:
                _S_e_r_i_a_l_V_a_l_u_e =  {_P_r_e_v_i_o_u_s,  _C_u_r_r_e_n_t}.  The  _s_e_r_i_a_l
                component  contains  counters  which  enables the
                traced messages to be sorted, should never be set
                explicitly  by  the  user  as  these counters are
                updated automatically. Default is {_0, _0}.

     set_token(Token) -> PreviousToken

          Types
               Token = PreviousToken = term() | []

          Sets the trace token for the current process to  _T_o_k_e_n.
          If _T_o_k_e_n = [] then tracing is disabled, otherwise _T_o_k_e_n
          should be an Erlang term returned from  _g_e_t__t_o_k_e_n/_0  or
          _s_e_t__t_o_k_e_n/_1.  _s_e_t__t_o_k_e_n/_1  can  be  used to temporarily
          exclude message passing from the trace by  setting  the
          trace token to empty like this:

          OldToken = seq_trace:set_token([]), % set to empty and save
                                              % old value
          % do something that should not be part of the trace
          io:format("Exclude the signalling caused by this~n"),
          seq_trace:set_token(OldToken), % activate the trace token again
          ...

          Returns the previous value of the trace token.

     get_token(Component) -> {Component, ComponentValue}

          Types
               Component = label | serial | Flag
               ComponentValue  =   FlagValue   |   LabelValue   |



Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  2






seq_trace(3)        ERLANG MODULE DEFINITION         seq_trace(3)



               SerialValue
               Flag = send | 'receive' | print | timestamp
               FlagValue = bool() (for Flag)
               LabelValue = integer() (for label)
               SerialValue = {Previous, Current} (for serial)
               Previous = Current = integer()

          Returns the value  of  the  trace  token  component_C_o_m_-
          _p_o_n_e_n_t.

     get_token() -> TraceToken

          Types
               TraceToken = term() | []

          Returns the value of the trace token  for  the  current
          process. If [] is returned it means that tracing is not
          active. Any other value returned is  the  value  of  an
          active  trace  token. The value returned can be used as
          input to the _s_e_t__t_o_k_e_n/_1 function.

     print(TraceInfo) -> void

          Types
               TraceInfo = term()

          Puts the Erlang  term  _T_r_a_c_e_I_n_f_o  into  the  sequential
          trace  output  if  the  process  currently is executing
          within a sequential trace and the  _p_r_i_n_t  flag  of  the
          trace token is set.

     reset_trace() -> void

          Sets the trace token to empty for all processes in  the
          node.  The process internal counters used to create the
          serial of the trace token is set to 0. The trace  token
          is  set  to  empty  for all messages in message queues.
          Together this will effectively stop all ongoing sequen-
          tial tracing in the Erlang node.

     set_system_tracer(ProcessOrPortId) -> PreviousId

          Types
               Pid = PreviousId = pid() | port() | false

          Sets the system tracer. The system tracer can be either
          a  pid  or port denoted by _P_r_o_c_e_s_s_O_r_P_o_r_t_I_d. Returns the
          previous value (which can be _f_a_l_s_e if no system  tracer
          is   active).   The  function  will  generate  {'_E_X_I_T',
          {_b_a_d_a_r_g, _I_n_f_o}} if _P_i_d is not the pid  of  an  existing
          local process.




Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  3






seq_trace(3)        ERLANG MODULE DEFINITION         seq_trace(3)



     get_system_tracer() -> pid() | port() | false

          Returns the pid or port identifier of the current  sys-
          tem tracer or _f_a_l_s_e if no system tracer is activated.

Trace Messages Sent To the System
     The format of the messages are:

     {seq_trace, Label, SeqTraceInfo, TimeStamp}

     or

     {seq_trace, Label, SeqTraceInfo}

     depending on whether the _t_i_m_e_s_t_a_m_p flag of the  trace  token
     is set to _t_r_u_e or _f_a_l_s_e. Where :


     Label = integer()
     TimeStamp = {Seconds, Milliseconds, Microseconds}
     Seconds = Milliseconds = Microseconds = integer()

     The _S_e_q_T_r_a_c_e_I_n_f_o can have the following formats:

       {_s_e_n_d, _S_e_r_i_a_l, _F_r_o_m, _T_o, _M_e_s_s_a_g_e}:
           Used when a process _F_r_o_m with  its  trace  token  flag
           _p_r_i_n_t set to _t_r_u_e has sent a message.

       {'_r_e_c_e_i_v_e', _S_e_r_i_a_l, _F_r_o_m, _T_o, _M_e_s_s_a_g_e}:
           Used when a process _T_o receives a message with a trace
           token that has the '_r_e_c_e_i_v_e' flag set to _t_r_u_e.

       {_p_r_i_n_t, _S_e_r_i_a_l, _F_r_o_m, _, _I_n_f_o}:
           Used    when    a    process    _F_r_o_m    has     called
           _s_e_q__t_r_a_c_e:_p_r_i_n_t(_L_a_b_e_l,  _I_n_f_o)  and  has  a trace token
           with _p_r_i_n_t set to _t_r_u_e and _l_a_b_e_l set to _L_a_b_e_l.

     Serial = {PreviousSerial, ThisSerial}
     PreviousSerial = ThisSerial = integer()
     From = To = pid()

     _S_e_r_i_a_l is a tuple consisting of two integers where the first
     _P_r_e_v_i_o_u_s_S_e_r_i_a_l denotes the serial counter passed in the last
     received message which carried a trace token. If the process
     is  the  first  one  in  a  new  sequential  trace  the _P_r_e_-
     _v_i_o_u_s_S_e_r_i_a_l is set to the  value  of  the  process  internal
     "trace  clock".  The second integer _T_h_i_s_S_e_r_i_a_l is the serial
     counter that a process sets on outgoing messages and  it  is
     based  on the process internal "trace clock" which is incre-
     mented by one before it is attached to the  trace  token  in
     the message.




Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  4






seq_trace(3)        ERLANG MODULE DEFINITION         seq_trace(3)



What is Sequential Tracing
     Sequential tracing is a way to trace a sequence of  messages
     sent  between different local or distributed processes where
     the sequence is initiated by one single message. In short it
     works like this:

     Each process has a _t_r_a_c_e _t_o_k_e_n which can  be  empty  or  not
     empty.  When  not  empty  the trace token can be seen as the
     tuple {_L_a_b_e_l, _F_l_a_g_s,  _S_e_r_i_a_l,  _F_r_o_m}.  The  trace  token  is
     passed invisibly with each message.

     In order to start a sequential trace the  user  must  expli-
     citly  set the trace token in the process that will send the
     first message in a sequence.

     The trace token of a process is automatically set  to  empty
     each time the process enters a receive statement but will be
     set to a value again  if  the  received  message  carries  a
     nonempty trace token.

     On each Erlang node a process  can  be  set  as  the  _s_y_s_t_e_m
     _t_r_a_c_e_r. This process will receive trace messages each time a
     message with a trace token is sent or received (if the trace
     token  flag _s_e_n_d or '_r_e_c_e_i_v_e' is set). The system tracer can
     then print each trace event, write it to a file or  whatever
     suitable.

  Note:
     The system tracer will only receive those trace events  that
     occur  locally within the Erlang node. To get the whole pic-
     ture of  a  sequential  trace  that  involves  processes  on
     several  Erlang  nodes, the output from the system tracer on
     each involved node must be merged (off line).


     In the following sections Sequential Tracing  and  its  most
     fundamental concepts are described.

Trace Token
     Each process has a current trace token. Initially the  token
     is  empty.  When the process sends a message to another pro-
     cess, a copy of the current token will be  sent  "invisibly"
     along  with  the  message. The current token of a process is
     set in two ways, either

       1.  explicitly by the process itself, through  a  call  to
           _s_e_q__t_r_a_c_e:_s_e_t__t_o_k_e_n, or

       2.  when a message is received.

     In both cases the current token will be set. In  particular,
     if  the  token  of  a message received is empty, the current



Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  5






seq_trace(3)        ERLANG MODULE DEFINITION         seq_trace(3)



     token of the process is set to empty.

     A trace token contains a label, and a set of flags. Both the
     label and the flags are set in 1 and 2 above.

Serial
     The trace token contains  a  component  which  we  call  the
     _S_e_r_i_a_l  which consists of two integers _P_r_e_v_i_o_u_s and _C_u_r_r_e_n_t.
     The purpose of _S_e_r_i_a_l is uniquely identify each traced event
     within a trace sequence and to order the messages chronolog-
     ically and in the different branches if any.

     The algorithm for updating _S_e_r_i_a_l can be described  as  fol-
     lows:

     Let each process have two  counters  _p_r_e_v__c_n_t  and  _c_u_r_r__c_n_t
     which  both  are  set  to  0  when a process is created. The
     counters are updated at the following occasions:

       * _W_h_e_n _t_h_e _p_r_o_c_e_s_s _i_s _a_b_o_u_t _t_o  _s_e_n_d  _a  _m_e_s_s_a_g_e  _a_n_d  _t_h_e
         _t_r_a_c_e _t_o_k_e_n _i_s _n_o_t _e_m_p_t_y.

         Let the Serial of the trace token be _t_p_r_e_v and _t_c_u_r_r.
          _c_u_r_r__c_n_t := _c_u_r_r__c_n_t + _1
          _t_p_r_e_v := _p_r_e_v__c_n_t
          _t_c_u_r_r := _c_u_r_r__c_n_t

         The trace token with _t_p_r_e_v  and  _t_c_u_r_r  is  then  passed
         along with the message.

       * _W_h_e_n _t_h_e _p_r_o_c_e_s_s _c_a_l_l_s _s_e_q__t_r_a_c_e:_p_r_i_n_t(_L_a_b_e_l, _I_n_f_o)  _t_h_e
         _L_a_b_e_l  _m_a_t_c_h_e_s _t_h_e _l_a_b_e_l _p_a_r_t _o_f _t_h_e _t_r_a_c_e _t_o_k_e_n _a_n_d _t_h_e
         _t_r_a_c_e _t_o_k_e_n _p_r_i_n_t _f_l_a_g _i_s _t_r_u_e.

         The same algorithm as for send above.

       * _W_h_e_n _a _m_e_s_s_a_g_e _i_s _r_e_c_e_i_v_e_d _a_n_d _c_o_n_t_a_i_n_s _a _n_o_n_e_m_p_t_y _t_r_a_c_e
         _t_o_k_e_n.

         The process trace token is set to the trace  token  from
         the message.

         Let the Serial of the trace token be _t_p_r_e_v and _t_c_u_r_r.
          _i_f (_c_u_r_r__c_n_t < _t_c_u_r_r )
                 _c_u_r_r__c_n_t := _t_c_u_r_r
          _p_r_e_v__c_n_t := _t_p_r_e_v

     The _c_u_r_r__c_n_t of a process is incremented each time the  pro-
     cess  is  involved  in  a  sequential trace. The counter can
     reach its limit (27 bits) if a process  is  very  long-lived
     and  is  involved in much sequential tracing. If the counter
     overflows it will not be possible  to  use  the  Serial  for



Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  6






seq_trace(3)        ERLANG MODULE DEFINITION         seq_trace(3)



     ordering  of  the  trace events. To prevent the counter from
     overflowing in the middle of a sequential trace the function
     _s_e_q__t_r_a_c_e:_r_e_s_e_t__t_r_a_c_e/_0  can be called to reset the _p_r_e_v__c_n_t
     and _c_u_r_r__c_n_t of all processes in the Erlang node. This func-
     tion  will  also set all trace tokens in processes and their
     message queues to empty  and  will  thus  stop  all  ongoing
     sequential tracing.

Performance considerations
     The performance degradation for a system  which  is  enabled
     for  Sequential  tracing is negligible as long as no tracing
     is activated. When tracing is activated there will of course
     be  an extra cost for each traced message but all other mes-
     sages will be unaffected.

Ports
     Sequential tracing is not performed across ports.

     If the user for some reason wants to pass the trace token to
     a  port this has to be done manually in the code of the port
     controlling process. The port controlling processes have  to
     check the appropriate sequential trace settings (as obtained
     from _s_e_q__t_r_a_c_e:_g_e_t__t_o_k_e_n/_1 and include trace information  in
     the message data sent to their respective ports.

     Similarly, for messages received from a port,  a  port  con-
     troller  has to retrieve trace specific information, and set
     appropriate  sequential  trace  flags   through   calls   to
     _s_e_q__t_r_a_c_e:_s_e_t__t_o_k_e_n/_2.

Distribution
     Sequential tracing between nodes is performed transparently.
     This  applies  to C-nodes built with Erl_interface too. A C-
     node built with Erl_interface only maintains one trace token
     which  means that the C-node will appear as one process from
     the sequential tracing point of view.

     In order to be able to perform  sequential  tracing  between
     distributed Erlang nodes, the distribution protocol has been
     extended (in a backward  compatible  way).  An  Erlang  node
     which  supports  sequential  tracing can communicate with an
     older (OTP R3B) node but messages passed  within  that  node
     can of course not be traced.

Example of Usage
     The example shown here will give rough idea of how  the  new
     primitives  can be used and what kind of output it will pro-
     duce.

     Assume that  we  have  an  initiating  process  with  Pid  =
     <0.30.0> like this:




Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  7






seq_trace(3)        ERLANG MODULE DEFINITION         seq_trace(3)



     -module(seqex).
     -compile(export_all).

     loop(Port) ->
             receive
             {Port,Message} ->
                     seq_trace:set_token(label,17),
                     seq_trace:set_token('receive',true),
                     seq_trace:set_token(print,true),
                     seq_trace:print(17,"**** Trace Started ****"),
                     call_server ! {self(),the_message};
                 {ack,Ack} ->
                     ok
             end,
             loop(Port).

     And a registered process 'call_server' with Pid  =  <0.31.0>
     like this:

     loop() ->
             receive
             {PortController,Message} ->
                     Ack = {received, Message},
                     seq_trace:print(17,"We are here now"),
                     PortController ! {ack,Ack}
             end,
             loop().

     A  possible  output  from  the  system's   sequential_tracer
     (inspired by AXE-10 and MD-110) could look like:

     17:<0.30.0> Info {0,1} WITH
     "**** Trace Started ****"
     17:<0.31.0> Received {0,2} FROM <0.30.0> WITH
     {<0.30.0>,the_message}
     17:<0.31.0> Info {2,3} WITH
     "We are here now"
     17:<0.30.0> Received {2,4} FROM <0.31.0> WITH
     {ack,{received,the_message}}

     The implementation of a system tracer process that  produces
     the printout above could look like this:

     tracer() ->
         receive
             {seq_trace,Label,TraceInfo} ->
                print_trace(Label,TraceInfo,false);
             {seq_trace,Label,TraceInfo,Ts} ->
                print_trace(Label,TraceInfo,Ts);
             Other -> ignore
         end,
         tracer().



Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  8






seq_trace(3)        ERLANG MODULE DEFINITION         seq_trace(3)



     print_trace(Label,TraceInfo,false) ->
           io:format("~p:",[Label]),
           print_trace(TraceInfo);
     print_trace(Label,TraceInfo,Ts) ->
           io:format("~p ~p:",[Label,Ts]),
           print_trace(TraceInfo).

     print_trace({print,Serial,From,_,Info}) ->
           io:format("~p Info ~p WITH~n~p~n", [From,Serial,Info]);
     print_trace({'receive',Serial,From,To,Message}) ->
           io:format("~p Received ~p FROM ~p WITH~n~p~n",
                     [To,Serial,From,Message]);
     print_trace({send,Serial,From,To,Message}) ->
           io:format("~p Sent ~p TO ~p WITH~n~p~n",
                     [From,Serial,To,Message]).

     The code that creates a process that runs the  tracer  func-
     tion  above and sets that process as the system tracer could
     look like this:

     start() ->
         Pid = spawn(?MODULE,tracer,[]),
         seq_trace:set_system_tracer(Pid), % set Pid as the system tracer
         ok.

     With a function like _t_e_s_t/_0 below the whole example  can  be
     started.

     test() ->
         P = spawn(?MODULE, loop, [port]),
         register(call_server, spawn(?MODULE, loop, [])),
         start(),
         P ! {port,message}.

AUTHOR
     kenneth@erix.ericsson.se - support@erlang.ericsson.se



















Ericsson UtvecklingsLAaBst change: kernel  2.6.1                  9



