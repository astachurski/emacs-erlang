


yecc(3)             ERLANG MODULE DEFINITION              yecc(3)



MODULE
     yecc -  LALR-1 Parser Generator

DESCRIPTION
     An LALR-1 parser generator  for  Erlang,  similar  to  _y_a_c_c.
     Takes a BNF grammar definition as input, and produces Erlang
     code for a parser.

     To understand this text, you also have to look at  the  _y_a_c_c
     documentation  in the UNIX(TM) manual. This is most probably
     necessary in order to understand the idea of a  parser  gen-
     erator,  and the principle and problems of LALR parsing with
     finite look-ahead.


EXPORTS
     yecc(Grammarfile, Parserfile)
     yecc(Grammarfile, Parserfile, Verboseflag)
     yecc(Grammarfile, Parserfile, Verboseflag, Includefile)

          Types
               Grammarfile = Parserfile = Includefile = atom()  |
               string()
               Verboseflag = bool()

          _G_r_a_m_m_a_r_f_i_l_e is the file  of  declarations  and  grammar
          rules, and _P_a_r_s_e_r_f_i_l_e is the name of the file that will
          contain the Erlang parser code that is  generated.  The
          optional  _V_e_r_b_o_s_e_f_l_a_g  argument  determines whether the
          parser generator should  give  full  information  about
          resolved  and  unresolved  parse  action  conflicts  (=
          true), or only about those  conflicts  that  prevent  a
          parser  from  being generated from the input grammar (=
          false; the default). The optional _I_n_c_l_u_d_e_f_i_l_e  argument
          indicates a customized prologue file which the user may
          want   to   use   instead   of   the    default    file
          _l_i_b/_p_a_r_s_e_t_o_o_l_s/_i_n_c_l_u_d_e/_y_e_c_c_p_r_e._h_r_l  which  is otherwise
          included at the beginning of the resulting parser file.
          _N._B.  The _I_n_c_l_u_d_e_f_i_l_e is included 'as is' in the parser
          file, so it must not have a module declaration  of  its
          own,  and  it should not be compiled. It must, however,
          contain the necessary export declarations.

          The value of the _P_a_r_s_e_r_f_i_l_e parameter is used  by  _y_e_c_c
          as  the  module  name of the generated parser file, and
          its file name becomes _P_a_r_s_e_r_f_i_l_e._e_r_l.

          _Y_e_c_c will add the extension  ._y_r_l  to  the  _G_r_a_m_m_a_r_f_i_l_e
          name, and the extension ._h_r_l to the _I_n_c_l_u_d_e_f_i_l_e name.

Pre-Processing




Ericsson UtvecklingsLaAsBt change: parsetools  1.1                 1






yecc(3)             ERLANG MODULE DEFINITION              yecc(3)



     A _s_c_a_n_n_e_r to pre-process the  text  (program,  etc.)  to  be
     parsed  is  not  provided  in  the  _y_e_c_c module. The scanner
     serves as a kind of lexicon look-up routine. It is  possible
     to write a grammar that uses only character tokens as termi-
     nal symbols, thereby eliminating the need for a scanner, but
     this would make the parser larger and slower.

     The user should implement a scanner that segments the  input
     text,  and  turns  it into one or more lists of tokens. Each
     token should be a tuple containing information about syntac-
     tic  category,  position in the text (e.g. line number), and
     the actual terminal symbol found  in  the  text:  {_C_a_t_e_g_o_r_y,
     _L_i_n_e_N_u_m_b_e_r, _S_y_m_b_o_l}.

     If a terminal symbol is the only member of a  category,  and
     the symbol name is identical to the category name, the token
     format may be{_S_y_m_b_o_l, _L_i_n_e_N_u_m_b_e_r}.

     A list of tokens produced by the scanner should end  with  a
     special_e_n_d__o_f__i_n_p_u_t  tuple  which the parser is looking for.
     The  format  of  this  tuple  should  be  {_E_n_d_s_y_m_b_o_l,  _L_a_s_t_-
     _L_i_n_e_N_u_m_b_e_r},  where  _E_n_d_s_y_m_b_o_l is an identifier that is dis-
     tinguished from all the terminal and non-terminal categories
     of  the  syntax  rules. The _E_n_d_s_y_m_b_o_l may be declared in the
     grammar file (see below).

     The simplest case is to segment the input string into a list
     of   identifiers   (atoms)  and  use  those  atoms  both  as
     categories and values of the tokens. For example, the  input
     string _a_a_a _b_b_b _7_7_7, _X may be scanned (tokenized) as:

     [{aaa, 1}, {bbb, 1}, {777, 1}, {',' , 1}, {'X', 1},
      {'$end', 1}].

     This assumes that this is the first line of the input  text,
     and that '$_e_n_d' is the distinguished _e_n_d__o_f__i_n_p_u_t symbol.

     The Erlang scanner in the _i_o module can be used as a  start-
     ing  point when writing a new scanner. Study _y_e_c_c_s_c_a_n._e_r_l in
     order  to  see  how  a  filter  can  be  added  on  top   of
     _i_o:_s_c_a_n__e_r_l__f_o_r_m/_3 to provide a scanner for _y_e_c_c that token-
     izes grammar files before parsing them with the yecc parser.
     A  more general approach to scanner implementation is to use
     a scanner generator. A scanner generator  in  Erlang  called
     _l_e_e_x is under development.

Grammar Definition Format
     Erlang style _c_o_m_m_e_n_t_s, starting with a '%', are  allowed  in
     grammar files.

     Each _d_e_c_l_a_r_a_t_i_o_n or _r_u_l_e ends  with  a  dot  (the  character
     '.').



Ericsson UtvecklingsLaAsBt change: parsetools  1.1                 2






yecc(3)             ERLANG MODULE DEFINITION              yecc(3)



     The grammar starts with a  declaration  of  the  _n_o_n_t_e_r_m_i_n_a_l
     _c_a_t_e_g_o_r_i_e_s to be used in the rules. For example:

     Nonterminals sentence nounphrase verbphrase.

     A non-terminal category can be used at the left hand side (=
     _l_h_s,  or  _h_e_a_d) of a grammar rule. It can also appear at the
     right hand side of rules.

     Next comes a declaration of the _t_e_r_m_i_n_a_l  _c_a_t_e_g_o_r_i_e_s,  which
     are  the  categories  of tokens produced by the scanner. For
     example:

     Terminals article adjective noun verb.

     Terminal categories may only appear in the right hand  sides
     (= _r_h_s) of grammar rules.

     Next  comes  a  declaration  of  the  _r_o_o_t_s_y_m_b_o_l,  or  start
     category of the grammar. For example:

     Rootsymbol sentence.

     This symbol should appear in the lhs of at least one grammar
     rule.  This is the most general syntactic category which the
     parser ultimately will parse every input string into.

     After the rootsymbol declaration comes an optional  declara-
     tion  of  the  _e_n_d__o_f__i_n_p_u_t  symbol  that  your  scanner  is
     expected to use. For example:

     Endsymbol '$end'.

     Next comes one or more declarations of _o_p_e_r_a_t_o_r _p_r_e_c_e_d_e_n_c_e_s,
     if  needed. These are used to resolve shift-reduce conflicts
     (see _y_a_c_c documentation).

     Examples of operator declarations:

     Right 200 '='.
     Left 300 '+'.
     Left 400 '*'.
     Unary 500 '-'.

     These declarations mean that '=' is defined as a _r_i_g_h_t _a_s_s_o_-
     _c_i_a_t_i_v_e _b_i_n_a_r_y operator with precedence 200, '+' and '*' are
     _l_e_f_t _a_s_s_o_c_i_a_t_i_v_e _b_i_n_a_r_y  operators,  where  '*'  takes  pre-
     cedence  over  '+'  (the  normal  case),  and '-' is a _u_n_a_r_y
     operator of higher precedence than '*'.

     Next come the _g_r_a_m_m_a_r _r_u_l_e_s. Each rule has the general form




Ericsson UtvecklingsLaAsBt change: parsetools  1.1                 3






yecc(3)             ERLANG MODULE DEFINITION              yecc(3)



     Left_hand_side -> Right_hand_side : Associated_code.

     The left hand side is a  non-terminal  category.  The  right
     hand  side is a sequence of one or more non-terminal or ter-
     minal symbols with spaces between. The associated code is  a
     sequence  of zero or more Erlang expressions (with commas ',
     ' as separators). If  the  associated  code  is  empty,  the
     separating  colon ':' is also omitted. A final dot marks the
     end of the rule.

     Because the parser generator is implemented  in  Erlang  and
     uses  a  modified version of the Erlang scanner in _i_o._e_r_l to
     scan grammar definition files, all symbols which  are  'spe-
     cial'  to Erlang, for example '_i_f', '_e_n_d', '_c_a_s_e', '{', '.',
     etc., have to be enclosed in single quotes when used as ter-
     minal  or  non-terminal symbols in grammar rules. The use of
     the symbols '$_e_m_p_t_y', '$_e_n_d',  and  '$_u_n_d_e_f_i_n_e_d'  should  be
     avoided.

     The last part of the grammar file  is  an  optional  section
     with  Erlang code (= function definitions) which is included
     'as is' in the resulting  parser  file.  This  section  must
     start with the pseudo declaration, or key words

     Erlang code.

     No syntax rule definitions or other declarations may  follow
     this section. To avoid conflicts with internal variables, do
     not use variable names beginning with two underscore charac-
     ters  ('__')  in  the Erlang code in this section, or in the
     code associated with the individual syntax rules.

Examples
     A grammar to parse list expressions (with  empty  associated
     code):

     Nonterminals list elements element.
     Terminals atom '(' ')'.
     Rootsymbol list.
     list -> '(' ')'.
     list -> '(' elements ')'.
     elements -> element.
     elements -> element elements.
     element -> atom.
     element -> list.

     This grammar can be used to generate a parser  which  parses
     list expressions, such as (), (_a), (_p_e_t_e_r _c_h_a_r_l_e_s), (_a (_b _c)
     _d (())), ... provided that your scanner tokenizes, for exam-
     ple, the input (_p_e_t_e_r _c_h_a_r_l_e_s) as follows:

     [{'(', 1} , {atom, 1, peter}, {atom, 1, charles}, {')', 1},



Ericsson UtvecklingsLaAsBt change: parsetools  1.1                 4






yecc(3)             ERLANG MODULE DEFINITION              yecc(3)



      {'$end', 1}]

     When a grammar rule is used by the parser to parse (part of)
     the  input  string  as  a grammatical phrase, the associated
     code is evaluated, and the  value  of  the  last  expression
     becomes  the  value  of the parsed phrase. This value may be
     used by the parser later to build structures that are values
     of higher phrases of which the current phrase is a part. The
     values initially associated with terminal category  phrases,
     i.e. input tokens, are the token tuples themselves.

     Below is an example of  the  grammar  above  with  structure
     building code added:

     list -> '(' ')' : nil.
     list -> '(' elements ')' : '$2'.
     elements -> element : {cons, '$1', nil}.
     elements -> element elements : {cons, '$1', '$2'}.
     element -> atom : '$1'.
     element -> list : '$1'.

     With this code added to the grammar rules, the  parser  pro-
     duces the following value (structure) when parsing the input
     string (_a _b _c).. This still assumes that this was the  first
     input line that the scanner tokenized:

     {cons, {atom, 1, a,} {cons, {atom, 1, b},
                                 {cons, {atom, 1, c}, nil}}}

     The associated code contains _p_s_e_u_d_o  _v_a_r_i_a_b_l_e_s  '$_1',  '$_2',
     '$_3',  etc. which refer to (are bound to) the values associ-
     ated previously by the parser with the symbols of the  right
     hand  side  of  the  rule.  When  these symbols are terminal
     categories, the values are token tuples of the input  string
     (see above).

     The associated code may not only be used to build structures
     associated  with phrases, but may also be used for syntactic
     and semantic tests, printout actions (for example for  trac-
     ing),  etc. during the parsing process. Since tokens contain
     positional (line number) information, it is possible to pro-
     duce  error messages which contain line numbers. If there is
     no associated code after the right hand side  of  the  rule,
     the value '$_u_n_d_e_f_i_n_e_d' is associated with the phrase.

     The right hand side of a grammar rule may be empty. This  is
     indicated  by using the special symbol '$_e_m_p_t_y' as rhs. Then
     the list grammar above may be simplified to:

     list -> '(' elements ')' : '$2'.
     elements -> element elements : {cons, '$1', '$2'}.
     elements -> '$empty' : nil.



Ericsson UtvecklingsLaAsBt change: parsetools  1.1                 5






yecc(3)             ERLANG MODULE DEFINITION              yecc(3)



     element -> atom : '$1'.
     element -> list : '$1'.

Generating a Parser
     To call the parser generator, use the following command:

     yecc:yecc(Grammarfile, Parserfile, Verbose, Includefile)

     _V_e_r_b_o_s_e (= true/false), and _I_n_c_l_u_d_e_f_i_l_e  are  optional  (see
     above).

     An error message from _y_e_c_c will be shown if the  grammar  is
     not  of  the  LALR  type (for example too ambiguous). Shift-
     reduce conflicts are resolved in favor of shifting if  there
     are  no  operator precedence declarations. Refer to the _y_a_c_c
     documentation on the use of operator precedence.

     The output file contains Erlang source  code  for  a  parser
     module  with  module name equal to the _P_a_r_s_e_r_f_i_l_e parameter.
     After compilation, the parser can be called as follows  (the
     module name is assumed to be _m_y_p_a_r_s_e_r):

     myparser:parse(myscanner:scan(Inport))

     The call format may be different if  a  customized  prologue
     file has been included when generating the parser instead of
     the default file_l_i_b/_p_a_r_s_e_t_o_o_l_s/_i_n_c_l_u_d_e/_y_e_c_c_p_r_e._h_r_l.

     With the standard prologue, this  call  will  return  either
     {_o_k,  _R_e_s_u_l_t},  where  _R_e_s_u_l_t is a structure that the Erlang
     code of the grammar file has built, or {_e_r_r_o_r, {_L_i_n_e__n_u_m_b_e_r,
     _M_o_d_u_l_e, _M_e_s_s_a_g_e}} if there was a syntax error in the input.

     _M_e_s_s_a_g_e is something which may be converted into a string by
     calling  _a_p_p_l_y(_M_o_d_u_l_e,  _f_o_r_m_a_t__e_r_r_o_r, [_M_e_s_s_a_g_e]) and printed
     with _i_o:_f_o_r_m_a_t/_3.

  Note:
     By default, the parser that was generated will not print out
     error  messages to the screen. The user will have to do this
     either by  printing  the  returned  error  messages,  or  by
     inserting  tests  and  print instructions in the Erlang code
     associated with the syntax rules of the grammar file.


     It is also possible to make the parser ask  for  more  input
     tokens when needed if the following call format is used:

     myparser:parse_and_scan({Mod, Tokenizer, Args})

     The call _a_p_p_l_y(_M_o_d, _T_o_k_e_n_i_z_e_r, _A_r_g_s) is executed whenever  a
     new token is needed. This, for example, makes it possible to



Ericsson UtvecklingsLaAsBt change: parsetools  1.1                 6






yecc(3)             ERLANG MODULE DEFINITION              yecc(3)



     parse from a file, token by token.

     The _M_o_d:_T_o_k_e_n_i_z_e_r function used above has to be  implemented
     so as to return one of the following:

     {ok, Tokens, Endline}
     {eof, Endline}
     {error, Error_description, Endline}

     This conforms to the format  used  by  the  scanner  in  the
     Erlang _i_o library module.

     If {_e_o_f, _E_n_d_l_i_n_e}  is  returned  immediately,  the  call  to
     _p_a_r_s_e__a_n_d__s_c_a_n/_1  returns  {_o_k,  _e_o_f}.  If {_e_o_f, _E_n_d_l_i_n_e} is
     returned  before  the   parser   expects   end   of   input,
     _p_a_r_s_e__a_n_d__s_c_a_n/_1  will,  of  course, return an error message
     (see above). Otherwise {_o_k, _R_e_s_u_l_t} is returned.

More Examples
     1. A grammar for parsing infix arithmetic  expressions  into
     prefix notation, without operator precedence:

     Nonterminals 'E' 'T' 'F'.
     Terminals '+' '*' '(' ')' a.
     Rootsymbol 'E'.
     <c>'E' -> 'E' '+' 'T': ['$1', '$2', '$3'].
     'E' -> 'T' : '$1'.
     'T' -> 'T' '*' 'F': ['$1', '$2', '$3'].
     'T' -> 'F' : '$1'.
     'F' -> '(' 'E' ')' : '$2'.
     'F' -> number : '$1'.

     2. The same with operator precedence becomes simpler:

     Nonterminals 'E'.
     Terminals '+' '*' '(' ')' number.
     Rootsymbol 'E'.
     Left 100 '+'.
     Left 200 '*'.
     'E' -> 'E' '+' 'E' : ['$1', '$2', '$3'].
     'E' -> 'E' '*' 'E' : ['$1', '$2', '$3'].
     'E' -> '(' 'E' ')' : '$2'.
     'E' -> number : '$1'.

     3. The _y_e_c_c grammar that is used for parsing grammar  files,
     including itself:

     Nonterminals
     grammar declaration rule head symbol symbols attached_code
     token tokens.
     Terminals
     atom float integer reserved_symbol string var '->' ':'.



Ericsson UtvecklingsLaAsBt change: parsetools  1.1                 7






yecc(3)             ERLANG MODULE DEFINITION              yecc(3)



     Rootsymbol grammar.
     Endsymbol '$end'.
     grammar -> declaration : '$1'.
     grammar -> rule : '$1'.
     declaration -> symbol symbols : {'$1' ,  '$2'}.
     rule -> head '->' symbols attached_code : {rule, ['$1' | '$3'],
             '$4'}.
     head -> symbol : '$1'.
     symbols -> symbol : ['$1'].
     symbols -> symbol symbols : ['$1' | '$2'].
     attached_code -> ':' tokens : {erlang_code, '$2'}.
     attached_code -> '$empty' : {erlang_code,
                      [{atom, 0, '$undefined'}]}.
     tokens -> token : ['$1'].
     tokens -> token tokens : ['$1' | '$2'].
     symbol -> var : value_of  ('$1').
     symbol -> atom : value_of  ('$1').
     symbol -> integer : value_of  ('$1').
     token -> var :  '$1'.
     token -> atom : '$1'.
     token -> float : '$1'.
     token -> integer : '$1'.
     token -> string : '$1'.
     token -> reserved_symbol : {value_of('$1'), line_of('$1')}.
     token -> '->' : {'->', line_of('$1')}.
     token -> ':' : {':', line_of('$1')}.
     Erlang code.
     value_of(Token) ->
             element(3, Token).
     line_of(Token) ->
             element(2, Token).

  Note:
     The symbols '->', and ':' have to be treated  in  a  special
     way,  as  they  are  metasymbols of the grammar notation, as
     well as terminal symbols of the _y_e_c_c grammar.


     4. The file _e_s_y_n_t_a_x._y_r_l in the _l_i_b/_y_e_c_c/_s_r_c  directory  con-
     tains a grammar for Erlang.

  Note:
     Syntactic tests are used in the code  associated  with  some
     rules,  and  an error is thrown (and caught by the generated
     parser to produce an error message) when a test  fails.  The
     same    effect    can    be    achieved    with    a    call
     to_r_e_t_u_r_n__e_r_r_o_r(_E_r_r_o_r__l_i_n_e, _M_e_s_s_a_g_e__s_t_r_i_n_g), which is defined
     in the_y_e_c_c_p_r_e._h_r_l default header file.


  Note:




Ericsson UtvecklingsLaAsBt change: parsetools  1.1                 8






yecc(3)             ERLANG MODULE DEFINITION              yecc(3)



     Operator precedence declarations do not have to  be  applied
     to  terminal  operator  symbols  (as  in  _y_a_c_c),  but may be
     defined one level up. This is practical when an operator  is
     overloaded (as in the case of the minus operator '-').


Files
     lib/parsetools/include/yeccpre.hrl

See Also
     Aho & Johnson: 'LR Parsing',  ACM  Computing  Surveys,  vol.
     6:2, 1974.

AUTHOR
     Carl Wilhelm Welin - support@erlang.ericsson.se








































Ericsson UtvecklingsLaAsBt change: parsetools  1.1                 9



