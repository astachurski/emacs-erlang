


erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



NAME
     erl_eterm - Functions for Erlang Term Construction

DESCRIPTION
     This module contains functions for creating and manipulating
     Erlang terms.

     An Erlang term is represented  by  a  C  structure  of  type
     _E_T_E_R_M.  Applications should not reference any fields in this
     structure directly, because it  may  be  changed  in  future
     releases  to  provide  faster and more compact term storage.
     Instead, applications should us  the  macros  and  functions
     provided.

     The following macros each take a single ETERM pointer as  an
     argument.  They return a non-zero value if the test is true,
     and 0 otherwise:

       _E_R_L__I_S__I_N_T_E_G_E_R(_t):
           True if _t is an integer.

       _E_R_L__I_S__U_N_S_I_G_N_E_D__I_N_T_E_G_E_R(_t):
           True if _t is an integer.

       _E_R_L__I_S__F_L_O_A_T(_t):
           True if _t is a floating point number.

       _E_R_L__I_S__A_T_O_M(_t):
           True if _t is an atom.

       _E_R_L__I_S__P_I_D(_t):
           True if _t is a Pid (process identifier).

       _E_R_L__I_S__P_O_R_T(_t):
           True if _t is a port.

       _E_R_L__I_S__R_E_F(_t):
           True if _t is a reference.

       _E_R_L__I_S__T_U_P_L_E(_t):
           True if _t is a tuple.

       _E_R_L__I_S__B_I_N_A_R_Y(_t):
           True if _t is a binary.

       _E_R_L__I_S__L_I_S_T(_t):
           True if _t is a list with zero or more elements.

       _E_R_L__I_S__E_M_P_T_Y__L_I_S_T(_t):
           True if _t is an empty list.

       _E_R_L__I_S__C_O_N_S(_t):



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               1






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



           True if _t is a list with at least one element.

     The following macros can be used  for  retrieving  parts  of
     Erlang  terms.  None  of these do any type checking; results
     are undefined if you pass an  ETERM*  containing  the  wrong
     type.  For  example,  passing a tuple to ERL_ATOM_PTR() will
     likely result in garbage.

       _c_h_a_r *_E_R_L__A_T_O_M__P_T_R(_t):
           A string representing atom _t.

       _i_n_t _E_R_L__A_T_O_M__S_I_Z_E(_t):
           The length (in characters) of atom t.

       _v_o_i_d *_E_R_L__B_I_N__P_T_R(_t):
           A pointer to the contents of _t

       _i_n_t _E_R_L__B_I_N__S_I_Z_E(_t):
           The length (in bytes) of binary object _t.

       _i_n_t _E_R_L__I_N_T__V_A_L_U_E(_t):
           The integer of _t.

       _u_n_s_i_g_n_e_d _i_n_t _E_R_L__I_N_T__U_V_A_L_U_E(_t):
           The unsigned integer value of _t.

       _d_o_u_b_l_e _E_R_L__F_L_O_A_T__V_A_L_U_E(_t):
           The floating point value of _t.

       _E_T_E_R_M *_E_R_L__P_I_D__N_O_D_E(_t):
           The Node in pid _t.

       _i_n_t _E_R_L__P_I_D__N_U_M_B_E_R(_t):
           The sequence number in pid _t.

       _i_n_t _E_R_L__P_I_D__S_E_R_I_A_L(_t):
           The serial number in pid _t.

       _i_n_t _E_R_L__P_I_D__C_R_E_A_T_I_O_N(_t):
           The creation number in pid _t.

       _i_n_t _E_R_L__P_O_R_T__N_U_M_B_E_R(_t):
           The sequence number in port _t.

       _i_n_t _E_R_L__P_O_R_T__C_R_E_A_T_I_O_N(_t):
           The creation number in port _t.

       _E_T_E_R_M *_E_R_L__P_O_R_T__N_O_D_E(_t):
           The node in port _t.

       _i_n_t _E_R_L__R_E_F__N_U_M_B_E_R(_t):
           The first part of the reference number in ref  _t.  Use



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               2






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



           only for compatibility.

       _i_n_t _E_R_L__R_E_F__N_U_M_B_E_R_S(_t):
           Pointer to the array of reference numbers in ref _t.

       _i_n_t _E_R_L__R_E_F__L_E_N(_t):
           The number of used reference numbers in ref _t.

       _i_n_t _E_R_L__R_E_F__C_R_E_A_T_I_O_N(_t):
           The creation number in ref _t.

       _i_n_t _E_R_L__T_U_P_L_E__S_I_Z_E(_t):
           The number of elements in tuple _t.

       _E_T_E_R_M *_E_R_L__C_O_N_S__H_E_A_D(_t):
           The head element of list _t.

       _E_T_E_R_M *_E_R_L__C_O_N_S__T_A_I_L(_t):
           A List representing the tail elements of list _t.


EXPORTS
     ETERM *erl_cons(head, tail)

          Types
               ETERM *head;
               ETERM *tail;

          This function concatenates two Erlang terms, prepending
          _h_e_a_d  onto  _t_a_i_l  and  thereby creating a _c_o_n_s cell. To
          make a proper list, _t_a_i_l should always be a list or  an
          empty list. Note that NULL is not a valid list.

          _h_e_a_d is the new term to be added.

          _t_a_i_l is the existing list to which _h_e_a_d  will  be  con-
          catenated.

          The function returns a new list.

          _E_R_L__C_O_N_S__H_E_A_D(_l_i_s_t) and _E_R_L__C_O_N_S__T_A_I_L(_l_i_s_t) can be used
          to retrieve the head and tail components from the list.
          _e_r_l__h_d(_l_i_s_t) and _e_r_l__t_l(_l_i_s_t) will do the  same  thing,
          but check that the argument really is a list.

          For example:

          ETERM *list,*anAtom,*anInt;
          anAtom = erl_mk_atom("madonna");
          anInt  = erl_mk_int(21);
          list   = erl_mk_empty_list();
          list   = erl_cons(anAtom, list);



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               3






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



          list   = erl_cons(anInt, list);
           ... /* do some work */
          erl_free_compound(list);

     ETERM *erl_copy_term(term)

          Types
               ETERM *term;

          This function creates and returns a copy of the  Erlang
          term _t_e_r_m.

     ETERM *erl_element(position, tuple)

          Types
               int position;
               ETERM *tuple;

          This function extracts  a  specified  element  from  an
          Erlang tuple.

          _p_o_s_i_t_i_o_n  specifies  which  element  to  retrieve  from
          _t_u_p_l_e. The elements are numbered starting from 1.

          _t_u_p_l_e is an Erlang term containing  at  least  _p_o_s_i_t_i_o_n
          elements.

          The function returns a new Erlang term corresponding to
          the  requested element, or NULL if _p_o_s_i_t_i_o_n was greater
          than the arity of _t_u_p_l_e.

     void erl_init(NULL, 0)

          Types
               void *NULL;
               int 0;

          This function must be called before any of  the  others
          in the _e_r_l__i_n_t_e_r_f_a_c_e library in order to initialize the
          library functions. The arguments must be  specified  as
          _e_r_l__i_n_i_t(_N_U_L_L, _0).

     ETERM *erl_hd(list)

          Types
               ETERM *list;

          Extracts the first element from a list.

          _l_i_s_t is an Erlang term containing a list.





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               4






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



          The function returns an Erlang  term  corresponding  to
          the head element in the list, or a NULL pointer if _l_i_s_t
          was not a list.

     ETERM *erl_iolist_to_binary(term)

          Types
               ETERM *list;

          This function converts an IO list to a binary term.

          _l_i_s_t is an Erlang term containing a list.

          This function an Erlang binary term, or  NULL  if  _l_i_s_t
          was not an IO list.

          Informally, an IO list is a deep list of characters and
          binaries  which  can be sent to an Erlang port. In BNF,
          an IO list is formally defined as follows:

          iolist ::= []
                  |   Binary
                  |   [iohead | iolist]
                  ;
          iohead ::= Binary
                  |   Byte (integer in the range [0..255])
                  |   iolist
                  ;

     char *erl_iolist_to_string(list)

          Types
               ETERM *list;

          This function converts an IO list to a '\0'  terminated
          C string.

          _l_i_s_t is an Erlang term containing an IO  list.  The  IO
          list  must  not  contain the integer 0, since C strings
          may not contain this  value  except  as  a  terminating
          marker.

          This function returns a pointer to a dynamically  allo-
          cated  buffer containing a string. If _l_i_s_t is not an IO
          list, or if  _l_i_s_t  contains  the  integer  0,  NULL  is
          returned.  It  is  the caller's responsibility free the
          allocated buffer with _e_r_l__f_r_e_e().

          Refer to _e_r_l__i_o_l_i_s_t__t_o__b_i_n_a_r_y() for the  definition  of
          an IO list.





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               5






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



     int erl_iolist_length(list)

          Types
               ETERM *list;

          Returns the length of an IO list.

          _l_i_s_t is an Erlang term containing an IO list.

          The function returns the length of _l_i_s_t, or -1 if  _l_i_s_t
          is not an IO list.

          Refer to _e_r_l__i_o_l_i_s_t__t_o__b_i_n_a_r_y() for the  definition  of
          an IO list.

     int erl_length(list)

          Types
               ETERM *list;

          Determines the length of a proper list.

          _l_i_s_t is an Erlang term containing  proper  list.  In  a
          proper list, all tails except the last point to another
          list cell, and the last tail points to an empty list.

          Returns -1 if _l_i_s_t is not a proper list.

     ETERM *erl_mk_atom(string)

          Types
               char *string;

          Creates an atom.

          _s_t_r_i_n_g is the sequence of characters that will be  used
          to create the atom.

          Returns an Erlang term containing an atom. Note that it
          is  the callers responsibility to make sure that _s_t_r_i_n_g
          contains a valid name for an atom.

          _E_R_L__A_T_O_M__P_T_R(_a_t_o_m) can be used  to  retrieve  the  atom
          name  (as  a  string).  Note  that the string is not 0-
          terminated in the atom. _E_R_L__A_T_O_M__S_I_Z_E(_a_t_o_m)returns  the
          length of the atom name.

     ETERM *erl_mk_binary(bptr, size)

          Types
               char *bptr;
               int size;



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               6






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



          This function produces an Erlang binary object  from  a
          buffer containing a sequence of bytes.

          _b_p_t_r is a pointer to a buffer containg data to be  con-
          verted.

          _s_i_z_e indicates the length of _b_p_t_r.

          The function returns an Erlang binary object.

          _E_R_L__B_I_N__P_T_R(_b_i_n) retrieves  a  pointer  to  the  binary
          data. _E_R_L__B_I_N__S_I_Z_E(_b_i_n) retrieves the size.

     ETERM *erl_mk_empty_list()

          This function creates and returns an empty Erlang list.
          Note  that NULL is not used to represent an empty list;
          Use this function instead.

     ETERM *erl_mk_estring(string, len)

          Types
               char *string;
               int len;

          This function creates a list from a sequence of bytes.

          _s_t_r_i_n_g is a buffer containing a sequence of bytes.  The
          buffer does not need to be zero-terminated.

          _l_e_n is the length of _s_t_r_i_n_g.

          The function returns an Erlang list object  correspond-
          ing to the character sequence in _s_t_r_i_n_g.

     ETERM *erl_mk_float(f)

          Types
               double f;

          Creates an Erlang float.

          _f is a value to be converted to an Erlang float.

          The function returns an Erlang float  object  with  the
          value specified in _f.

          _E_R_L__F_L_O_A_T__V_A_L_U_E(_t) can be used to  retrieve  the  value
          from an Erlang float.

     ETERM *erl_mk_int(n)




Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               7






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



          Types
                int n;

          Creates an Erlang integer.

          _n is a value to be converted to an Erlang integer.

          The function returns an Erlang integer object with  the
          value specified in _n.

          _E_R_L__I_N_T__V_A_L_U_E(_t) can be  used  to  retrieve  the  value
          value from an Erlang integer.

     ETERM *erl_mk_list(array, arrsize)

          Types
               ETERM **array;
               int arrsize;

          Creates an Erlang list from an array of  Erlang  terms,
          such  that  each element in the list corresponds to one
          element in the array.

          _a_r_r_a_y is an array of Erlang terms.

          _a_r_r_s_i_z_e is the number of elements in _a_r_r_a_y.

          The function  creates  an  Erlang  list  object,  whose
          length  _a_r_r_s_i_z_e  and  whose elements are taken from the
          terms in _a_r_r_a_y.

     ETERM *erl_mk_pid(node, number, serial, creation)

          Types
               const char *node;
               unsigned int number;
               unsigned int serial;
               unsigned int creation;

          This function creates an Erlang process identifier. The
          resulting  pid  can be used by Erlang processes wishing
          to communicate with the C node.

          _n_o_d_e is the name of the C node.

          _n_u_m_b_e_r, _s_e_r_i_a_l and _c_r_e_a_t_i_o_n are arbitrary numbers. Note
          though,  that  these  are limited in precision, so only
          the low 15, 3 and 2 bits of these numbers are  actually
          used.

          The function returns an Erlang pid object.




Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               8






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



          _E_R_L__P_I_D__N_O_D_E(_p_i_d),                 _E_R_L__P_I_D__N_U_M_B_E_R(_p_i_d),
          _E_R_L__P_I_D__S_E_R_I_A_L(_p_i_d)  and  _E_R_L__P_I_D__C_R_E_A_T_I_O_N(_p_i_d)  can be
          used to retrieve the four values  used  to  create  the
          pid.

     ETERM *erl_mk_port(node, number, creation)

          Types
               const char *node;
               unsigned int number;
               unsigned int creation;

          This function creates an Erlang port identifier.

          _n_o_d_e is the name of the C node.

          _n_u_m_b_e_r and _c_r_e_a_t_i_o_n are arbitrary numbers. Note though,
          that these are limited in precision, so only the low 18
          and 2 bits of these numbers are actually used.

          The function returns an Erlang port object.

          _E_R_L__P_O_R_T__N_O_D_E(_p_o_r_t),     _E_R_L__P_O_R_T__N_U_M_B_E_R(_p_o_r_t)      and
          _E_R_L__P_O_R_T__C_R_E_A_T_I_O_N  can  be  used  to retrieve the three
          values used to create the port.

     ETERM *erl_mk_ref(node, number, creation)

          Types
               const char *node;
               unsigned int number;
               unsigned int creation;

          This function creates an  old  Erlang  reference,  with
          only 18 bits - use _e_r_l__m_k__l_o_n_g__r_e_f instead.

          _n_o_d_e is the name of the C node.

          _n_u_m_b_e_r should be chosen  uniquely  for  each  reference
          created for a given C node.

          _c_r_e_a_t_i_o_n is an arbitrary number.

          Note that _n_u_m_b_e_r and _c_r_e_a_t_i_o_n are limited in precision,
          so  only  the  low  18  and 2 bits of these numbers are
          actually used.

          The function returns an Erlang reference object.

          _E_R_L__R_E_F__N_O_D_E(_r_e_f),       _E_R_L__R_E_F__N_U_M_B_E_R(_r_e_f),       and
          _E_R_L__R_E_F__C_R_E_A_T_I_O_N(_r_e_f) to retrieve the three values used
          to create the reference.



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3               9






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



     ETERM *erl_mk_long_ref(node, n1, n2, n3, creation)

          Types
               const char *node;
               unsigned int n1, n2, n3;
               unsigned int creation;

          This function creates  an  Erlang  reference,  with  82
          bits.

          _n_o_d_e is the name of the C node.

          _n_1,  _n_2  and  _n_3  can  be  seen  as  one   big   number
          _n_1*_2^_6_4+_n_2*_2^_3_2+_n_3  which should be chosen uniquely for
          each reference created for a given C node.

          _c_r_e_a_t_i_o_n is an arbitrary number.

          Note that _n_3 and _c_r_e_a_t_i_o_n are limited in precision,  so
          only  the  low 18 and 2 bits of these numbers are actu-
          ally used.

          The function returns an Erlang reference object.

          _E_R_L__R_E_F__N_O_D_E(_r_e_f),                _E_R_L__R_E_F__N_U_M_B_E_R_S(_r_e_f),
          _E_R_L__R_E_F__L_E_N(_r_e_f)  and _E_R_L__R_E_F__C_R_E_A_T_I_O_N(_r_e_f) to retrieve
          the values used to create the reference.

     ETERM *erl_mk_string(string)

          Types
               char *string;

          This function creates a list  from  a  zero  terminated
          string.

          _s_t_r_i_n_g is the zero-terminated  sequence  of  characters
          (i.e. a C string) from which the list will be created.

          The function returns an Erlang list.

     ETERM *erl_mk_tuple(array, arrsize)

          Types
               ETERM **array;
               int arrsize;

          Creates an Erlang tuple from an array of Erlang terms.

          _a_r_r_a_y is an array of Erlang terms.





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3              10






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



          _a_r_r_s_i_z_e is the number of elements in _a_r_r_a_y.

          The function creates an Erlang tuple,  whose  arity  is
          _s_i_z_e  and  whose  elements  are taken from the terms in
          _a_r_r_a_y.

          To retrieve  the  size  of  a  tuple,  either  use  the
          _e_r_l__s_i_z_e function (which checks the type of the checked
          term and works for a binary as well as for a tuple), or
          the _E_R_L__T_U_P_L_E__S_I_Z_E(_t_u_p_l_e) returns the arity of a tuple.
          _e_r_l__s_i_z_e() will do the same thing, but it  checks  that
          the  argument  really  is  a  tuple. _e_r_l__e_l_e_m_e_n_t(_i_n_d_e_x,
          _t_u_p_l_e) returns the element  corresponding  to  a  given
          position in the tuple.

     ETERM *erl_mk_uint(n)

          Types
               unsigned int n;

          Creates an Erlang unsigned integer.

          _n is a value to be  converted  to  an  Erlang  unsigned
          integer.

          The function returns an Erlang unsigned integer  object
          with the value specified in _n.

          _E_R_L__I_N_T__U_V_A_L_U_E(_t) can be used  to  retrieve  the  value
          from an Erlang unsigned integer.

     ETERM *erl_mk_var(name)

          Types
               char *name;

          This function creates an unbound Erlang  variable.  The
          variable can later be bound through pattern matching or
          assignment.

          _n_a_m_e specifies a name for the variable.

          The function returns an Erlang variable object with the
          name _n_a_m_e.

     int erl_print_term(stream, term)

          Types
               FILE *stream;
               ETERM *term;





Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3              11






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



          This function prints the specified Erlang term  to  the
          given output stream.

          _s_t_r_e_a_m indicates where the  function  should  send  its
          output.

          _t_e_r_m is the Erlang term to print.

          The function returns the number of characters  written,
          or a negative value if there was an error.

     int erl_size(term)

          Types
               ETERM *term;

          Returns the arity of an Erlang tuple, or the number  of
          bytes in an Erlang binary object.

          _t_e_r_m is an Erlang tuple or an Erlang binary object.

          The function returns the  size  of  _t_e_r_m  as  described
          above,  or  -1  if _t_e_r_m is not one of the two supported
          types.

     ETERM *erl_tl(list)

          Types
               ETERM *list;

          Extracts the tail from a list.

          _l_i_s_t is an Erlang term containing a list.

          The function returns an Erlang  list  corresponding  to
          the  original  list  minus  the  first element, or NULL
          pointer if _l_i_s_t was not a list.

     ETERM *erl_var_content(term, name)

          Types
               ETERM *term;
               char *name;

          This function returns the  contents  of  the  specified
          variable in an Erlang term.

          _t_e_r_m is an Erlang term. In order for this  function  to
          succeed,  _t_e_r_m  must  be  an  Erlang  variable with the
          specified name, or it must be an Erlang list  or  tuple
          containing  a  variable  with the specified name. Other
          Erlang types cannot contain variables.



Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3              12






erl_eterm(3)           C LIBRARY FUNCTIONS           erl_eterm(3)



          _n_a_m_e is the name of an Erlang variable.

          Returns the Erlang object corresponding to the value of
          _n_a_m_e  in  _t_e_r_m.  If  no variable with the name _n_a_m_e was
          found in _t_e_r_m, or if _t_e_r_m is not a valid  Erlang  term,
          NULL is returned.

AUTHORS
     T.Tornkvist - support@erlang.ericsson.se
     Gordon Beaton - support@erlang.ericsson.se













































Ericsson UtveckliLnagsst AcBhange: erl_interface  3.2.3              13



